--Begin Revision History
--<<<
-- 12-Dec-2016 03:55:18 C9919125 /main/50
-- 
--<<<
-- 20-Dec-2016 23:39:18 C9914584 /main/51
-- 
-- <<<
-- 22-Dec-2016 08:15:04 C9914584 /main/52
-- 
-- <<<
-- 16-Jan-2017 10:31:14 E9974449 /main/53
-- 
-- <<<
-- 16-Jan-2017 11:14:57 E9974449 /main/54
-- 
-- <<<
-- 16-Jan-2017 11:32:15 E9974449 /main/55
-- 
-- <<<
-- 26-Jan-2017 19:52:48 E9974449 /main/56
-- 
-- <<<
-- 26-Jan-2017 21:28:17 E9974449 /main/57
-- 
-- <<<
-- 31-Jan-2017 01:55:47 C9919125 /main/58
-- 
-- <<<
--End Revision History  
create or replace PACKAGE BODY      xxar_customer_pkg
AS
------------------------------------------------------------------------------------------
--    Owner        : EATON CORPORATION.
--    Application  : Projects
--    Schema       : APPS
--    Compile AS   : APPS
--    File Name    : XXAR_CUSTOMER_PKG.pkb
--    Date         : 14-July-2014
--    Author       : Ankur Sharma
--    Description  : Package spec for Customer Conversion (OTC-CNV-0001)
--
--    Version      : $ETNHeader: /CCSTORE/ccweb/C9904302/C9904302_XXAR_TOP/vobs/AR_TOP/xxar/12.0.0/install/xxar_customer_pkg.pkb /main/58 31-Jan-2017 01:55:47 C9919125  $
--
--    Parameters  :
--
--    Change History
--  ======================================================================================
--    v1.0        Ankur Sharma     14-Jul-2014    Initial  Creation
--    v1.1        Abhijit Pande    20-Jan-2015    Added mapping for ece_tp_location_code
--    v1.2        Abhijit Pande    28-Jan-2015    Added changes for NA Cross Ref CR.
--                                                address related changes are incoporated
--                                                during extraction.  Confirmed in KT call on 02/09.
--    v1.3        Ankur Sharma     24-Mar-2015    Added Logic for 99 internal Customer
--                                                Added Logic for Multiple Site in Case of 3PP
--                                                and account and relationship Creations
--    v1.4        Sanket Sagvekar  19-Apr-2015     Populated customer_segment instead of segment to derive R12 business segment, and check if customer_segment is null
--    v1.5        Sanket Sagvekar  29-Apr-2015    To fix the issue - SASC records were not being picked up for the conversion. Only ISSC records were getting picked up.
--    v1.6        Sanket Sagvekar  29-Apr-2015    To fix the issue - The value of send_statements is Y. Please enter a value for statement_cycle_id.
--    v1.7        Sanket Sagvekar  29-Apr-2015    To fix the issue - You must enable balance forward billing for the account before You can enable it for the site.
--    v1.8        Sanket Sagvekar  24-May-2015    To fix the issue - Bank account creation at customer site level if bank account exist only at customer level.Defect ID : 1935
--    v1.9        Sanket Sagvekar  26-May-2015    To fix the issue - Bill to and Ship to sites are not created. Defect Id: 1899,1897
--    v1.10       Sanket Sagvekar  29-May-2015    To fix the issue - Customer Account Relationship - Customer not found for Related customer. commented site table and added customer staging table
--    v1.11       Bhaskar Pedipina 30-May-2015    To fix the issues - BILL_TO and SHIP_TO sites are not converted, Defect# 1897 and 1899.
--                                                Added UPPER clause to customer_class_code in  import_cust_accounts_p procedure.
--                                                Added Exception in import_sites_p procedure to pickup SHIP_TO records.
--    v1.12       Sanket Sagvekar  01-Jun-2015    Added l_count:=0 as Customer Account Realtionship program is not getting completed Defect 1938
--                                                Created index xxconv.xxar_cust_acct_relation_stg_u1 on xxconv.xxar_cust_acct_relation_stg table
--    v1.13       Bhaskar Pedipina  03-Jun-2015    To fix the issue - Payment Method validation errors, Mock2 Defect# 1997
--    v1.14       Ankur/Pallab      04-Jun-2015    A suggested by Ankur: Customer Relationship Import - Commit issue.Initialize variable:l_count with zero and comment out
--                                                          which is inside the loop.
--    v1.15       Pallab            04-Jun-2015    Added Log
--    V1.16       Pallab            05-Jun-2015    Off the query which checks realtionship records in BASE table and allowing the API to be called for all V records
--    v1.17       Pallab            10-Jun-2015    Defect#2216: Bank Account not getting created for specific customers.
--    v1.18       Bhaskar Pedipina  29-Jun-2015    To fix the issue - Payment Method validation errors, Mock2 Defect# 1997
--    v1.19       Pallab            30-Jun-2015    Defect#1715:
--                                                   a) for FSC, leg_location should have dash(-) to derive the Credit Office
--                                                   b) While creating location, check province for Canada, and state for non Canadian countries
--    v1.20       Pallab            02-Jul-2015    Derivation logic of L_BUSINESS_SEG
--                                                    Logic to derive R12 Customer Name in case of non-MEXICO customers
--    v1.21       Pallab            08-Jul-2015    Exclude reference of synonym: xxar_cust_ext_r12 due to change in DDL of table-XXEXTN.XXAR_CUSTOMER_STG
--                                                        Removed hardcoding in cursor-fetch_orig_sys_cust_ref
--    v1.22       Ashish            09-Jul-2015    Populate request_id in external bank accounts table
--    v1.23       Avni Sanghvi      10-Jul-2015    Changes for Defect 1669 (obsolete country code), 2142 (collector bug fix), 2085 (DnB change request)
--    v1.24       Ashish            11-Jul-2015    Defect#2046: Correct refrence should be populated at customer site level for Mexico.
--    v1.25       Pallab            14-Jul-2015    Defect#1726/1776: Site creation logic changed
--    v1.26       Avni Sanghvi      15-Jul-2015    Defect#2078: Added mandatory check for State in customer sites validate procedure (only for US -- added by Pallab)
--    v1.27       Ashish            16-Jul-2015    Defect#2151, 1766: Payment term should be converted while creating the site use.
--    v1.28       Pallab            20-Jul-2015    ER:Defect#1119: SALES_CHANNEL added in Customer Accounts  level
--    v1.29       Ankur             20-Jul-2015    Defect#1653: Fix done for Relating SHIP_TO sites with BILL_TO sites
--                                                 Defect#2614: Fix Done to Validate the Customer Contacts on the Basics of Operating Unit
--    v1.30       Pallab            22-Jul-2015    Defect#2080: ORGid in bank accounts staging table is wrongly populated. The reason might be copied over from previous record.
--    v1.31       Pallab            22-Jul-2015    Defect#2495: Update attribute12 on site use for existing customers as part of customer conversion
--    v1.32       Ashish            28-Jul-2015    Defect#2479: Corrected mapping for DUNS number/ultimate
--    v1.33       Pallab            29-Jul-2015    Defect#2099: xxar_customer_site_stg.LEG_SITE_USE_TAX_CODE is mapped in hz_cust_acct_sites_all.attribute11
--    v1.34       Ashish            30-Jul-2015    Defect#2455: Profile amount issue
--    v1.35       Pallab            06-Aug-2015    Defect#1418: Updated with the correct message for Frieght, Revenue, Receivable accounts
--    v1.36       Pallab            07-Aug-2015    Defect#2070: As a part of unit testing with mock data, found issue while deriving existing address from HZ_LOCATIONS table
--    v1.37       Ashish            24-Aug-2015    Defect#1765: Pass null in tax  reference field if we get 2 letter country code.
--    v1.38       Ankur             15-Sep-2015    Defect#2529: Changing log Messages to Display the actual reason of Relation Ships not Getting Created
--                                                              And fixing the defect that relation ship is not created for Customers which dont have a site.
--    v1.39       Ankur             21-Sep-2015    Defect#3210: De-duplication Program related changes to pick up the sites for the loosing Customers.
--    v1.40       Ankur             21-Sep-2015    Defect#1470: Site level Attribute8 Defaulting for SASC and Mexico Customers.
--    v1.41       Ankur             22-Sep-2015    ER#CR323640: Changes made for Intercompany Customer Conversion CR
--    v1.42       Ankur             23-Sep-2015    ER#CR329222: Split plants in 2 OU for OU ELECTRICAL BR(11i)
--    v1.43       Ankur             23-Sep-2015    ER#CR331302: CR related Changes.
--    v1.44       Kulraj            07-Oct-2015    Defect#3219  Customer Bill to site profile status mapped to 'customer'
--    v1.45       Ketaki            08-Oct-2015    ER#CR331302: Changed to leg_orig_sys_cust_ref from leg_orig_sys_add_ref
--    v1.46       Ketaki            08-Oct-2015    ER#CR331302: To identify ISSC Industrial ERP and map Millenium Reference Number
--    v1.47       Piyush Ojha       14-Oct-2015    CR#        : Localization Brazil changes OTC-CNV-0001_5 passing Global DFF at Customer Account site level only for Brazil
--    v1.48       Kulraj Singh      20-Oct-2015    Defect# 2164. Added NVL(l_retcode,g_success) in create_brannches proc
--    v1.49       Kulraj Singh      30-Oct-2015    CR# 329222 FOT issues: Added 11i plant mapping logic for attribute8 = 'A' in import sites record. Modified corresponding cursor
--                                                              Added logic for populating hcsu_attribute6 before doing mandatory check for SASC Electrical BR.
--    v1.50       Ankur             02-Nov-2015    ER#CR323640: Changes made for Intercompany Customer Conversion for Tax, Vat and Duns number field
--    v1.51       Kulraj            04-Nov-2015    CR#339510  : Implement new logic to populate Ultimate DUNS, Parent DUNS and DUNS for all 3 systems
--    v1.52       Ankur             06-Nov-2015    CR#338036  : Change request to create Default Contact Roles for the Contacts where leg_mail_stop value is 'STATEMENT',
--                                                              Statements and Dunnings Default the  Statement Flag for all Customers and Dunnings Flag only for external Customers.
--    v1.53       Ankur             21-Dec-2015    Defect#4562,4563: Concatenate the Orig System Reference field for HZ_PARTIES with MC3 for Mock Conversion 3
--    v1.54       Bhaskar Pedipina  24-Dec-2015    Defect#4654, Customer Site Errors, Conversion Program must pass UPPER case values to Language, Collection Strategy
--                                                              Print Credit Memo and Print Invoice.
--    v1.55       Ankur             21-Jan-2016    Defect#4804: Commenting the where condition for leg_customer_number to process deduplicated Customers
--    v1.56       Ankur             22-Jan-2016    Changed the code to use Lookup for the Brazil OU Mapping and Payment Method Mapping
--    v1.57       Ankur             24-Jan-2016    Temporary fix for the bank account issue in MC3
--    v1.58       Ankur             02-Feb-2016    Defect#4877 Error Messages did not have Interface Stg id to connect back to staging table
--    v1.59       Ankur             16-Feb-2016    Defect#5390 Commenting out Validation to check Duplicate Bank Accounts. Due to Change in approach
--                                                             Because of which Same bank Account Data can come multiple Times.
--    v1.60       Ankur             16-Feb-2016    Defect#5297 Changed the error type from Imp to Val in the validation Package
--                                                             Changed the error message for Mexico in Validate_Sites_p
--    v1.61       Ankur             28-Feb-2016    Defect#5550,5551 Incorrect org_id passed in Bank Account creation API
--    v1.62       Sarvesh           01-Mar-2016    Defect#5571 Uncommented the validation before relationship API call to check if the reciprocal relation is already created.
--                                                 This will fix the API error - A relationship already exists between these two customers received during import.
--    v1.63       Sarvesh           04-Mar-2016    Defect#5571 Commented the variable l_rel_count assignment 0.
--    v1.64       Ankur             10-Mar-2016    Defect#5510 Duplicate Bank Account Error was not getting Captured, Added the same.
--                                                 Defect#5701 Customer Contact point Errors were not getting logged.
--    v1.65       Ankur             11-Mar-2016    ER#5489 Site use Attribute13 mapped to hcsu_attribute13
--    v1.65       Ankur             11-Mar-2016    ER#5489 Site use Attribute13 mapped to hcsu_attribute13
--    v1.66       Ankur             18-Mar-2016    Defect#5268 Permanent Fix
--    v1.67       Ankur             18-Mar-2016    Defect#5621 In case of Customer Site Error from API,
--                                                 the profile amount record was not getting marked as error. Fixed the same
--    v1.68       Ankur             22-Mar-2016    Defect#5290 added NVL for Bank Branches where branch Number is NULL.
--
--    v1.69       Bhaskar Pedipina  28-Mar-2016    Mock3 Defect# 5206, TCA structure not being adhered to by conversion program for IC Customers. Changes done in import_customers_p
--                                                 Procedure. For IC customers, after creation of Parties, updating Customer header and sites staging tables with the newly created
--                                                 Party number and ID based on Plant number exists in leg_customer_name or leg_customer_number
--    v1.70       Bhaskar Pedipina  28-Mar-2016    Mock3 Defect# 4796, Ship-To sites have been converted without linkage to corresponding Bill-to site. Changes done in
--                                                 validate_sites_p procedure. While validating SHIP_TO/SOLD_TO sites, added a condition to check whether the corresponding linked
--                                                 BILL_TO site has been validated or not. If not, updating corresponding SHIP_TO/SOLD_TO sites are not validated.
--                                                 This will prevent SHIP_TO/SOLD_TO sites being created first without BILL_TO linkage.
--    v1.71       Bhaskar Pedipina  28-Mar-2016    Mock3 Defect# 4181, Creating DRAWEE and LEGAL Site uses for ISSC source customers. DRAWEE has to be created for plant numbers
--                                                 3444, 4646 and 4634. LEGAL Site use has to be created for Plant number 6236.
--    v1.72       Bhaskar Pedipina  28-Mar-2016    Mock3 Defect# 5461, If LEG_CONTACT_TYPE is WEB, contact_point_type in R12 should be HTTP.
--    v1.73       Bhaskar Pedipina  28-Mar-2016    Mock3 Defect# 4799, Removed Distress_flag mapping for ISSC source customers and for FSC and SASC sources mapped HCA_ATTRIBUTE3 as
--                                                 Distress_flag
--    v1.74       Ramachandra Gouda 05-May-2016    CR#376679/Defect#5880/Defect#4595,5571 : mapping for some field at party, account and site level. Intercompany SASC change. Relationship change
--						   for self relation.
--    v1.75       Ramachandra Gouda 15-Jun-2016    Corrected SASC plant code issue
--    v1.76       Ankur Sharma      15-Jun-2016    Corrected code for Defect#5268 where Location of bill_to and ship_to was different
--    v1.77       Bhaskar Pedipina  17-Jun-2016    Mock3 Defect# 4181, Changes done for SOLD_TO sites to link with BILL_TO Sites.
--    v1.78       Sarvesh Barve     13-Jul-2016    Mock4 Defect# 8797 - BILL_TO check while using rec_account for business segment derivation
--                                                       Defect# 8792 - SOLD_TO condition missing in default_attribute6 procedure
--    v1.79       Ankur Sharma      14-Jul-2016    Corrected code for Mock4 Defect#8896, Added order by Clause on interface_txn_id so that in case of 3PP
--                                                 the Sites for Only One Leg OU name are created.
--                                                 Commented out condition "and xcss.interface_txn_id = xcbs.interface_txn_id" to resolve the Bank Validation Issue
--                                                 Added Condition for leg_site_use_code = 'BILL_TO'
--    v1.80       Ankur Sharma      19-Jul-2016    Mock4 Defect# 8934 - Initialised record type l_customer_profile_rec for each site
--                                                                    - Updated Logic for Profile Class if Profile Amount Currency is not Existing
--                                                 Mock4 Defect# 8793 - Added condition for Internal Customer so that leg province
--                                                                      error is not applicable for internal Customers
--                                                 Mock4 Defect# 8795 - Added condition for Internal Customer so that leg State
--                                                                      error is not applicable for internal Customers
--                                                 Mock4 Defect# 8797 - Removed condition of Segment6 for SASC internal Customers
--                                                 Mock4 Defect# 9051 - GL_ID_REC should be validated only for BILL_TO sites
--                                                 Mock4 Defect#      - For Japan Alternate Bank Name is a mandatory field, Added NVL for that field
--                                                 Mock4 Defect# 8926 - Changed error message for Account Relation Ships when Child Account doesnt have site in
--                                                                    - Parent ORG
--                                                 Mock4 Defect# 8939 - Changed the bank,Branch,Account validation to include Bank_number and Branch_number fields.
--                                                 Mock4 Defect# 9054 - Changed DRAWEE LEGAL logic to update LEG_PROCESS_FLAG instead of process flag
--    v1.81       Ankur Sharma      26-Jul-2016    Mock4 Defect# 9133 - Customer type was passed incorrectly to the API. Corrected that code.
--                                                                    - Commenting Condition for leg_primary_site_use_flag to fetch the SASC IC OU since this
--                                                                      field might not have data in some cases --
--                                                                    - Code fix done to check the current status of the process_flag before over writting the same
--                                                                      to C
--                                                                    - Mock4 Defect# 9101 - Changed error msg 'Customer BILL_TO site not converted into R12'
--                                                                    - For Contact Points corrected the record types used for telex and web type contacts points
--                                                                ER  - Added validation for Sales Channel lookup code in validate_sites_p procedure
--                                                 Mock4 Defect# 9156 - Changed the logic for Brazil OU added check for hcs_attribute8 before assigning Plant from Lookup
--    v1.82       Ankur Sharma      23-Aug-2016    Mock4 ALM#8934 ER  - Defaulting the values of Grace Days, Collector and Payment Terms
--    v1.83       Ankur Sharma      23-Aug-2016    Mock4 ALM#9196 ER  - Defaulting the values of DFF STATEMENT CONSOLIDATION LEVEL to 'PLANT'
--    v1.84       Bhaskar Pedipina  12-Sep-2016    Mock4 Defect# 9675, Customer Bank/Payment method Set-Up requirements to support RiBa/SEPA processes
--    v1.85       Ram Gouda         19-Sep-2016    Mock4 Defect# 9095 - Create party of person type for each account to solve multiple contact records issue
--                                                       Defect# 9134 - Customer Name, Address details should be in all caps.
--                                                       Defect# 9031 - Duplicate Bank Account Error for valid data issue.
--    v1.86       Bhaskar Pedipina  07-Oct-2016    Mock4 Defect# 9031 - Bank accounts creation logic changed for 3PP sites
--    v1.87       Bhaskar Pedipina  24-Oct-2016    Mock4 CR# 408846, Implemented SEPA Receipt method changes
--                                                 Defect# 10996, Language field showing error for CHINESE
--                                                 Defect# 11767, Mock 4.5 Customer Contacts - Some Job Titles did not convert
--    v1.88       Ram Gouda         10-Nov-2016    Defect# 11767, Mock 4.5 Customer Contacts - Contacts are not getting assigned to all the operating units/sites
--    v1.89       Bhaskar Pedipina  18-Nov-2016    Mock5 Defect# 12471, No Receipt method attached to Operating Unit
--    v1.90       Ram Gouda         25-Nov-2016    Mock5 Defect#12620 : Duplicate Contacts on each site. 
--                                                 Mock5 Defect#12463 : Site Use creation API error for discount_grace_days
--    v1.91       Bhaskar Pedipina  20-Dec-2016    Mock5 Defect# 12453, Customer Site Profile Validation Error : Customer Site is not Valid
--    v1.92       Piyush Ojha       16-Jan-2017    Mock5 Defect#12601 CR#431810 Need to retain all duns number whether customer is de dup or not
--    v1.93		  Piyush Ojha		25-Jan-2017    Defect#13596CR431810  To support INT2, If customer class is coming null from 11i then default as NO CLASSIFICATION
--    v1.94       Piyush Ojha       27-Jan-2017    Defect#13573CR431810 If 11i profile currency is null then use R12 ledger currency to assign profile class and profile currency
--    v1.95       Ram Gouda         27-Jan-2017    Mock5 Defect#12463 : Bill to Site us is created for one org while API gives error for another. 
--  ================================================================================================================================================
----------------------------------------------------------------------------------------------------------------------------------------------------

   -- ---------------------------------------------------------
-- P R I V A T E - G L O B A L - V A R I A B L E S
-- ---------------------------------------------------------

   -- WHO columns global variables
   g_last_updated_by          NUMBER               DEFAULT fnd_global.user_id;
   g_last_update_login        NUMBER              DEFAULT fnd_global.login_id;
   g_request_id               NUMBER       DEFAULT fnd_global.conc_request_id;
   g_prog_appl_id             NUMBER          DEFAULT fnd_global.prog_appl_id;
   g_conc_program_id          NUMBER       DEFAULT fnd_global.conc_program_id;
   g_resp_id                  NUMBER               DEFAULT fnd_global.resp_id;
   g_appl_id                  NUMBER          DEFAULT fnd_global.resp_appl_id;
   -- Stats global variables
   g_total_count              NUMBER                                DEFAULT 0;
   g_failed_count             NUMBER                                DEFAULT 0;
   g_failed_count_imp         NUMBER                                DEFAULT 0;
   -- Batch Id and Run Sequence Id variables
   g_new_batch_id             NUMBER                             DEFAULT NULL;
   g_new_run_seq_id           NUMBER                             DEFAULT NULL;
   --g_limit                    NUMBER                              DEFAULT 500;
   g_limit                    NUMBER                              DEFAULT 50;        --    V1.16
   -- Error Types variables
   g_val_err_type             xxar_customer_stg.ERROR_TYPE%TYPE
                                                            DEFAULT 'ERR_VAL';
   g_imp_err_type             xxar_customer_stg.ERROR_TYPE%TYPE
                                                            DEFAULT 'ERR_IMP';
   g_val_rec                  VARCHAR2 (10)                       DEFAULT 'V';
   g_err_rec                  VARCHAR2 (10)                       DEFAULT 'E';
   g_new_rec                  VARCHAR2 (10)                       DEFAULT 'N';
   -- Custom Profiles variables
   g_err_tab_limit            NUMBER
                        DEFAULT fnd_profile.VALUE ('ETN_FND_ERROR_TAB_LIMIT');
   g_err_cnt                  NUMBER                                DEFAULT 1;
   -- Table Type for Error table
   g_source_tab               xxetn_common_error_pkg.g_source_tab_type;
   -- Program Parameter Global variables
   g_run_mode                 VARCHAR2 (50);
   g_batch_id                 NUMBER;
   g_process_records          VARCHAR2 (50);
   -- Record status Global variables
   g_new                      xxar_customer_stg.process_flag%TYPE DEFAULT 'N';
   g_validated                xxar_customer_stg.process_flag%TYPE DEFAULT 'V';
   g_error                    xxar_customer_stg.process_flag%TYPE DEFAULT 'E';
   g_converted                xxar_customer_stg.process_flag%TYPE DEFAULT 'C';
   g_processed                xxar_customer_stg.process_flag%TYPE DEFAULT 'P';
   -- Custom Lookups and Setups variables
   g_ou_lookup                fnd_lookup_types.lookup_type%TYPE
                                                  DEFAULT 'ETN_COMMON_OU_MAP';
   g_created_by_module        fnd_lookup_types.lookup_type%TYPE
                                                         DEFAULT 'TCA_V2_API';
   g_product_code_oracle      fnd_lookup_values_vl.lookup_code%TYPE
                                                             DEFAULT 'ORACLE';
   g_table_name               VARCHAR2 (30);
   -- <AP>
   g_bank            CONSTANT VARCHAR2 (20)               := 'CUSTOMER_BANKS';
   g_branch          CONSTANT VARCHAR2 (20)            := 'CUSTOMER_BRANCHES';
   g_account         CONSTANT VARCHAR2 (40)       := 'CUSTOMER_BANK_ACCOUNTS';
   g_bank_t          CONSTANT VARCHAR2 (30)      := 'XXAR_CUSTOMER_BANKS_STG';
   g_branch_t        CONSTANT VARCHAR2 (30)   := 'XXAR_CUSTOMER_BRANCHES_STG';
   g_account_t       CONSTANT VARCHAR2 (30) := 'XXAR_CUSTOMER_BANKACCNTS_STG';
   g_pay_method      CONSTANT VARCHAR2 (30)                   := 'PAY_METHOD';
   g_customer        CONSTANT VARCHAR2 (30)                    := 'CUSTOMERS';
   g_customer_site   CONSTANT VARCHAR2 (30)                := 'CUSTOMER_SITE';
   g_contact_point   CONSTANT VARCHAR2 (30)                := 'CONTACT_POINT';
   g_relation        CONSTANT VARCHAR2 (30)                     := 'RELATION';
   g_retcode                  NUMBER;
   g_success         CONSTANT VARCHAR2 (1)                             := 'S';
   g_leg_ou                   VARCHAR2 (240);
   g_leg_src_sys              VARCHAR2 (240);
   g_entity                   VARCHAR2 (240);

   -- <AP>

   --
-- =============================================================================
-- Procedure: debug_msg_p
-- =============================================================================
-- This private Procedure write Debug messages.Calls xxetn_debug_pkg.add_debug internally
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: Various Procedures
-- -----------------------------------------------------------------------------
--
--  Input Parameters :
--  piv_type          : 'STEP' number.
--  piv_name          : Procedure Name in which debug message is present
--  piv_string        : Debug Message String
--
--  Output Parameters : NONE
--
--  Return            : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE debug_msg_p (
      piv_type     IN   VARCHAR2,
      piv_name     IN   VARCHAR2,
      piv_string   IN   VARCHAR2
   )
   IS
      l_error_message   VARCHAR2 (2000);
   BEGIN
      --      fnd_file.put_line (fnd_file.LOG,
      --                            piv_type
      --                         || ',XXAR_CUSTOMER_PKG,'
      --                         || piv_name
      --                         || ','
      --                         || piv_string
      --                        );
      IF (xxetn_debug_pkg.isdebugon)
      THEN
         xxetn_debug_pkg.add_debug (   piv_type
                                    || ',XXAR_CUSTOMER_PKG,'
                                    || piv_name
                                    || ','
                                    || piv_string
                                   );
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         l_error_message := 'Reason :' || SUBSTR (SQLERRM, 1, 250);
         fnd_file.put_line
                   (fnd_file.LOG,
                       'ERROR : XXAR_CUSTOMER_PKG.DEBUG_MSG_P->WHEN_OTHERS->'
                    || l_error_message
                   );
   END debug_msg_p;

--
-- =============================================================================
-- Procedure: print_log_message_p
-- =============================================================================
-- This private API writes messages in Log file
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: Various Procedures
-- -----------------------------------------------------------------------------
--
--  Input Parameters :
--  piv_message       : Message to be printed in Log File
--
--  Output Parameters : NONE
--
--  Return            : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE print_log_message_p (piv_message IN VARCHAR2)
   IS
   BEGIN
      IF NVL (g_request_id, 0) > 0 and  (xxetn_debug_pkg.isdebugon)
      THEN
         fnd_file.put_line (fnd_file.LOG, piv_message);
      END IF;
   END print_log_message_p;

--
-- =============================================================================
-- Procedure: assign_batch_id_p
-- =============================================================================
-- This private procedure will assign Batch Id and Run Sequence Id to New records
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: MAIN_PROCESS_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters : NONE
--
--  Output Parameters :
--  pov_ret_stats     : Return Status of API as 'S' or 'E'
--  pov_err_msg       : Returns Error Message
--
--  Return            : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE assign_batch_id_p (
      pov_ret_stats   OUT NOCOPY   VARCHAR2,
      pov_err_msg     OUT NOCOPY   VARCHAR2
   )
   IS
      --  PRAGMA AUTONOMOUS_TRANSACTION;
      l_new_batch_id   NUMBER;
   BEGIN
      pov_ret_stats := 'S';
      pov_err_msg := NULL;
      debug_msg_p ('STEP:4.1',
                   'ASSIGN_BATCH_ID_P',
                   'In Begin of Prc: ASSIGN_BATCH_ID_P'
                  );
      debug_msg_p ('STEP:4.2',
                   'ASSIGN_BATCH_ID_P',
                   'Batch Id to assign: ' || g_new_batch_id
                  );
      debug_msg_p ('STEP:4.3',
                   'ASSIGN_BATCH_ID_P',
                   'Run Sequence Id to assign: ' || g_new_run_seq_id
                  );
      debug_msg_p ('STEP:4.3', 'ASSIGN_BATCH_ID_P',
                   'Run Entity: ' || g_entity);

      IF g_entity = g_customer
      THEN
         --         l_new_batch_id := g_new_batch_id;

         --         LOOP
         --            UPDATE xxar_customer_stg xcs
         --               SET xcs.batch_id = l_new_batch_id,
         --                   xcs.run_sequence_id = g_new_run_seq_id,
         --                   xcs.process_flag = g_new,
         --                   xcs.request_id = g_request_id,
         --                   xcs.last_updated_date = SYSDATE,
         --                   xcs.last_update_login = g_last_update_login,
         --                   xcs.last_updated_by = g_last_updated_by,
         --                   xcs.program_id = g_conc_program_id,
         --                   xcs.program_application_id = g_prog_appl_id,
         --                   xcs.program_update_date = SYSDATE
         --             WHERE xcs.batch_id IS NULL AND ROWNUM < 30000;

         --            EXIT WHEN SQL%ROWCOUNT = 0;

         --            l_new_batch_id := xxetn_batches_s.NEXTVAL;

         --         END LOOP;
         UPDATE xxar_customer_stg xcs
            SET xcs.batch_id = g_new_batch_id,
                xcs.run_sequence_id = g_new_run_seq_id,
                xcs.process_flag = g_new,
                xcs.request_id = g_request_id,
                xcs.last_updated_date = SYSDATE,
                xcs.last_update_login = g_last_update_login,
                xcs.last_updated_by = g_last_updated_by,
                xcs.program_id = g_conc_program_id,
                xcs.program_application_id = g_prog_appl_id,
                xcs.program_update_date = SYSDATE
          WHERE xcs.batch_id IS NULL;
      END IF;

      IF g_entity = g_customer_site
      THEN
         UPDATE xxar_customer_site_stg xcss
            SET xcss.batch_id = g_new_batch_id,
                xcss.run_sequence_id = g_new_run_seq_id,
                xcss.process_flag = g_new,
                xcss.request_id = g_request_id,
                xcss.last_updated_date = SYSDATE,
                xcss.last_update_login = g_last_update_login,
                xcss.last_updated_by = g_last_updated_by,
                xcss.program_id = g_conc_program_id,
                xcss.program_application_id = g_prog_appl_id,
                xcss.program_update_date = SYSDATE
          WHERE xcss.batch_id IS NULL;

         UPDATE xxar_customer_prof_amnt_stg xcss
            SET xcss.batch_id = g_new_batch_id,
                xcss.run_sequence_id = g_new_run_seq_id,
                xcss.process_flag = g_new,
                xcss.request_id = g_request_id,
                xcss.last_updated_date = SYSDATE,
                xcss.last_update_login = g_last_update_login,
                xcss.last_updated_by = g_last_updated_by,
                xcss.program_id = g_conc_program_id,
                xcss.program_application_id = g_prog_appl_id,
                xcss.program_update_date = SYSDATE
          WHERE xcss.batch_id IS NULL;
      END IF;

      IF g_entity = g_contact_point
      THEN
         UPDATE xxar_customer_contact_stg xccs
            SET xccs.batch_id = g_new_batch_id,
                xccs.run_sequence_id = g_new_run_seq_id,
                xccs.process_flag = g_new,
                xccs.request_id = g_request_id,
                xccs.last_updated_date = SYSDATE,
                xccs.last_update_login = g_last_update_login,
                xccs.last_updated_by = g_last_updated_by,
                xccs.program_id = g_conc_program_id,
                xccs.program_application_id = g_prog_appl_id,
                xccs.program_update_date = SYSDATE
          WHERE xccs.batch_id IS NULL;
      END IF;

      IF g_entity = g_relation
      THEN
         UPDATE xxar_entity_relation_stg xers
            SET xers.batch_id = g_new_batch_id,
                xers.run_sequence_id = g_new_run_seq_id,
                xers.process_flag = g_new,
                xers.request_id = g_request_id,
                xers.last_updated_date = SYSDATE,
                xers.last_update_login = g_last_update_login,
                xers.last_updated_by = g_last_updated_by,
                xers.program_id = g_conc_program_id,
                xers.program_application_id = g_prog_appl_id,
                xers.program_update_date = SYSDATE
          WHERE xers.batch_id IS NULL;

         UPDATE xxar_cust_acct_relation_stg xcars
            SET xcars.batch_id = g_new_batch_id,
                xcars.run_sequence_id = g_new_run_seq_id,
                xcars.process_flag = g_new,
                xcars.request_id = g_request_id,
                xcars.last_updated_date = SYSDATE,
                xcars.last_update_login = g_last_update_login,
                xcars.last_updated_by = g_last_updated_by,
                xcars.program_id = g_conc_program_id,
                xcars.program_application_id = g_prog_appl_id,
                xcars.program_update_date = SYSDATE
          WHERE xcars.batch_id IS NULL;
      END IF;

      IF g_entity = g_bank
      THEN
         UPDATE xxar_customer_banks_stg xcbs
            SET xcbs.batch_id = g_new_batch_id,
                xcbs.run_sequence_id = g_new_run_seq_id,
                xcbs.process_flag = g_new,
                xcbs.request_id = g_request_id,
                xcbs.last_updated_date = SYSDATE,
                xcbs.last_update_login = g_last_update_login,
                xcbs.last_updated_by = g_last_updated_by,
                xcbs.program_id = g_conc_program_id,
                xcbs.program_application_id = g_prog_appl_id,
                xcbs.program_update_date = SYSDATE
          WHERE xcbs.batch_id IS NULL;
      END IF;

      IF g_entity = g_branch
      THEN
         UPDATE xxar_customer_branches_stg xcbs
            SET xcbs.batch_id = g_new_batch_id,
                xcbs.run_sequence_id = g_new_run_seq_id,
                xcbs.process_flag = g_new,
                xcbs.request_id = g_request_id,
                xcbs.last_updated_date = SYSDATE,
                xcbs.last_update_login = g_last_update_login,
                xcbs.last_updated_by = g_last_updated_by,
                xcbs.program_id = g_conc_program_id,
                xcbs.program_application_id = g_prog_appl_id,
                xcbs.program_update_date = SYSDATE
          WHERE xcbs.batch_id IS NULL;
      END IF;

      IF g_entity = g_account
      THEN
         UPDATE xxar_customer_bankaccnts_stg xcbs
            SET xcbs.batch_id = g_new_batch_id,
                xcbs.run_sequence_id = g_new_run_seq_id,
                xcbs.process_flag = g_new,
                xcbs.request_id = g_request_id,
                xcbs.last_updated_date = SYSDATE,
                xcbs.last_update_login = g_last_update_login,
                xcbs.last_updated_by = g_last_updated_by,
                xcbs.program_id = g_conc_program_id,
                xcbs.program_application_id = g_prog_appl_id,
                xcbs.program_update_date = SYSDATE
          WHERE xcbs.batch_id IS NULL;
      END IF;

      IF g_entity = g_pay_method
      THEN
         UPDATE xxar_cust_pay_method_stg xcpms
            SET xcpms.batch_id = g_new_batch_id,
                xcpms.run_sequence_id = g_new_run_seq_id,
                xcpms.process_flag = g_new,
                xcpms.request_id = g_request_id,
                xcpms.last_updated_date = SYSDATE,
                xcpms.last_update_login = g_last_update_login,
                xcpms.last_updated_by = g_last_updated_by,
                xcpms.program_id = g_conc_program_id,
                xcpms.program_application_id = g_prog_appl_id,
                xcpms.program_update_date = SYSDATE
          WHERE xcpms.batch_id IS NULL;
      END IF;

      -- Assigning Batch Id and Run Sequence Id to Conversion Staging Table
      -- Commit
      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         pov_ret_stats := 'E';
         pov_err_msg :=
               'ERROR : XXAR_CUSTOMER_PKG.ASSIGN_BATCH_ID_P->WHEN_OTHERS->'
            || SQLERRM;
         ROLLBACK;
   END assign_batch_id_p;


--
-- =============================================================================
-- Procedure: log_errors_p
-- =============================================================================
-- This private procedure will add Validation/Conversion errors in Table Type
-- and call add_error proc in Error Framework if Limit exceeds
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: Multiple Procedures
-- -----------------------------------------------------------------------------
--
--  Input Parameters  :
--  pi_err_rec        : Record Type Variable with Error Details
--
--  Output Parameters :
--  pov_ret_stats     : Return Status of Procedure as 'S' or 'E'
--  pov_err_msg       : Returns Error Message
--
--  Return            : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE log_errors_p (
      pov_ret_stats   OUT NOCOPY      VARCHAR2,
      pov_err_msg     OUT NOCOPY      VARCHAR2,
      pi_err_rec      IN              xxetn_common_error_pkg.g_source_rec_type
   )
   IS
   BEGIN
      pov_ret_stats := 'S';
      pov_err_msg := NULL;
      debug_msg_p ('STEP:50.1',
                   'LOG_ERRORS_P',
                   'In Begin of Prc: LOG_ERRORS_P'
                  );
      debug_msg_p ('STEP:50.2',
                   'LOG_ERRORS_P',
                   'PLSQL Table Error Record Count: ' || g_err_cnt
                  );
      debug_msg_p ('STEP:50.3',
                   'LOG_ERRORS_P',
                      'Adding error to PLSQL table for Record id: '
                   || pi_err_rec.interface_staging_id
                  );
      -- Assigning record type values to current table record
      g_source_tab (g_err_cnt).interface_staging_id :=
                                               pi_err_rec.interface_staging_id;
      g_source_tab (g_err_cnt).source_table := g_table_name;
      g_source_tab (g_err_cnt).source_column_name :=
                                                 pi_err_rec.source_column_name;
      g_source_tab (g_err_cnt).source_column_value :=
                                                pi_err_rec.source_column_value;
      g_source_tab (g_err_cnt).ERROR_TYPE := pi_err_rec.ERROR_TYPE;
      g_source_tab (g_err_cnt).ERROR_CODE := pi_err_rec.ERROR_CODE;
      g_source_tab (g_err_cnt).error_message := pi_err_rec.error_message;

      IF g_err_cnt >= 1000                                   --g_err_tab_limit
      THEN                          -- if Table Type Error Count reaches limit
         g_err_cnt := 1;
         xxetn_common_error_pkg.add_error
                                         (pov_return_status      => pov_ret_stats,
                                          pov_error_msg          => pov_err_msg,
                                          pi_source_tab          => g_source_tab
                                         );
         -- Flushing PLSQL Table
         g_source_tab.DELETE;
      ELSE
         g_err_cnt := g_err_cnt + 1; -- else increment Table Type Error Count
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         pov_ret_stats := 'E';
         pov_err_msg :=
               pov_err_msg
            || ' ~~ '
            || 'ERROR : XXAR_CUSTOMER_PKG.LOG_ERRORS_P->WHEN_OTHERS->'
            || SQLERRM;
   END log_errors_p;

--
-- ========================
-- Function: get_accnt_seg_id
-- =============================================================================
--   This procedure is used to get account ID for the given segments
-- =============================================================================
--  Input Parameters :
--    piv_acct_name  : Account Name
--    p_accnt_seg    : Segment
--  Return :
--    None
-- -----------------------------------------------------------------------------
   FUNCTION get_accnt_seg_id (
      piv_acct_name   IN   VARCHAR2,
      piv_acct_seg    IN   VARCHAR2
   )
      RETURN NUMBER
   IS
      l_cash_account_id   NUMBER;
      l_rec               xxetn_coa_mapping_pkg.g_coa_rec_type;
      x_rec               xxetn_coa_mapping_pkg.g_coa_rec_type;
      l_coa_rec           xxetn_common_pkg.g_rec_type;
      x_msg               VARCHAR2 (3000);
      l_msg               VARCHAR2 (3000);
      x_status            VARCHAR2 (50);
      l_direction         VARCHAR2 (30);
      l_ext_system        VARCHAR2 (240)                       := NULL;
      l_txn_date          DATE;
   BEGIN
      xxetn_debug_pkg.add_debug
                            (' +  PROCEDURE : validate_code_combinations  + ');

      BEGIN
         l_rec.concatenated_segments := piv_acct_seg;
         l_txn_date := SYSDATE;
         l_direction := 'LEGACY-TO-R12';
         xxetn_coa_mapping_pkg.get_code_combination (l_direction,
                                                     l_ext_system,
                                                     l_txn_date,
                                                     l_rec,
                                                     x_rec,
                                                     x_status,
                                                     x_msg
                                                    );

         IF (x_status = fnd_api.g_ret_sts_error)
         THEN
            xxetn_debug_pkg.add_debug (   ' + API Status:'
                                       || x_status
                                       || 'Error is: '
                                       || x_msg
                                      );
            print_log_message_p (' Error in deriving CCID. Error is :'
                                 || x_msg
                                );
         ELSE
            xxetn_debug_pkg.add_debug (   'R12 concatenated segments :'
                                       || x_rec.concatenated_segments
                                      );
            l_coa_rec.segment1 := x_rec.segment1;
            l_coa_rec.segment2 := x_rec.segment2;
            l_coa_rec.segment3 := x_rec.segment3;
            l_coa_rec.segment4 := x_rec.segment4;
            l_coa_rec.segment5 := x_rec.segment5;
            l_coa_rec.segment6 := x_rec.segment6;
            l_coa_rec.segment7 := x_rec.segment7;
            l_coa_rec.segment8 := x_rec.segment8;
            l_coa_rec.segment9 := x_rec.segment9;
            l_coa_rec.segment10 := x_rec.segment10;
            xxetn_common_pkg.get_ccid (p_in_segments      => l_coa_rec,
                                       p_ccid             => l_cash_account_id,
                                       p_err_msg          => l_msg
                                      );
            xxetn_debug_pkg.add_debug (   'ccid '
                                       || l_cash_account_id
                                       || ' / l_msg '
                                       || l_msg
                                      );

            IF (l_cash_account_id IS NULL)
            THEN
               xxetn_debug_pkg.add_debug
                                    (   ' Error in deriving CCID. Error is :'
                                     || l_msg
                                    );
               print_log_message_p (   ' Error in deriving CCID. Error is :'
                                    || l_msg
                                   );
               RETURN NULL;
            ELSE
               RETURN l_cash_account_id;
            END IF;

            RETURN NULL;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            xxetn_debug_pkg.add_debug ('ERROR - ' || SQLERRM);
            xxetn_debug_pkg.add_debug (   'Error : Backtace : '
                                       || DBMS_UTILITY.format_error_backtrace
                                      );
            RETURN NULL;
      END;

      xxetn_debug_pkg.add_debug (' CCID for account is :' || l_cash_account_id);
      xxetn_debug_pkg.add_debug (' -  PROCEDURE : get_accnt_seg_id  - ');
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         l_cash_account_id := NULL;
         print_log_message_p
                   (   'In No Data found of validate_code_combinations check'
                    || SQLERRM
                   );
         RETURN l_cash_account_id;
      WHEN OTHERS
      THEN
         l_cash_account_id := NULL;
         print_log_message_p
                     (   'In When others of validate_code_combinations check'
                      || SQLERRM
                     );
         RETURN l_cash_account_id;
   END get_accnt_seg_id;

--
-- =============================================================================
-- Procedure: load_data_p
-- =============================================================================
-- This private procedure will load data into the staging tables
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: MAIN_PROC_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters     :
--  pin_total_count      : Total Records Count
--  pin_success_count    : Success Records Count
--  pin_failed_count     : Failed Records Count in Validation
--  pin_failed_count_imp : Failed Records Count in Import
--
--  Output Parameters    :
--  pov_ret_stats        : Return Status as 'S' or 'E'
--  pov_err_msg          : Return Error Message
--
--  Return               : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE load_data_p
   IS
      l_pass_val1                     NUMBER                      := 0;
      l_err_val1                      NUMBER                      := 0;
      l_tot_val1                      NUMBER                      := 0;
      l_pass_imp1                     NUMBER                      := 0;
      l_err_imp1                      NUMBER                      := 0;
      l_tot_imp1                      NUMBER                      := 0;
      l_err_record                    NUMBER;
      l_error_message                 VARCHAR2 (2000);

      TYPE xxar_cust_pay_method_tbl IS TABLE OF xxar_cust_pay_mtd_ext_r12%ROWTYPE
         INDEX BY BINARY_INTEGER;

      i                               NUMBER                      := 0;
      l_xxar_cust_pay_method_tbl      xxar_cust_pay_method_tbl;

      CURSOR load_xxar_cust_pay_method_cur
      IS
         SELECT interface_txn_id, batch_id, run_sequence_id,
                leg_customer_number, leg_site_number, leg_start_date,
                leg_end_date, leg_primary_flag, leg_source_system,
                leg_request_id, leg_seq_num, leg_process_flag,
                leg_pay_method_name, hca_orig_system_customer_ref,
                hl_orig_system_customer_ref, org_id, operating_unit_name,
                branch_id, bank_id, customer_number, customer_site_number,
                cust_account_id, customer_acct_site_id,
                customer_acc_name_r12, customer_site_use_id,
                program_application_id, program_id, program_update_date,
                request_id, process_flag, ERROR_TYPE, rcp_attribute_category,
                rcp_attribute1, rcp_attribute2, rcp_attribute3,
                rcp_attribute4, rcp_attribute5, rcp_attribute6,
                rcp_attribute7, rcp_attribute8, rcp_attribute9,
                rcp_attribute10, rcp_attribute11, rcp_attribute12,
                rcp_attribute13, rcp_attribute14, rcp_attribute15,
                creation_date, created_by, last_updated_date,
                last_updated_by, last_update_login, leg_orig_sys_cust_ref,
                leg_orig_sys_loc_ref, leg_cust_account_id, leg_party_id,
                leg_cust_account_site_id, leg_request_id_ddpl,
                leg_old_cust_acct_id, leg_request_id_merge,
                leg_request_id_enrich
           FROM xxar_cust_pay_mtd_ext_r12 xsber
          WHERE xsber.leg_process_flag = g_validated
            AND NOT EXISTS (
                          SELECT 1
                            FROM xxar_cust_pay_method_stg xsbs
                           WHERE xsbs.interface_txn_id =
                                                        xsber.interface_txn_id);

-- Defining local variables for site tables --
      TYPE xxar_cust_contact_tbl IS TABLE OF xxar_cust_contact_ext_r12%ROWTYPE
         INDEX BY BINARY_INTEGER;

      i                               NUMBER                      := 0;
      l_xxar_cust_contact_tbl         xxar_cust_contact_tbl;

      CURSOR load_xxar_cust_contact_cur
      IS
         SELECT interface_txn_id, batch_id, run_sequence_id,
                leg_person_first_name, leg_person_last_name, leg_party_type,
                leg_title, leg_job_title, leg_job_title_code,
                leg_orig_sys_contact_ref, leg_mail_stop, leg_email_address,
                leg_contact_key, leg_contact_type, leg_contact_number,
                leg_orig_sys_telephone_ref, leg_phone_area_code,
                leg_phone_country_code, leg_phone_extension,
                leg_phone_line_type, leg_phone_number,
                leg_orig_sys_customer_ref, leg_orig_system_address_ref,
                leg_saluation, leg_sex_code, leg_customer_number,
                leg_site_number, customer_number, customer_site_number,
                cust_account_id, customer_acct_site_id, customer_acc_name_r12,
                contact_party_id, org_cont_party_id, contact_role_id,
                cust_account_role_id, leg_operating_unit, org_id,
                hoc_attribute_category, hoc_attribute1, hoc_attribute2,
                hoc_attribute3, hoc_attribute4, hoc_attribute5,
                hoc_attribute6, hoc_attribute7, hoc_attribute8,
                hoc_attribute9, hoc_attribute10, hoc_attribute11,
                hoc_attribute12, hoc_attribute13, hoc_attribute14,
                hoc_attribute15, hoc_attribute16, hoc_attribute17,
                hoc_attribute18, hoc_attribute19, hoc_attribute20,
                hoc_attribute21, hoc_attribute22, hoc_attribute23,
                hoc_attribute24, hoc_attribute25, hcp_attribute_category,
                hcp_attribute1, hcp_attribute2, hcp_attribute3,
                hcp_attribute4, hcp_attribute5, hcp_attribute6,
                hcp_attribute7, hcp_attribute8, hcp_attribute9,
                hcp_attribute10, hcp_attribute11, hcp_attribute12,
                hcp_attribute13, hcp_attribute14, hcp_attribute15,
                creation_date, created_by, last_updated_date, last_updated_by,
                last_update_login, program_application_id, program_id,
                program_update_date, request_id, process_flag, ERROR_TYPE,
                leg_source_system, leg_request_id, leg_seq_num,
                leg_process_flag, leg_cust_acct_id, leg_party_id,
                leg_cust_account_site_id, leg_old_cust_acct_id, leg_url,
                leg_telex_number, leg_request_id_merge, leg_request_id_enrich,
                leg_request_id_ddpl
           FROM xxar_cust_contact_ext_r12 xsber
          WHERE xsber.leg_process_flag = g_validated
            AND NOT EXISTS (
                          SELECT 1
                            FROM xxar_customer_contact_stg xsbs
                           WHERE xsbs.interface_txn_id =
                                                        xsber.interface_txn_id);

---------------------------

      -- Defining local variables for site tables --
      TYPE xxar_customer_site_tbl IS TABLE OF xxar_cust_site_ext_r12%ROWTYPE
         INDEX BY BINARY_INTEGER;

      --   i                               NUMBER                      := 0;
      l_xxar_customer_site_tbl        xxar_customer_site_tbl;

      CURSOR load_xxar_customer_site_cur
      IS
         SELECT interface_txn_id, batch_id, run_sequence_id,
                leg_customer_number, leg_customer_name, leg_customer_type,
                leg_orig_sys_cust_ref, leg_customer_class_code,
                leg_customer_category_code, leg_jgzz_fiscal_code,
                leg_tax_reference, leg_cust_ship_via, leg_person_flag,
                leg_person_fist_name, leg_person_last_name, leg_duns_number,
                leg_orig_sys_party_ref, leg_source_system, leg_request_id,
                leg_seq_num, leg_process_flag, leg_site_use_code,
                leg_party_site_number, leg_orig_sys_add_ref,
                leg_primary_site_use_flag, leg_trans_cust_name, leg_territory,
                territory_id, leg_pay_method, pay_method_id, leg_gl_id_rec,
                gl_id_rec_account, gl_id_rec, leg_gl_id_rev,
                gl_id_rev_account, gl_id_rev, leg_gl_id_tax,
                gl_id_tax_account, gl_id_tax, leg_gl_id_freight,
                gl_id_freight_account, gl_id_freight, leg_gl_id_clearing,
                gl_id_clearing_account, gl_id_clearing, leg_gl_id_unbilled,
                gl_id_unbilled_account, gl_id_unbilled, leg_gl_id_unearned,
                gl_id_unearned_account, gl_id_unearned, leg_location,
                leg_address1, leg_address2, leg_address3, leg_address4,
                leg_city, leg_state, leg_province, leg_county,
                leg_postal_code, leg_country, leg_language,
                leg_demand_class_code, leg_site_use_tax_code,
                leg_site_use_tax_ref, leg_site_ship_via, leg_bill_to_orig_ref,
                leg_url, leg_operating_unit, org_id,
                leg_cust_profile_class_name, leg_collector_name, collector_id,
                leg_credit_bal_stmt, leg_credit_checking, leg_credit_hold,
                leg_discount_term, leg_dunning_letters, leg_interest_charges,
                leg_statements, leg_tolerance, leg_tax_printing_option,
                leg_account_status, leg_auto_hier_name, leg_credit_rating,
                leg_discount_grace_days, leg_dunning_letter_set_name,
                leg_interest_period_days, leg_override_term,
                leg_payment_grace_days, leg_percent_collectible,
                leg_risk_code, leg_term_name, term_name, term_id,
                leg_stmt_cycle_name, leg_charge_on_fin_flag,
                leg_grouping_name, leg_currency_code, currency_code,
                leg_auto_rec_min_rcpt_amt, leg_interest_rate,
                leg_max_int_charge, leg_min_dun_amt, leg_min_dun_inv_amt,
                leg_min_fc_bal_amt, leg_min_fc_inv_amt, leg_min_stmt_amt,
                leg_overall_credit_limit, leg_tax_credit_limit,
                leg_auto_rec_incl_dis_flag, leg_clearing_days,
                leg_cons_inv_flag, leg_cons_inv_type,
                leg_lockbox_matching_option, leg_credit_classification,
                leg_dis_tran_flag, customer_number, cust_account_id,
                customer_acc_name_r12, party_number, party_site_number,
                party_site_name, site_use_number, site_use_code, location_id,
                party_site_id, bill_to_site_use_id, cust_acct_site_id,
                cust_acct_site_use_id, hl_attribute_category, hl_attribute1,
                hl_attribute2, hl_attribute3, hl_attribute4, hl_attribute5,
                hl_attribute6, hl_attribute7, hl_attribute8, hl_attribute9,
                hl_attribute10, hl_attribute11, hl_attribute12,
                hl_attribute13, hl_attribute14, hl_attribute15,
                hcsu_attribute_category, hcsu_attribute1, hcsu_attribute2,
                hcsu_attribute3, hcsu_attribute4, hcsu_attribute5,
                hcsu_attribute6, hcsu_attribute7, hcsu_attribute8,
                hcsu_attribute9, hcsu_attribute10, hcsu_attribute11,
                hcsu_attribute12, hcsu_attribute13, hcsu_attribute14,
                hcsu_attribute15, hcsu_attribute16, hcsu_attribute17,
                hcsu_attribute18, hcsu_attribute19, hcsu_attribute20,
                hcsu_attribute21, hcsu_attribute22, hcsu_attribute23,
                hcsu_attribute24, hcsu_attribute25, hcsu_global_attr_cat,
                hcsu_global_attribute1, hcsu_global_attribute2,
                hcsu_global_attribute3, hcsu_global_attribute4,
                hcsu_global_attribute5, hcsu_global_attribute6,
                hcsu_global_attribute7, hcsu_global_attribute8,
                hcsu_global_attribute9, hcsu_global_attribute10,
                hcsu_global_attribute11, hcsu_global_attribute12,
                hcsu_global_attribute13, hcsu_global_attribute14,
                hcsu_global_attribute15, hcsu_global_attribute16,
                hcsu_global_attribute17, hcsu_global_attribute18,
                hcsu_global_attribute19, hcsu_global_attribute20,
                hcsu_gdf_attribute_category, hcsu_gdf_attribute1,
                hcsu_gdf_attribute2, hcsu_gdf_attribute3, hcsu_gdf_attribute4,
                hcsu_gdf_attribute5, hcsu_gdf_attribute6, hcsu_gdf_attribute7,
                hcsu_gdf_attribute8, hcsu_gdf_attribute9,
                hcsu_gdf_attribute10, hcsu_gdf_attribute11,
                hcsu_gdf_attribute12, hcsu_gdf_attribute13,
                hcsu_gdf_attribute14, hcsu_gdf_attribute15,
                hcsu_gdf_attribute16, hcsu_gdf_attribute17,
                hcsu_gdf_attribute18, hcsu_gdf_attribute19,
                hcsu_gdf_attribute20, program_application_id, program_id,
                program_update_date, request_id, process_flag, ERROR_TYPE,
                hcp_attribute_category, hcp_attribute1, hcp_attribute2,
                hcp_attribute3, hcp_attribute4, hcp_attribute5,
                hcp_attribute6, hcp_attribute7, hcp_attribute8,
                hcp_attribute9, hcp_attribute10, hcp_attribute11,
                hcp_attribute12, hcp_attribute13, hcp_attribute14,
                hcp_attribute15, hcp_global_attribute1, hcp_global_attribute2,
                hcp_global_attribute3, hcp_global_attribute4,
                hcp_global_attribute5, hcp_global_attribute6,
                hcp_global_attribute7, hcp_global_attribute8,
                hcp_global_attribute9, hcp_global_attribute10,
                hcp_global_attribute11, hcp_global_attribute12,
                hcp_global_attribute13, hcp_global_attribute14,
                hcp_global_attribute15, hcp_global_attribute16,
                hcp_global_attribute17, hcp_global_attribute18,
                hcp_global_attribute19, hcp_global_attribute20,
                hcp_gdf_attribute_category, hcp_gdf_attribute1,
                hcp_gdf_attribute2, hcp_gdf_attribute3, hcp_gdf_attribute4,
                hcp_gdf_attribute5, hcp_gdf_attribute6, hcp_gdf_attribute7,
                hcp_gdf_attribute8, hcp_gdf_attribute9, hcp_gdf_attribute10,
                hcp_gdf_attribute11, hcp_gdf_attribute12, hcp_gdf_attribute13,
                hcp_gdf_attribute14, hcp_gdf_attribute15, hcp_gdf_attribute16,
                hcp_gdf_attribute17, hcp_gdf_attribute18, hcp_gdf_attribute19,
                hcp_gdf_attribute20, hcpa_attribute_category, hcpa_attribute1,
                hcpa_attribute2, hcpa_attribute3, hcpa_attribute4,
                hcpa_attribute5, hcpa_attribute6, hcpa_attribute7,
                hcpa_attribute8, hcpa_attribute9, hcpa_attribute10,
                hcpa_attribute11, hcpa_attribute12, hcpa_attribute13,
                hcpa_attribute14, hcpa_attribute15, creation_date, created_by,
                last_updated_date, last_updated_by, last_update_login,
                leg_cust_account_id, leg_party_id, leg_cust_acct_site_id,
                leg_party_site_id, leg_old_customer_name, leg_old_duns_number,
                leg_old_tax_reference, leg_mdm_confidence_code,
                leg_delete_to_deduplicate, leg_delete_in_favor_of,
                leg_old_cust_acct_id, leg_old_primary_flag,
                leg_request_id_merge, leg_request_id_enrich, party_id,
                leg_orig_sys_cust_site_ref, leg_orig_sys_party_site_ref,
                leg_request_id_ddpl, leg_site_use_id, leg_hq_parent_dnb_num,
                leg_hq_parent_name, leg_domestic_ultimate_dnb_num,
                leg_domestic_ultimate_name, leg_global_ultimate_dnb_num,
                leg_global_ultimate_name, hcs_attribute_category,
                hcs_attribute1, hcs_attribute2, hcs_attribute3,
                hcs_attribute4, hcs_attribute5, hcs_attribute6,
                hcs_attribute7, hcs_attribute8, hcs_attribute9,
                hcs_attribute10, hcs_attribute11, hcs_attribute12,
                hcs_attribute13, hcs_attribute14, hcs_attribute15,
                hcs_attribute16, hcs_attribute17, hcs_attribute18,
                hcs_attribute19, hcs_attribute20, hcs_global_attr_cat,
                hcs_global_attribute1, hcs_global_attribute2,
                hcs_global_attribute3, hcs_global_attribute4,
                hcs_global_attribute5, hcs_global_attribute6,
                hcs_global_attribute7, hcs_global_attribute8,
                hcs_global_attribute9, hcs_global_attribute10,
                hcs_global_attribute11, hcs_global_attribute12,
                hcs_global_attribute13, hcs_global_attribute14,
                hcs_global_attribute15, hcs_global_attribute16,
                hcs_global_attribute17, hcs_global_attribute18,
                hcs_global_attribute19, hcs_global_attribute20,
                leg_bill_to_site_use_id
           FROM xxar_cust_site_ext_r12 xsber
          WHERE xsber.leg_process_flag = g_validated
            AND NOT EXISTS (
                          SELECT 1
                            FROM xxar_customer_site_stg xsbs
                           WHERE xsbs.interface_txn_id =
                                                        xsber.interface_txn_id);

---------------------------
      TYPE xxar_customer_prof_amnt_tbl IS TABLE OF xxar_cust_prof_amt_ext_r12%ROWTYPE
         INDEX BY BINARY_INTEGER;

      --   i                               NUMBER                      := 0;
      l_xxar_customer_prof_amnt_tbl   xxar_customer_prof_amnt_tbl;

      CURSOR load_xxar_cust_prof_amnt_cur
      IS
         SELECT interface_txn_id, batch_id, run_sequence_id,
                leg_customer_number, leg_customer_name, leg_orig_sys_cust_ref,
                leg_source_system, leg_request_id, leg_seq_num,
                leg_process_flag, leg_site_use_code, leg_party_site_number,
                org_id, leg_cust_profile_class_name, leg_collector_name,
                collector_id, leg_credit_bal_stmt, leg_credit_checking,
                leg_credit_hold, leg_discount_term, leg_dunning_letters,
                leg_interest_charges, leg_statements, leg_tolerance,
                leg_tax_printing_option, leg_account_status,
                leg_auto_hier_name, leg_credit_rating,
                leg_discount_grace_days, leg_dunning_letter_set_name,
                leg_interest_period_days, leg_override_term,
                leg_payment_grace_days, leg_percent_collectible,
                leg_risk_code, leg_term_name, term_name, term_id,
                leg_stmt_cycle_name, leg_charge_on_fin_flag,
                leg_grouping_name, leg_currency_code, currency_code,
                leg_auto_rec_min_rcpt_amt, leg_interest_rate,
                leg_max_int_charge, leg_min_dun_amt, leg_min_dun_inv_amt,
                leg_min_fc_bal_amt, leg_min_fc_inv_amt, leg_min_stmt_amt,
                leg_overall_credit_limit, leg_tax_credit_limit,
                leg_auto_rec_incl_dis_flag, leg_clearing_days,
                leg_cons_inv_flag, leg_cons_inv_type,
                leg_lockbox_matching_option, leg_credit_classification,
                leg_dis_tran_flag, customer_number, cust_account_id,
                customer_acc_name_r12, party_number, party_site_number,
                party_site_name, site_use_number, site_use_code, location_id,
                party_site_id, bill_to_site_use_id, cust_acct_site_id,
                cust_acct_site_use_id, program_application_id, program_id,
                program_update_date, request_id, process_flag, ERROR_TYPE,
                hcp_attribute_category, hcp_attribute1, hcp_attribute2,
                hcp_attribute3, hcp_attribute4, hcp_attribute5,
                hcp_attribute6, hcp_attribute7, hcp_attribute8,
                hcp_attribute9, hcp_attribute10, hcp_attribute11,
                hcp_attribute12, hcp_attribute13, hcp_attribute14,
                hcp_attribute15, hcp_global_attribute1, hcp_global_attribute2,
                hcp_global_attribute3, hcp_global_attribute4,
                hcp_global_attribute5, hcp_global_attribute6,
                hcp_global_attribute7, hcp_global_attribute8,
                hcp_global_attribute9, hcp_global_attribute10,
                hcp_global_attribute11, hcp_global_attribute12,
                hcp_global_attribute13, hcp_global_attribute14,
                hcp_global_attribute15, hcp_global_attribute16,
                hcp_global_attribute17, hcp_global_attribute18,
                hcp_global_attribute19, hcp_global_attribute20,
                hcp_gdf_attribute_category, hcp_gdf_attribute1,
                hcp_gdf_attribute2, hcp_gdf_attribute3, hcp_gdf_attribute4,
                hcp_gdf_attribute5, hcp_gdf_attribute6, hcp_gdf_attribute7,
                hcp_gdf_attribute8, hcp_gdf_attribute9, hcp_gdf_attribute10,
                hcp_gdf_attribute11, hcp_gdf_attribute12, hcp_gdf_attribute13,
                hcp_gdf_attribute14, hcp_gdf_attribute15, hcp_gdf_attribute16,
                hcp_gdf_attribute17, hcp_gdf_attribute18, hcp_gdf_attribute19,
                hcp_gdf_attribute20, hcpa_attribute_category, hcpa_attribute1,
                hcpa_attribute2, hcpa_attribute3, hcpa_attribute4,
                hcpa_attribute5, hcpa_attribute6, hcpa_attribute7,
                hcpa_attribute8, hcpa_attribute9, hcpa_attribute10,
                hcpa_attribute11, hcpa_attribute12, hcpa_attribute13,
                hcpa_attribute14, hcpa_attribute15, creation_date, created_by,
                last_updated_date, last_updated_by, last_update_login,
                leg_cust_account_id, leg_party_id, leg_cust_acct_site_id,
                leg_party_site_id, leg_request_id_merge,
                leg_request_id_enrich, party_id, leg_orig_sys_cust_site_ref,
                leg_orig_sys_party_site_ref, leg_request_id_ddpl,
                leg_site_use_id, leg_orig_sys_party_ref, leg_old_cust_acct_id,
                leg_old_cust_orig_sys_ref, leg_operating_unit_name,
                operating_unit_name, leg_plant, leg_orig_sys_hcsu_ref
           FROM xxar_cust_prof_amt_ext_r12 xsber
          WHERE xsber.leg_process_flag = g_validated
            AND NOT EXISTS (
                          SELECT 1
                            FROM xxar_customer_prof_amnt_stg xsbs
                           WHERE xsbs.interface_txn_id =
                                                        xsber.interface_txn_id);

-- Defining local variables for Customer tables --

      /*    OFF in V1.21
      TYPE xxar_customer_tbl IS TABLE OF xxar_cust_ext_r12%ROWTYPE
         INDEX BY BINARY_INTEGER;
      */
      --i                          NUMBER                 := 0;

      --l_xxar_customer_tbl             xxar_customer_tbl;        --    OFF V1.21

      CURSOR load_xxar_customer_cur
      IS
         SELECT interface_txn_id, batch_id, run_sequence_id,
                leg_customer_number, leg_customer_name, leg_customer_type,
                leg_customer_status, leg_orig_sys_cust_ref,
                leg_customer_class_code, leg_cust_tax_code, leg_customer_key,
                leg_tax_exempt_num, leg_jgzz_fiscal_code, leg_tax_reference,
                leg_cust_ship_via, leg_cust_prospect_code,
                leg_cust_name_phonetic, leg_person_flag, leg_person_fist_name,
                leg_person_last_name, leg_duns_number, leg_orig_sys_party_ref,
                leg_source_system, leg_request_id, leg_seq_num,
                leg_process_flag, customer_number, cust_account_id,
                customer_acc_name_r12, program_application_id, program_id,
                program_update_date, request_id, process_flag, ERROR_TYPE,
                hca_attribute_category, hca_attribute1, hca_attribute2,
                hca_attribute3, hca_attribute4, hca_attribute5,
                hca_attribute6, hca_attribute7, hca_attribute8,
                hca_attribute9, hca_attribute10, hca_attribute11,
                hca_attribute12, hca_attribute13, hca_attribute14,
                hca_attribute15, creation_date, created_by, last_updated_date,
                last_updated_by, last_update_login, leg_attribute1,
                leg_attribute2, leg_attribute3, leg_attribute4,
                leg_attribute5, leg_attribute6, leg_attribute7,
                leg_attribute8, leg_attribute9, leg_attribute10,
                leg_attribute11, leg_attribute12, leg_attribute13,
                leg_attribute14, leg_attribute15, leg_attribute16,
                leg_attribute17, leg_attribute18, leg_attribute19,
                leg_attribute20, leg_party_id, leg_cust_account_id,
                leg_delete_to_deduplicate, leg_delete_in_favor_of_id,
                leg_delete_in_favor_of_sys, leg_request_id_merge,
                leg_request_id_enrich, party_id, party_number,
                leg_request_id_ddpl, leg_alternate_name,
                leg_default_country   -- added for defect# 5880, V1.74
           FROM xxar_cust_ext_r12 xsber
          WHERE xsber.leg_process_flag = g_validated
            AND NOT EXISTS (
                          SELECT 1
                            FROM xxar_customer_stg xsbs
                           WHERE xsbs.interface_txn_id =
                                                        xsber.interface_txn_id);

      -- Added Start V1.21
      TYPE xxar_customer_tbl IS TABLE OF load_xxar_customer_cur%ROWTYPE
         INDEX BY BINARY_INTEGER;
      l_xxar_customer_tbl             xxar_customer_tbl;
      -- END V1.21


-- Defining local variables for Entity RelationShip tables  --
      TYPE xxar_entity_relation_tbl IS TABLE OF xxar_entity_rel_ext_r12%ROWTYPE
         INDEX BY BINARY_INTEGER;

      --i                          NUMBER                 := 0;
      l_xxar_entity_relation_tbl      xxar_entity_relation_tbl;

      CURSOR load_xxar_entity_relation_cur
      IS
         SELECT interface_txn_id, batch_id, run_sequence_id,
                hr_relationship_id, leg_hr_subject_id, leg_hr_sub_first_name,
                leg_hr_sub_last_name, leg_subject_orig_sys_party_ref,
                leg_hr_subject_type, leg_hr_object_id,
                leg_object_orig_sys_party_ref, leg_hr_object_type,
                leg_hr_subject_table_name, leg_hr_object_table_name,
                leg_hr_relationship_code, leg_hr_relationship_type,
                leg_hr_status, leg_hr_directional_flag, leg_hr_start_date,
                leg_hr_end_date, customer_number, customer_site_number,
                cust_account_id, customer_acct_site_id, customer_acc_name_r12,
                customer_site_use_id, creation_date, created_by,
                last_updated_date, last_updated_by, last_update_login,
                program_application_id, program_id, program_update_date,
                request_id, process_flag, ERROR_TYPE, leg_source_system,
                leg_request_id, leg_seq_num, leg_process_flag,
                leg_old_subject_id, leg_old_object_id, leg_orig_sys_party_ref,
                leg_request_id_merge, leg_request_id_enrich,
                leg_request_id_ddpl, leg_related_cust_acct_id, leg_title,
                leg_job_title, leg_job_title_code
           FROM xxar_entity_rel_ext_r12 xsber
          WHERE xsber.leg_process_flag = g_validated
            AND NOT EXISTS (
                          SELECT 1
                            FROM xxar_entity_relation_stg xsbs
                           WHERE xsbs.interface_txn_id =
                                                        xsber.interface_txn_id);

      --

      -- Defining local variables for Entity RelationShip tables  --
      TYPE xxar_account_relation_tbl IS TABLE OF xxar_cust_acct_rel_ext_r12%ROWTYPE
         INDEX BY BINARY_INTEGER;

      --i                          NUMBER                 := 0;
      l_xxar_account_relation_tbl     xxar_account_relation_tbl;

      CURSOR load_xxar_account_relation_cur
      IS
         SELECT interface_txn_id, batch_id, run_sequence_id,
                leg_hcar_cust_account_id, leg_orig_sys_cust_ref,
                leg_hcar_rel_cust_account_id, leg_rel_orig_sys_cust_ref,
                leg_hcar_org_id, leg_hcar_org_name, leg_hcar_bill_to_flag,
                leg_hcar_comments, leg_hcar_cust_reciprocal_flag,
                leg_hcar_relationship_type, leg_hcar_ship_to_flag,
                leg_hcar_status, leg_customer_number, leg_site_number,
                customer_number, customer_site_number, cust_account_id,
                customer_acct_site_id, customer_acc_name_r12,
                customer_site_use_id, operating_unit, org_id, creation_date,
                created_by, last_updated_date, last_updated_by,
                last_update_login, program_application_id, program_id,
                program_update_date, request_id, process_flag, ERROR_TYPE,
                leg_source_system, leg_request_id, leg_seq_num,
                leg_process_flag, leg_cust_account_id, leg_request_id_merge,
                leg_request_id_enrich, leg_request_id_ddpl,
                leg_old_cust_acct_id, leg_old_related_cust_acct_id
           FROM xxar_cust_acct_rel_ext_r12 xsber
          WHERE xsber.leg_process_flag = g_validated
            AND NOT EXISTS (
                          SELECT 1
                            FROM xxar_cust_acct_relation_stg xsbs
                           WHERE xsbs.interface_txn_id =
                                                        xsber.interface_txn_id);

      -- Customer Bank Record Type
      TYPE cust_bank_ext_rec IS RECORD (
         interface_txn_id            xxar_customer_banks_stg.interface_txn_id%TYPE,
         batch_id                    xxar_customer_banks_stg.batch_id%TYPE,
         run_sequence_id             xxar_customer_banks_stg.run_sequence_id%TYPE,
         leg_bank_name               xxar_customer_banks_stg.leg_bank_name%TYPE,
         leg_bank_number             xxar_customer_banks_stg.leg_bank_number%TYPE,
         leg_bank_institution_type   xxar_customer_banks_stg.leg_bank_institution_type%TYPE,
         leg_bank_name_alt           xxar_customer_banks_stg.leg_bank_name_alt%TYPE,
         leg_description             xxar_customer_banks_stg.leg_description%TYPE,
         leg_end_date                xxar_customer_banks_stg.leg_end_date%TYPE,
         leg_address1                xxar_customer_banks_stg.leg_address1%TYPE,
         leg_address2                xxar_customer_banks_stg.leg_address2%TYPE,
         leg_address3                xxar_customer_banks_stg.leg_address3%TYPE,
         leg_address4                xxar_customer_banks_stg.leg_address4%TYPE,
         leg_city                    xxar_customer_banks_stg.leg_city%TYPE,
         leg_state                   xxar_customer_banks_stg.leg_state%TYPE,
         leg_postal_code             xxar_customer_banks_stg.leg_postal_code%TYPE,
         leg_county                  xxar_customer_banks_stg.leg_county%TYPE,
         leg_country                 xxar_customer_banks_stg.leg_country%TYPE,
         leg_multi_currency_flag     xxar_customer_banks_stg.leg_multi_currency_flag%TYPE,
         bank_party_id               xxar_customer_banks_stg.bank_party_id%TYPE,
         site_location_id            xxar_customer_banks_stg.site_location_id%TYPE,
         creation_date               xxar_customer_banks_stg.creation_date%TYPE,
         created_by                  xxar_customer_banks_stg.created_by%TYPE,
         last_updated_date           xxar_customer_banks_stg.last_updated_date%TYPE,
         last_updated_by             xxar_customer_banks_stg.last_updated_by%TYPE,
         last_update_login           xxar_customer_banks_stg.last_update_login%TYPE,
         program_application_id      xxar_customer_banks_stg.program_application_id%TYPE,
         program_id                  xxar_customer_banks_stg.program_id%TYPE,
         program_update_date         xxar_customer_banks_stg.program_update_date%TYPE,
         request_id                  xxar_customer_banks_stg.request_id%TYPE,
         process_flag                xxar_customer_banks_stg.process_flag%TYPE,
         ERROR_TYPE                  xxar_customer_banks_stg.ERROR_TYPE%TYPE,
         attribute_category          xxar_customer_banks_stg.attribute_category%TYPE,
         attribute1                  xxar_customer_banks_stg.attribute1%TYPE,
         attribute2                  xxar_customer_banks_stg.attribute2%TYPE,
         attribute3                  xxar_customer_banks_stg.attribute3%TYPE,
         attribute4                  xxar_customer_banks_stg.attribute4%TYPE,
         attribute5                  xxar_customer_banks_stg.attribute5%TYPE,
         attribute6                  xxar_customer_banks_stg.attribute6%TYPE,
         attribute7                  xxar_customer_banks_stg.attribute7%TYPE,
         attribute8                  xxar_customer_banks_stg.attribute8%TYPE,
         attribute9                  xxar_customer_banks_stg.attribute9%TYPE,
         attribute10                 xxar_customer_banks_stg.attribute10%TYPE,
         attribute11                 xxar_customer_banks_stg.attribute11%TYPE,
         attribute12                 xxar_customer_banks_stg.attribute12%TYPE,
         attribute13                 xxar_customer_banks_stg.attribute13%TYPE,
         attribute14                 xxar_customer_banks_stg.attribute14%TYPE,
         attribute15                 xxar_customer_banks_stg.attribute15%TYPE,
         leg_source_system           xxar_customer_banks_stg.leg_source_system%TYPE,
         leg_request_id              xxar_customer_banks_stg.leg_request_id%TYPE,
         leg_seq_num                 xxar_customer_banks_stg.leg_seq_num%TYPE,
         leg_process_flag            xxar_customer_banks_stg.leg_process_flag%TYPE
      );

      -- Customer Bank Branch Record Type
      TYPE cust_branch_ext_rec IS RECORD (
         interface_txn_id           xxar_customer_branches_stg.interface_txn_id%TYPE,
         batch_id                   xxar_customer_branches_stg.batch_id%TYPE,
         run_sequence_id            xxar_customer_branches_stg.run_sequence_id%TYPE,
         leg_bank_name              xxar_customer_branches_stg.leg_bank_name%TYPE,
         leg_bank_number            xxar_customer_branches_stg.leg_bank_number%TYPE,
         leg_bank_branch_name       xxar_customer_branches_stg.leg_bank_branch_name%TYPE,
         leg_branch_number          xxar_customer_branches_stg.leg_branch_number%TYPE,
         leg_bank_branch_name_alt   xxar_customer_branches_stg.leg_bank_branch_name_alt%TYPE,
         leg_bank_branch_type       xxar_customer_branches_stg.leg_bank_branch_type%TYPE,
         leg_description            xxar_customer_branches_stg.leg_description%TYPE,
         leg_rfc_identifier         xxar_customer_branches_stg.leg_rfc_identifier%TYPE,
         leg_start_date             xxar_customer_branches_stg.leg_start_date%TYPE,
         leg_end_date               xxar_customer_branches_stg.leg_end_date%TYPE,
         leg_address_line1          xxar_customer_branches_stg.leg_address_line1%TYPE,
         leg_address_line2          xxar_customer_branches_stg.leg_address_line2%TYPE,
         leg_address_line3          xxar_customer_branches_stg.leg_address_line3%TYPE,
         leg_address_line4          xxar_customer_branches_stg.leg_address_line4%TYPE,
         leg_city                   xxar_customer_branches_stg.leg_city%TYPE,
         leg_state                  xxar_customer_branches_stg.leg_state%TYPE,
         leg_province               xxar_customer_branches_stg.leg_province%TYPE,
         leg_county                 xxar_customer_branches_stg.leg_county%TYPE,
         leg_zip                    xxar_customer_branches_stg.leg_zip%TYPE,
         leg_country                xxar_customer_branches_stg.leg_country%TYPE,
         leg_area_code              xxar_customer_branches_stg.leg_area_code%TYPE,
         leg_phone                  xxar_customer_branches_stg.leg_phone%TYPE,
         branch_party_id            xxar_customer_branches_stg.branch_party_id%TYPE,
         bank_party_id              xxar_customer_branches_stg.bank_party_id%TYPE,
         branch_location_id         xxar_customer_branches_stg.branch_location_id%TYPE,
         branch_site_use_id         xxar_customer_branches_stg.branch_site_use_id%TYPE,
         creation_date              xxar_customer_branches_stg.creation_date%TYPE,
         created_by                 xxar_customer_branches_stg.created_by%TYPE,
         last_update_date           xxar_customer_branches_stg.last_updated_date%TYPE,
         last_updated_by            xxar_customer_branches_stg.last_updated_by%TYPE,
         last_update_login          xxar_customer_branches_stg.last_update_login%TYPE,
         program_application_id     xxar_customer_branches_stg.program_application_id%TYPE,
         program_id                 xxar_customer_branches_stg.program_id%TYPE,
         program_update_date        xxar_customer_branches_stg.program_update_date%TYPE,
         request_id                 xxar_customer_branches_stg.request_id%TYPE,
         process_flag               xxar_customer_branches_stg.process_flag%TYPE,
         ERROR_TYPE                 xxar_customer_branches_stg.ERROR_TYPE%TYPE,
         attribute_category         xxar_customer_branches_stg.attribute_category%TYPE,
         attribute1                 xxar_customer_branches_stg.attribute1%TYPE,
         attribute2                 xxar_customer_branches_stg.attribute2%TYPE,
         attribute3                 xxar_customer_branches_stg.attribute3%TYPE,
         attribute4                 xxar_customer_branches_stg.attribute4%TYPE,
         attribute5                 xxar_customer_branches_stg.attribute5%TYPE,
         attribute6                 xxar_customer_branches_stg.attribute6%TYPE,
         attribute7                 xxar_customer_branches_stg.attribute7%TYPE,
         attribute8                 xxar_customer_branches_stg.attribute8%TYPE,
         attribute9                 xxar_customer_branches_stg.attribute9%TYPE,
         attribute10                xxar_customer_branches_stg.attribute10%TYPE,
         attribute11                xxar_customer_branches_stg.attribute11%TYPE,
         attribute12                xxar_customer_branches_stg.attribute12%TYPE,
         attribute13                xxar_customer_branches_stg.attribute13%TYPE,
         attribute14                xxar_customer_branches_stg.attribute14%TYPE,
         attribute15                xxar_customer_branches_stg.attribute15%TYPE,
         leg_source_system          xxar_customer_branches_stg.leg_source_system%TYPE,
         leg_request_id             xxar_customer_branches_stg.leg_request_id%TYPE,
         leg_seq_num                xxar_customer_branches_stg.leg_seq_num%TYPE,
         leg_process_flag           xxar_customer_branches_stg.leg_process_flag%TYPE
      );

      -- Customer Bank Account Record Type
      TYPE cust_account_ext_rec IS RECORD (
         interface_txn_id               xxar_customer_bankaccnts_stg.interface_txn_id%TYPE,
         batch_id                       xxar_customer_bankaccnts_stg.batch_id%TYPE,
         run_sequence_id                xxar_customer_bankaccnts_stg.run_sequence_id%TYPE,
         leg_bank_account_name          xxar_customer_bankaccnts_stg.leg_bank_account_name%TYPE,
         leg_bank_account_num           xxar_customer_bankaccnts_stg.leg_bank_account_num%TYPE,
         leg_bank_account_name_alt      xxar_customer_bankaccnts_stg.leg_bank_account_name_alt%TYPE,
         leg_bank_name                  xxar_customer_bankaccnts_stg.leg_bank_name%TYPE,
         leg_bank_number                xxar_customer_bankaccnts_stg.leg_bank_number%TYPE,
         leg_branch_name                xxar_customer_bankaccnts_stg.leg_branch_name%TYPE,
         leg_branch_number              xxar_customer_bankaccnts_stg.leg_branch_number%TYPE,
         leg_set_of_books_name          xxar_customer_bankaccnts_stg.leg_set_of_books_name%TYPE,
         leg_currency_code              xxar_customer_bankaccnts_stg.leg_currency_code%TYPE,
         leg_description                xxar_customer_bankaccnts_stg.leg_description%TYPE,
         leg_inactive_date              xxar_customer_bankaccnts_stg.leg_inactive_date%TYPE,
         leg_bank_account_type          xxar_customer_bankaccnts_stg.leg_bank_account_type%TYPE,
         leg_multi_currency_flag        xxar_customer_bankaccnts_stg.leg_multi_currency_flag%TYPE,
         leg_rec_multi_cur_flag         xxar_customer_bankaccnts_stg.leg_rec_multi_cur_flag%TYPE,
         leg_check_digits               xxar_customer_bankaccnts_stg.leg_check_digits%TYPE,
         eft_user_number                xxar_customer_bankaccnts_stg.eft_user_number%TYPE,
         leg_iban_number                xxar_customer_bankaccnts_stg.leg_iban_number%TYPE,
         leg_customer_name              xxar_customer_bankaccnts_stg.leg_customer_name%TYPE,
         leg_site_name                  xxar_customer_bankaccnts_stg.leg_site_name%TYPE,
         leg_start_date                 xxar_customer_bankaccnts_stg.leg_start_date%TYPE,
         leg_end_date                   xxar_customer_bankaccnts_stg.leg_end_date%TYPE,
         leg_primary_flag               xxar_customer_bankaccnts_stg.leg_primary_flag%TYPE,
         leg_source_system              xxar_customer_bankaccnts_stg.leg_source_system%TYPE,
         leg_request_id                 xxar_customer_bankaccnts_stg.leg_request_id%TYPE,
         leg_seq_num                    xxar_customer_bankaccnts_stg.leg_seq_num%TYPE,
         leg_process_flag               xxar_customer_bankaccnts_stg.leg_process_flag%TYPE,
         hca_orig_system_customer_ref   xxar_customer_bankaccnts_stg.hca_orig_system_customer_ref%TYPE,
         hl_orig_system_customer_ref    xxar_customer_bankaccnts_stg.hl_orig_system_customer_ref%TYPE,
         org_id                         xxar_customer_bankaccnts_stg.org_id%TYPE,
         operating_unit_name            xxar_customer_bankaccnts_stg.operating_unit_name%TYPE,
         branch_id                      xxar_customer_bankaccnts_stg.branch_id%TYPE,
         bank_id                        xxar_customer_bankaccnts_stg.bank_id%TYPE,
         customer_number                xxar_customer_bankaccnts_stg.customer_number%TYPE,
         customer_site_number           xxar_customer_bankaccnts_stg.customer_site_number%TYPE,
         cust_account_id                xxar_customer_bankaccnts_stg.cust_account_id%TYPE,
         customer_acct_site_id          xxar_customer_bankaccnts_stg.customer_acct_site_id%TYPE,
         customer_acc_name_r12          xxar_customer_bankaccnts_stg.customer_acc_name_r12%TYPE,
         customer_site_use_id           xxar_customer_bankaccnts_stg.customer_site_use_id%TYPE,
         external_bank_account_id       xxar_customer_bankaccnts_stg.external_bank_account_id%TYPE,
         acc_owning_party_id            xxar_customer_bankaccnts_stg.acc_owning_party_id%TYPE,
         country_code                   xxar_customer_bankaccnts_stg.country_code%TYPE,
         program_application_id         xxar_customer_bankaccnts_stg.program_application_id%TYPE,
         program_id                     xxar_customer_bankaccnts_stg.program_id%TYPE,
         program_update_date            xxar_customer_bankaccnts_stg.program_update_date%TYPE,
         request_id                     xxar_customer_bankaccnts_stg.request_id%TYPE,
         process_flag                   xxar_customer_bankaccnts_stg.process_flag%TYPE,
         ERROR_TYPE                     xxar_customer_bankaccnts_stg.ERROR_TYPE%TYPE,
         aba_attribute_category         xxar_customer_bankaccnts_stg.aba_attribute_category%TYPE,
         aba_attribute1                 xxar_customer_bankaccnts_stg.aba_attribute1%TYPE,
         aba_attribute2                 xxar_customer_bankaccnts_stg.aba_attribute2%TYPE,
         aba_attribute3                 xxar_customer_bankaccnts_stg.aba_attribute3%TYPE,
         aba_attribute4                 xxar_customer_bankaccnts_stg.aba_attribute4%TYPE,
         aba_attribute5                 xxar_customer_bankaccnts_stg.aba_attribute5%TYPE,
         aba_attribute6                 xxar_customer_bankaccnts_stg.aba_attribute6%TYPE,
         aba_attribute7                 xxar_customer_bankaccnts_stg.aba_attribute7%TYPE,
         aba_attribute8                 xxar_customer_bankaccnts_stg.aba_attribute8%TYPE,
         aba_attribute9                 xxar_customer_bankaccnts_stg.aba_attribute9%TYPE,
         aba_attribute10                xxar_customer_bankaccnts_stg.aba_attribute10%TYPE,
         aba_attribute11                xxar_customer_bankaccnts_stg.aba_attribute11%TYPE,
         aba_attribute12                xxar_customer_bankaccnts_stg.aba_attribute12%TYPE,
         aba_attribute13                xxar_customer_bankaccnts_stg.aba_attribute13%TYPE,
         aba_attribute14                xxar_customer_bankaccnts_stg.aba_attribute14%TYPE,
         aba_attribute15                xxar_customer_bankaccnts_stg.aba_attribute15%TYPE,
         aba_global_attr_cat            xxar_customer_bankaccnts_stg.aba_global_attr_cat%TYPE,
         aba_global_attribute1          xxar_customer_bankaccnts_stg.aba_global_attribute1%TYPE,
         aba_global_attribute2          xxar_customer_bankaccnts_stg.aba_global_attribute2%TYPE,
         aba_global_attribute3          xxar_customer_bankaccnts_stg.aba_global_attribute3%TYPE,
         aba_global_attribute4          xxar_customer_bankaccnts_stg.aba_global_attribute4%TYPE,
         aba_global_attribute5          xxar_customer_bankaccnts_stg.aba_global_attribute5%TYPE,
         aba_global_attribute6          xxar_customer_bankaccnts_stg.aba_global_attribute6%TYPE,
         aba_global_attribute7          xxar_customer_bankaccnts_stg.aba_global_attribute7%TYPE,
         aba_global_attribute8          xxar_customer_bankaccnts_stg.aba_global_attribute8%TYPE,
         aba_global_attribute9          xxar_customer_bankaccnts_stg.aba_global_attribute9%TYPE,
         aba_global_attribute10         xxar_customer_bankaccnts_stg.aba_global_attribute10%TYPE,
         aba_global_attribute11         xxar_customer_bankaccnts_stg.aba_global_attribute11%TYPE,
         aba_global_attribute12         xxar_customer_bankaccnts_stg.aba_global_attribute12%TYPE,
         aba_global_attribute13         xxar_customer_bankaccnts_stg.aba_global_attribute13%TYPE,
         aba_global_attribute14         xxar_customer_bankaccnts_stg.aba_global_attribute14%TYPE,
         aba_global_attribute15         xxar_customer_bankaccnts_stg.aba_global_attribute15%TYPE,
         aba_global_attribute16         xxar_customer_bankaccnts_stg.aba_global_attribute16%TYPE,
         aba_global_attribute17         xxar_customer_bankaccnts_stg.aba_global_attribute17%TYPE,
         aba_global_attribute18         xxar_customer_bankaccnts_stg.aba_global_attribute18%TYPE,
         aba_global_attribute19         xxar_customer_bankaccnts_stg.aba_global_attribute19%TYPE,
         aba_global_attribute20         xxar_customer_bankaccnts_stg.aba_global_attribute20%TYPE,
         abua_attribute_category        xxar_customer_bankaccnts_stg.abua_attribute_category%TYPE,
         abua_attribute1                xxar_customer_bankaccnts_stg.abua_attribute1%TYPE,
         abua_attribute2                xxar_customer_bankaccnts_stg.abua_attribute2%TYPE,
         abua_attribute3                xxar_customer_bankaccnts_stg.abua_attribute3%TYPE,
         abua_attribute4                xxar_customer_bankaccnts_stg.abua_attribute4%TYPE,
         abua_attribute5                xxar_customer_bankaccnts_stg.abua_attribute5%TYPE,
         abua_attribute6                xxar_customer_bankaccnts_stg.abua_attribute6%TYPE,
         abua_attribute7                xxar_customer_bankaccnts_stg.abua_attribute7%TYPE,
         abua_attribute8                xxar_customer_bankaccnts_stg.abua_attribute8%TYPE,
         abua_attribute9                xxar_customer_bankaccnts_stg.abua_attribute9%TYPE,
         abua_attribute10               xxar_customer_bankaccnts_stg.abua_attribute10%TYPE,
         abua_attribute11               xxar_customer_bankaccnts_stg.abua_attribute11%TYPE,
         abua_attribute12               xxar_customer_bankaccnts_stg.abua_attribute12%TYPE,
         abua_attribute13               xxar_customer_bankaccnts_stg.abua_attribute13%TYPE,
         abua_attribute14               xxar_customer_bankaccnts_stg.abua_attribute14%TYPE,
         abua_attribute15               xxar_customer_bankaccnts_stg.abua_attribute15%TYPE,
         creation_date                  xxar_customer_bankaccnts_stg.creation_date%TYPE,
         created_by                     xxar_customer_bankaccnts_stg.created_by%TYPE,
         last_updated_date              xxar_customer_bankaccnts_stg.last_updated_date%TYPE,
         last_updated_by                xxar_customer_bankaccnts_stg.last_updated_by%TYPE,
         last_update_login              xxar_customer_bankaccnts_stg.last_update_login%TYPE,
         leg_orig_sys_cust_ref          xxar_customer_bankaccnts_stg.leg_orig_sys_cust_ref%TYPE,
         leg_orig_sys_loc_ref           xxar_customer_bankaccnts_stg.leg_orig_sys_loc_ref%TYPE,
         leg_cust_acct_id               xxar_customer_bankaccnts_stg.leg_cust_acct_id%TYPE,
         leg_party_id                   xxar_customer_bankaccnts_stg.leg_party_id%TYPE,
         leg_cust_account_site_id       xxar_customer_bankaccnts_stg.leg_cust_account_site_id%TYPE,
         leg_old_cust_acct_id           xxar_customer_bankaccnts_stg.leg_old_cust_acct_id%TYPE,
         leg_request_id_merge           xxar_customer_bankaccnts_stg.leg_request_id_merge%TYPE,
         leg_request_id_enrich          xxar_customer_bankaccnts_stg.leg_request_id_enrich%TYPE,
         leg_request_id_ddpl            xxar_customer_bankaccnts_stg.leg_request_id_ddpl%TYPE,
         leg_cust_site_orig_sys_ref     xxar_customer_bankaccnts_stg.leg_cust_site_orig_sys_ref%TYPE  --5880, V1.74
      );

      -- PLSQL Table based on Record Type for Customer Bank
      TYPE cust_bank_ext_tbl IS TABLE OF cust_bank_ext_rec
         INDEX BY BINARY_INTEGER;

      l_cust_bank_ext_tbl             cust_bank_ext_tbl;

      -- PLSQL Table based on Record Type for Customer Bank Branch
      TYPE cust_branch_ext_tbl IS TABLE OF cust_branch_ext_rec
         INDEX BY BINARY_INTEGER;

      l_cust_branch_ext_tbl           cust_branch_ext_tbl;

      -- PLSQL Table based on Record Type for customer Account
      TYPE cust_account_ext_tbl IS TABLE OF cust_account_ext_rec
         INDEX BY BINARY_INTEGER;

      l_cust_account_ext_tbl          cust_account_ext_tbl;

      -- customer Bank Extraction Table cursor
      CURSOR cust_bank_ext_cur
      IS
         SELECT interface_txn_id, batch_id, run_sequence_id, leg_bank_name,
                leg_bank_number, leg_bank_institution_type, leg_bank_name_alt,
                leg_description, leg_end_date, leg_address1, leg_address2,
                leg_address3, leg_address4, leg_city, leg_state,
                leg_postal_code, leg_county, leg_country,
                leg_multi_currency_flag, bank_party_id, site_location_id,
                creation_date, created_by, last_updated_date, last_updated_by,
                last_update_login, program_application_id, program_id,
                program_update_date, request_id, process_flag, ERROR_TYPE,
                attribute_category, attribute1, attribute2, attribute3,
                attribute4, attribute5, attribute6, attribute7, attribute8,
                attribute9, attribute10, attribute11, attribute12,
                attribute13, attribute14, attribute15, leg_source_system,
                leg_request_id, leg_seq_num, leg_process_flag
           FROM xxar_cust_banks_ext_r12 xsber
          WHERE xsber.leg_process_flag = g_validated
            AND NOT EXISTS (
                          SELECT 1
                            FROM xxar_customer_banks_stg xsbs
                           WHERE xsbs.interface_txn_id =
                                                        xsber.interface_txn_id);

      -- Customer Bank Branch Extraction Table cursor
      CURSOR cust_branch_ext_cur
      IS
         SELECT interface_txn_id, batch_id, run_sequence_id, leg_bank_name,
                leg_bank_number, leg_bank_branch_name, leg_branch_number,
                leg_bank_branch_name_alt, leg_bank_branch_type,
                leg_description, leg_rfc_indetifier, leg_start_date,
                leg_end_date, leg_address_line1, leg_address_line2,
                leg_address_line3, leg_address_line4, leg_city, leg_state,
                leg_province, leg_county, leg_zip, leg_country, leg_area_code,
                leg_phone, branch_party_id, bank_party_id, branch_location_id,
                branch_site_use_id, creation_date, created_by,
                last_updated_date, last_updated_by, last_update_login,
                program_application_id, program_id, program_update_date,
                request_id, process_flag, ERROR_TYPE, attribute_category,
                attribute1, attribute2, attribute3, attribute4, attribute5,
                attribute6, attribute7, attribute8, attribute9, attribute10,
                attribute11, attribute12, attribute13, attribute14,
                attribute15, leg_source_system, leg_request_id, leg_seq_num,
                leg_process_flag
           FROM xxar_cust_branches_ext_r12 xsber
          WHERE xsber.leg_process_flag = g_validated
            AND NOT EXISTS (
                          SELECT 1
                            FROM xxar_customer_branches_stg xsbs
                           WHERE xsbs.interface_txn_id =
                                                        xsber.interface_txn_id);

      -- Customer Bank Account Extraction Table cursor
      CURSOR cust_account_ext_cur
      IS
         SELECT interface_txn_id, batch_id, run_sequence_id,
                leg_bank_account_name, leg_bank_account_num,
                leg_bank_account_name_alt, leg_bank_name, leg_bank_number,
                leg_branch_name, leg_branch_number, leg_set_of_books_name,
                leg_currency_code, leg_description, leg_inactive_date,
                leg_bank_account_type, leg_multi_currency_flag,
                leg_rec_multi_cur_flag, leg_check_digits, eft_user_number,
                leg_iban_number, leg_customer_name, leg_site_name,
                leg_start_date, leg_end_date, leg_primary_flag,
                leg_source_system, leg_request_id, leg_seq_num,
                leg_process_flag, hca_orig_system_customer_ref,
                hl_orig_system_customer_ref, org_id, operating_unit_name,
                branch_id, bank_id, customer_number, customer_site_number,
                cust_account_id, customer_acct_site_id, customer_acc_name_r12,
                customer_site_use_id, external_bank_account_id,
                acc_owning_party_id, country_code, program_application_id,
                program_id, program_update_date, request_id, process_flag,
                ERROR_TYPE, aba_attribute_category, aba_attribute1,
                aba_attribute2, aba_attribute3, aba_attribute4,
                aba_attribute5, aba_attribute6, aba_attribute7,
                aba_attribute8, aba_attribute9, aba_attribute10,
                aba_attribute11, aba_attribute12, aba_attribute13,
                aba_attribute14, aba_attribute15, aba_global_attr_cat,
                aba_global_attribute1, aba_global_attribute2,
                aba_global_attribute3, aba_global_attribute4,
                aba_global_attribute5, aba_global_attribute6,
                aba_global_attribute7, aba_global_attribute8,
                aba_global_attribute9, aba_global_attribute10,
                aba_global_attribute11, aba_global_attribute12,
                aba_global_attribute13, aba_global_attribute14,
                aba_global_attribute15, aba_global_attribute16,
                aba_global_attribute17, aba_global_attribute18,
                aba_global_attribute19, aba_global_attribute20,
                abua_attribute_category, abua_attribute1, abua_attribute2,
                abua_attribute3, abua_attribute4, abua_attribute5,
                abua_attribute6, abua_attribute7, abua_attribute8,
                abua_attribute9, abua_attribute10, abua_attribute11,
                abua_attribute12, abua_attribute13, abua_attribute14,
                abua_attribute15, creation_date, created_by,
                last_updated_date, last_updated_by, last_update_login,
                leg_orig_sys_cust_ref, leg_orig_sys_loc_ref, leg_cust_acct_id,
                leg_party_id, leg_cust_account_site_id, leg_old_cust_acct_id,
                leg_request_id_merge, leg_request_id_enrich,
                leg_request_id_ddpl,
                leg_cust_site_orig_sys_ref   -- Defect#5880, V1.74
           FROM xxar_cust_bankacnt_ext_r12 xsber
          WHERE xsber.leg_process_flag = g_validated
            AND NOT EXISTS (
                          SELECT 1
                            FROM xxar_customer_bankaccnts_stg xsbs
                           WHERE xsbs.interface_txn_id =
                                                        xsber.interface_txn_id);
   BEGIN
      -- BANK
           -- Insert bank data from extract staging area to R12 staging table
      IF g_entity = g_bank
      THEN
         -- Open Cursor for all bank records
         OPEN cust_bank_ext_cur;

         LOOP
            l_cust_bank_ext_tbl.DELETE;

            FETCH cust_bank_ext_cur
            BULK COLLECT INTO l_cust_bank_ext_tbl LIMIT 500;

            --limit size of Bulk Collect

            -- Get Total Count
            g_total_count := g_total_count + l_cust_bank_ext_tbl.COUNT;
            EXIT WHEN l_cust_bank_ext_tbl.COUNT = 0;

            BEGIN
               -- Bulk Insert into Conversion table
               FORALL indx IN 1 .. l_cust_bank_ext_tbl.COUNT SAVE EXCEPTIONS
                  INSERT INTO xxar_customer_banks_stg
                              (interface_txn_id,
                               batch_id,
                               run_sequence_id,
                               leg_bank_name,
                               leg_bank_number,
                               leg_bank_institution_type,
                               leg_bank_name_alt,
                               leg_description,
                               leg_end_date,
                               leg_address1,
                               leg_address2,
                               leg_address3,
                               leg_address4,
                               leg_city,
                               leg_state,
                               leg_postal_code,
                               leg_county,
                               leg_country,
                               leg_multi_currency_flag,
                               bank_party_id,
                               site_location_id,
                               creation_date, created_by, last_updated_date,
                               last_updated_by, last_update_login,
                               program_application_id, program_id,
                               program_update_date, request_id,
                               process_flag, ERROR_TYPE,
                               attribute_category,
                               attribute1,
                               attribute2,
                               attribute3,
                               attribute4,
                               attribute5,
                               attribute6,
                               attribute7,
                               attribute8,
                               attribute9,
                               attribute10,
                               attribute11,
                               attribute12,
                               attribute13,
                               attribute14,
                               attribute15,
                               leg_source_system,
                               leg_request_id,
                               leg_seq_num,
                               leg_process_flag
                              )
                       VALUES (l_cust_bank_ext_tbl (indx).interface_txn_id,
                               l_cust_bank_ext_tbl (indx).batch_id,
                               l_cust_bank_ext_tbl (indx).run_sequence_id,
                               l_cust_bank_ext_tbl (indx).leg_bank_name,
                               l_cust_bank_ext_tbl (indx).leg_bank_number,
                               l_cust_bank_ext_tbl (indx).leg_bank_institution_type,
                               l_cust_bank_ext_tbl (indx).leg_bank_name_alt,
                               l_cust_bank_ext_tbl (indx).leg_description,
                               l_cust_bank_ext_tbl (indx).leg_end_date,
                               l_cust_bank_ext_tbl (indx).leg_address1,
                               l_cust_bank_ext_tbl (indx).leg_address2,
                               l_cust_bank_ext_tbl (indx).leg_address3,
                               l_cust_bank_ext_tbl (indx).leg_address4,
                               l_cust_bank_ext_tbl (indx).leg_city,
                               l_cust_bank_ext_tbl (indx).leg_state,
                               l_cust_bank_ext_tbl (indx).leg_postal_code,
                               l_cust_bank_ext_tbl (indx).leg_county,
                               DECODE(l_cust_bank_ext_tbl (indx).leg_country,
                                      'FX','FR',
                                      'LX','LT',
                                      'TP','TL',
                                      'YU','RS',
                                      'ZR','CD',
                                      l_cust_bank_ext_tbl (indx).leg_country), --modified for Defect#1669 - obsolete country codes, v1.23
                               l_cust_bank_ext_tbl (indx).leg_multi_currency_flag,
                               l_cust_bank_ext_tbl (indx).bank_party_id,
                               l_cust_bank_ext_tbl (indx).site_location_id,
                               SYSDATE, g_last_updated_by, SYSDATE,
                               g_last_updated_by, g_last_updated_by,
                               g_prog_appl_id, g_conc_program_id,
                               SYSDATE, g_request_id,
                               g_new, l_cust_bank_ext_tbl (indx).ERROR_TYPE,
                               l_cust_bank_ext_tbl (indx).attribute_category,
                               l_cust_bank_ext_tbl (indx).attribute1,
                               l_cust_bank_ext_tbl (indx).attribute2,
                               l_cust_bank_ext_tbl (indx).attribute3,
                               l_cust_bank_ext_tbl (indx).attribute4,
                               l_cust_bank_ext_tbl (indx).attribute5,
                               l_cust_bank_ext_tbl (indx).attribute6,
                               l_cust_bank_ext_tbl (indx).attribute7,
                               l_cust_bank_ext_tbl (indx).attribute8,
                               l_cust_bank_ext_tbl (indx).attribute9,
                               l_cust_bank_ext_tbl (indx).attribute10,
                               l_cust_bank_ext_tbl (indx).attribute11,
                               l_cust_bank_ext_tbl (indx).attribute12,
                               l_cust_bank_ext_tbl (indx).attribute13,
                               l_cust_bank_ext_tbl (indx).attribute14,
                               l_cust_bank_ext_tbl (indx).attribute15,
                               l_cust_bank_ext_tbl (indx).leg_source_system,
                               l_cust_bank_ext_tbl (indx).leg_request_id,
                               l_cust_bank_ext_tbl (indx).leg_seq_num,
                               l_cust_bank_ext_tbl (indx).leg_process_flag
                              );
            EXCEPTION
               WHEN OTHERS
               THEN
                  FOR l_indx_exp IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                  LOOP
                     l_err_record :=
                        l_cust_bank_ext_tbl
                              (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id;
                     g_retcode := '1';
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Record sequence : '
                         || l_cust_bank_ext_tbl
                               (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id
                        );
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Error Message : '
                         || SQLERRM
                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE)
                        );

                     -- Updating Leg_process_flag to 'E' for failed records
                     UPDATE xxar_cust_banks_ext_r12 xsber
                        SET leg_process_flag = g_error,
                            last_updated_by = g_last_updated_by,
                            last_update_login = g_last_updated_by,
                            last_updated_date = SYSDATE
                      WHERE xsber.interface_txn_id = l_err_record
                        AND xsber.leg_process_flag = g_validated;

                     g_failed_count := g_failed_count + SQL%ROWCOUNT;
--                     l_error_message :=
--                           l_error_message
--                        || ' ~~ '
--                        || SQLERRM
--                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE);
                  END LOOP;
            END;

            -- Update Successful records in Extraction Table
            UPDATE xxar_cust_banks_ext_r12 stg2
               SET leg_process_flag = g_processed,
                   last_updated_by = g_last_updated_by,
                   last_update_login = g_last_updated_by,
                   last_updated_date = SYSDATE
             WHERE leg_process_flag = g_validated
               AND EXISTS (
                           SELECT 1
                             FROM xxar_customer_banks_stg stg1
                            WHERE stg1.interface_txn_id =
                                                         stg2.interface_txn_id);

            COMMIT;
         END LOOP;

         CLOSE cust_bank_ext_cur;                              -- Close Cursor
      END IF;

      -- Insert branch data from extract staging area to R12 staging table
      IF g_entity = g_branch
      THEN
         -- Open Cursor for all branch records
         OPEN cust_branch_ext_cur;

         LOOP
            l_cust_branch_ext_tbl.DELETE;

            FETCH cust_branch_ext_cur
            BULK COLLECT INTO l_cust_branch_ext_tbl LIMIT 500;

            --limit size of Bulk Collect

            -- Get Total Count
            g_total_count := g_total_count + l_cust_branch_ext_tbl.COUNT;
            EXIT WHEN l_cust_branch_ext_tbl.COUNT = 0;

            BEGIN
               -- Bulk Insert into Conversion table
               FORALL indx IN 1 .. l_cust_branch_ext_tbl.COUNT SAVE EXCEPTIONS
                  INSERT INTO xxar_customer_branches_stg
                              (interface_txn_id,
                               batch_id,
                               run_sequence_id,
                               leg_bank_name,
                               leg_bank_number,
                               leg_bank_branch_name,
                               leg_branch_number,
                               leg_bank_branch_name_alt,
                               leg_bank_branch_type,
                               leg_description,
                               leg_rfc_identifier,
                               leg_start_date,
                               leg_end_date,
                               leg_address_line1,
                               leg_address_line2,
                               leg_address_line3,
                               leg_address_line4,
                               leg_city,
                               leg_state,
                               leg_province,
                               leg_county,
                               leg_zip,
                               leg_country,
                               leg_area_code,
                               leg_phone,
                               branch_party_id,
                               bank_party_id,
                               branch_location_id,
                               branch_site_use_id,
                               creation_date, created_by, last_updated_date,
                               last_updated_by, last_update_login,
                               program_application_id, program_id,
                               program_update_date, request_id,
                               process_flag,
                               ERROR_TYPE,
                               attribute_category,
                               attribute1,
                               attribute2,
                               attribute3,
                               attribute4,
                               attribute5,
                               attribute6,
                               attribute7,
                               attribute8,
                               attribute9,
                               attribute10,
                               attribute11,
                               attribute12,
                               attribute13,
                               attribute14,
                               attribute15,
                               leg_source_system,
                               leg_request_id,
                               leg_seq_num,
                               leg_process_flag
                              )
                       VALUES (l_cust_branch_ext_tbl (indx).interface_txn_id,
                               l_cust_branch_ext_tbl (indx).batch_id,
                               l_cust_branch_ext_tbl (indx).run_sequence_id,
                               l_cust_branch_ext_tbl (indx).leg_bank_name,
                               l_cust_branch_ext_tbl (indx).leg_bank_number,
                               l_cust_branch_ext_tbl (indx).leg_bank_branch_name,
                               l_cust_branch_ext_tbl (indx).leg_branch_number,
                               l_cust_branch_ext_tbl (indx).leg_bank_branch_name_alt,
                               NVL
                                  (l_cust_branch_ext_tbl (indx).leg_bank_branch_type,
                                   'ABA'
                                  ),
                               -- Default Bank Branch if Bank Branch is Null
                               l_cust_branch_ext_tbl (indx).leg_description,
                               l_cust_branch_ext_tbl (indx).leg_rfc_identifier,
                               l_cust_branch_ext_tbl (indx).leg_start_date,
                               l_cust_branch_ext_tbl (indx).leg_end_date,
                               l_cust_branch_ext_tbl (indx).leg_address_line1,
                               l_cust_branch_ext_tbl (indx).leg_address_line2,
                               l_cust_branch_ext_tbl (indx).leg_address_line3,
                               l_cust_branch_ext_tbl (indx).leg_address_line4,
                               l_cust_branch_ext_tbl (indx).leg_city,
                               l_cust_branch_ext_tbl (indx).leg_state,
                               l_cust_branch_ext_tbl (indx).leg_province,
                               l_cust_branch_ext_tbl (indx).leg_county,
                               l_cust_branch_ext_tbl (indx).leg_zip,
                               DECODE(l_cust_branch_ext_tbl (indx).leg_country,
                                      'FX','FR',
                                      'LX','LT',
                                      'TP','TL',
                                      'YU','RS',
                                      'ZR','CD',
                                      l_cust_branch_ext_tbl (indx).leg_country), --modified for Defect#1669 - obsolete country codes, v1.23
                               l_cust_branch_ext_tbl (indx).leg_area_code,
                               l_cust_branch_ext_tbl (indx).leg_phone,
                               l_cust_branch_ext_tbl (indx).branch_party_id,
                               l_cust_branch_ext_tbl (indx).bank_party_id,
                               l_cust_branch_ext_tbl (indx).branch_location_id,
                               l_cust_branch_ext_tbl (indx).branch_site_use_id,
                               SYSDATE, g_last_updated_by, SYSDATE,
                               g_last_updated_by, g_last_update_login,
                               g_prog_appl_id, g_conc_program_id,
                               SYSDATE, g_request_id,
                               g_new,
                               l_cust_branch_ext_tbl (indx).ERROR_TYPE,
                               l_cust_branch_ext_tbl (indx).attribute_category,
                               l_cust_branch_ext_tbl (indx).attribute1,
                               l_cust_branch_ext_tbl (indx).attribute2,
                               l_cust_branch_ext_tbl (indx).attribute3,
                               l_cust_branch_ext_tbl (indx).attribute4,
                               l_cust_branch_ext_tbl (indx).attribute5,
                               l_cust_branch_ext_tbl (indx).attribute6,
                               l_cust_branch_ext_tbl (indx).attribute7,
                               l_cust_branch_ext_tbl (indx).attribute8,
                               l_cust_branch_ext_tbl (indx).attribute9,
                               l_cust_branch_ext_tbl (indx).attribute10,
                               l_cust_branch_ext_tbl (indx).attribute11,
                               l_cust_branch_ext_tbl (indx).attribute12,
                               l_cust_branch_ext_tbl (indx).attribute13,
                               l_cust_branch_ext_tbl (indx).attribute14,
                               l_cust_branch_ext_tbl (indx).attribute15,
                               l_cust_branch_ext_tbl (indx).leg_source_system,
                               l_cust_branch_ext_tbl (indx).leg_request_id,
                               l_cust_branch_ext_tbl (indx).leg_seq_num,
                               l_cust_branch_ext_tbl (indx).leg_process_flag
                              );
            EXCEPTION
               WHEN OTHERS
               THEN
                  FOR l_indx_exp IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                  LOOP
                     l_err_record :=
                        l_cust_branch_ext_tbl
                              (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id;
                     g_retcode := '1';
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Record sequence : '
                         || l_cust_branch_ext_tbl
                               (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id
                        );
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Error Message : '
                         || SQLERRM
                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE)
                        );

                     -- Updating Leg_process_flag to 'E' for failed records
                     UPDATE xxar_cust_branches_ext_r12 xsber
                        SET leg_process_flag = g_error,
                            last_updated_by = g_last_updated_by,
                            last_update_login = g_last_updated_by,
                            last_updated_date = SYSDATE
                      WHERE xsber.interface_txn_id = l_err_record
                        AND xsber.leg_process_flag = g_validated;

                     g_failed_count := g_failed_count + SQL%ROWCOUNT;
--                     l_error_message :=
--                           l_error_message
--                        || ' ~~ '
--                        || SQLERRM
--                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE);
                  END LOOP;
            END;

            -- Update Successful records in Extraction Table
            UPDATE xxar_cust_branches_ext_r12 stg2
               SET leg_process_flag = g_processed,
                   last_updated_by = g_last_updated_by,
                   last_update_login = g_last_updated_by,
                   last_updated_date = SYSDATE
             WHERE leg_process_flag = g_validated
               AND EXISTS (
                           SELECT 1
                             FROM xxar_customer_branches_stg stg1
                            WHERE stg1.interface_txn_id =
                                                         stg2.interface_txn_id);

            COMMIT;
         END LOOP;

         CLOSE cust_branch_ext_cur;                            -- Close Cursor
      END IF;

      COMMIT;

      IF g_entity = g_account
      THEN
         -- Open Cursor for all account records
         OPEN cust_account_ext_cur;

         LOOP
            l_cust_account_ext_tbl.DELETE;

            FETCH cust_account_ext_cur
            BULK COLLECT INTO l_cust_account_ext_tbl LIMIT 500;

            --limit size of Bulk Collect

            -- Get Total Count
            g_total_count := g_total_count + l_cust_account_ext_tbl.COUNT;
            EXIT WHEN l_cust_account_ext_tbl.COUNT = 0;

            BEGIN
               -- Bulk Insert into Conversion table
               FORALL indx IN 1 .. l_cust_account_ext_tbl.COUNT SAVE EXCEPTIONS
                  INSERT INTO xxar_customer_bankaccnts_stg
                              (interface_txn_id,
                               batch_id,
                               run_sequence_id,
                               leg_bank_account_name,
                               leg_bank_account_num,
                               leg_bank_account_name_alt,
                               leg_bank_name,
                               leg_bank_number,
                               leg_branch_name,
                               leg_branch_number,
                               leg_set_of_books_name,
                               leg_currency_code,
                               leg_description,
                               leg_inactive_date,
                               leg_bank_account_type,
                               leg_multi_currency_flag,
                               leg_rec_multi_cur_flag,
                               leg_check_digits,
                               eft_user_number,
                               leg_iban_number,
                               leg_customer_name,
                               leg_site_name,
                               leg_start_date,
                               leg_end_date,
                               leg_primary_flag,
                               leg_source_system,
                               leg_request_id,
                               leg_seq_num,
                               leg_process_flag,
                               hca_orig_system_customer_ref,
                               hl_orig_system_customer_ref,
                               org_id, operating_unit_name,
                               branch_id,
                               bank_id,
                               customer_number,
                               customer_site_number,
                               cust_account_id,
                               customer_acct_site_id,
                               customer_acc_name_r12,
                               customer_site_use_id,
                               external_bank_account_id,
                               acc_owning_party_id,
                               country_code,
                               program_application_id, program_id,
                               program_update_date, request_id,
                               process_flag,
                               ERROR_TYPE,
                               aba_attribute_category,
                               aba_attribute1,
                               aba_attribute2,
                               aba_attribute3,
                               aba_attribute4,
                               aba_attribute5,
                               aba_attribute6,
                               aba_attribute7,
                               aba_attribute8,
                               aba_attribute9,
                               aba_attribute10,
                               aba_attribute11,
                               aba_attribute12,
                               aba_attribute13,
                               aba_attribute14,
                               aba_attribute15,
                               aba_global_attr_cat,
                               aba_global_attribute1,
                               aba_global_attribute2,
                               aba_global_attribute3,
                               aba_global_attribute4,
                               aba_global_attribute5,
                               aba_global_attribute6,
                               aba_global_attribute7,
                               aba_global_attribute8,
                               aba_global_attribute9,
                               aba_global_attribute10,
                               aba_global_attribute11,
                               aba_global_attribute12,
                               aba_global_attribute13,
                               aba_global_attribute14,
                               aba_global_attribute15,
                               aba_global_attribute16,
                               aba_global_attribute17,
                               aba_global_attribute18,
                               aba_global_attribute19,
                               aba_global_attribute20,
                               abua_attribute_category,
                               abua_attribute1,
                               abua_attribute2,
                               abua_attribute3,
                               abua_attribute4,
                               abua_attribute5,
                               abua_attribute6,
                               abua_attribute7,
                               abua_attribute8,
                               abua_attribute9,
                               abua_attribute10,
                               abua_attribute11,
                               abua_attribute12,
                               abua_attribute13,
                               abua_attribute14,
                               abua_attribute15,
                               creation_date, created_by, last_updated_date,
                               last_updated_by, last_update_login,
                               leg_orig_sys_cust_ref,
                               leg_orig_sys_loc_ref,
                               leg_cust_acct_id,
                               leg_party_id,
                               leg_cust_account_site_id,
                               leg_old_cust_acct_id,
                               leg_request_id_merge,
                               leg_request_id_enrich,
                               leg_request_id_ddpl,
                               leg_cust_site_orig_sys_ref  -- Defect# 5880, V1.74
                              )
                       VALUES (l_cust_account_ext_tbl (indx).interface_txn_id,
                               l_cust_account_ext_tbl (indx).batch_id,
                               l_cust_account_ext_tbl (indx).run_sequence_id,
                               l_cust_account_ext_tbl (indx).leg_bank_account_name,
                               l_cust_account_ext_tbl (indx).leg_bank_account_num,
                               l_cust_account_ext_tbl (indx).leg_bank_account_name_alt,
                               l_cust_account_ext_tbl (indx).leg_bank_name,
                               l_cust_account_ext_tbl (indx).leg_bank_number,
                               l_cust_account_ext_tbl (indx).leg_branch_name,
                               l_cust_account_ext_tbl (indx).leg_branch_number,
                               l_cust_account_ext_tbl (indx).leg_set_of_books_name,
                               l_cust_account_ext_tbl (indx).leg_currency_code,
                               l_cust_account_ext_tbl (indx).leg_description,
                               l_cust_account_ext_tbl (indx).leg_inactive_date,
                               NVL
                                  (l_cust_account_ext_tbl (indx).leg_bank_account_type,
                                   'BANK'
                                  ),
                               l_cust_account_ext_tbl (indx).leg_multi_currency_flag,
                               l_cust_account_ext_tbl (indx).leg_rec_multi_cur_flag,
                               l_cust_account_ext_tbl (indx).leg_check_digits,
                               l_cust_account_ext_tbl (indx).eft_user_number,
                               l_cust_account_ext_tbl (indx).leg_iban_number,
                               l_cust_account_ext_tbl (indx).leg_customer_name,
                               l_cust_account_ext_tbl (indx).leg_site_name,
                               l_cust_account_ext_tbl (indx).leg_start_date,
                               l_cust_account_ext_tbl (indx).leg_end_date,
                               l_cust_account_ext_tbl (indx).leg_primary_flag,
                               l_cust_account_ext_tbl (indx).leg_source_system,
                               l_cust_account_ext_tbl (indx).leg_request_id,
                               l_cust_account_ext_tbl (indx).leg_seq_num,
                               l_cust_account_ext_tbl (indx).leg_process_flag,
                               l_cust_account_ext_tbl (indx).hca_orig_system_customer_ref,
                               l_cust_account_ext_tbl (indx).hl_orig_system_customer_ref,
                               l_cust_account_ext_tbl (indx).org_id, NULL,
                               --l_cust_account_ext_tbl (indx).operating_unit_name,
                               l_cust_account_ext_tbl (indx).branch_id,
                               l_cust_account_ext_tbl (indx).bank_id,
                               l_cust_account_ext_tbl (indx).customer_number,
                               l_cust_account_ext_tbl (indx).customer_site_number,
                               l_cust_account_ext_tbl (indx).cust_account_id,
                               l_cust_account_ext_tbl (indx).customer_acct_site_id,
                               l_cust_account_ext_tbl (indx).customer_acc_name_r12,
                               l_cust_account_ext_tbl (indx).customer_site_use_id,
                               l_cust_account_ext_tbl (indx).external_bank_account_id,
                               l_cust_account_ext_tbl (indx).acc_owning_party_id,
                               DECODE(l_cust_account_ext_tbl (indx).country_code,
                                      'FX','FR',
                                      'LX','LT',
                                      'TP','TL',
                                      'YU','RS',
                                      'ZR','CD',
                                      l_cust_account_ext_tbl (indx).country_code), --modified for Defect#1669 - obsolete country codes, v1.23
                               g_prog_appl_id, g_conc_program_id,
                               SYSDATE, g_request_id,
                               g_new,
                               l_cust_account_ext_tbl (indx).ERROR_TYPE,
                               l_cust_account_ext_tbl (indx).aba_attribute_category,
                               l_cust_account_ext_tbl (indx).aba_attribute1,
                               l_cust_account_ext_tbl (indx).aba_attribute2,
                               l_cust_account_ext_tbl (indx).aba_attribute3,
                               l_cust_account_ext_tbl (indx).aba_attribute4,
                               l_cust_account_ext_tbl (indx).aba_attribute5,
                               l_cust_account_ext_tbl (indx).aba_attribute6,
                               l_cust_account_ext_tbl (indx).aba_attribute7,
                               l_cust_account_ext_tbl (indx).aba_attribute8,
                               l_cust_account_ext_tbl (indx).aba_attribute9,
                               l_cust_account_ext_tbl (indx).aba_attribute10,
                               l_cust_account_ext_tbl (indx).aba_attribute11,
                               l_cust_account_ext_tbl (indx).aba_attribute12,
                               l_cust_account_ext_tbl (indx).aba_attribute13,
                               l_cust_account_ext_tbl (indx).aba_attribute14,
                               l_cust_account_ext_tbl (indx).aba_attribute15,
                               l_cust_account_ext_tbl (indx).aba_global_attr_cat,
                               l_cust_account_ext_tbl (indx).aba_global_attribute1,
                               l_cust_account_ext_tbl (indx).aba_global_attribute2,
                               l_cust_account_ext_tbl (indx).aba_global_attribute3,
                               l_cust_account_ext_tbl (indx).aba_global_attribute4,
                               l_cust_account_ext_tbl (indx).aba_global_attribute5,
                               l_cust_account_ext_tbl (indx).aba_global_attribute6,
                               l_cust_account_ext_tbl (indx).aba_global_attribute7,
                               l_cust_account_ext_tbl (indx).aba_global_attribute8,
                               l_cust_account_ext_tbl (indx).aba_global_attribute9,
                               l_cust_account_ext_tbl (indx).aba_global_attribute10,
                               l_cust_account_ext_tbl (indx).aba_global_attribute11,
                               l_cust_account_ext_tbl (indx).aba_global_attribute12,
                               l_cust_account_ext_tbl (indx).aba_global_attribute13,
                               l_cust_account_ext_tbl (indx).aba_global_attribute14,
                               l_cust_account_ext_tbl (indx).aba_global_attribute15,
                               l_cust_account_ext_tbl (indx).aba_global_attribute16,
                               l_cust_account_ext_tbl (indx).aba_global_attribute17,
                               l_cust_account_ext_tbl (indx).aba_global_attribute18,
                               l_cust_account_ext_tbl (indx).aba_global_attribute19,
                               l_cust_account_ext_tbl (indx).aba_global_attribute20,
                               l_cust_account_ext_tbl (indx).abua_attribute_category,
                               l_cust_account_ext_tbl (indx).abua_attribute1,
                               l_cust_account_ext_tbl (indx).abua_attribute2,
                               l_cust_account_ext_tbl (indx).abua_attribute3,
                               l_cust_account_ext_tbl (indx).abua_attribute4,
                               l_cust_account_ext_tbl (indx).abua_attribute5,
                               l_cust_account_ext_tbl (indx).abua_attribute6,
                               l_cust_account_ext_tbl (indx).abua_attribute7,
                               l_cust_account_ext_tbl (indx).abua_attribute8,
                               l_cust_account_ext_tbl (indx).abua_attribute9,
                               l_cust_account_ext_tbl (indx).abua_attribute10,
                               l_cust_account_ext_tbl (indx).abua_attribute11,
                               l_cust_account_ext_tbl (indx).abua_attribute12,
                               l_cust_account_ext_tbl (indx).abua_attribute13,
                               l_cust_account_ext_tbl (indx).abua_attribute14,
                               l_cust_account_ext_tbl (indx).abua_attribute15,
                               SYSDATE, g_last_updated_by, SYSDATE,
                               g_last_update_login, g_last_update_login,
                               l_cust_account_ext_tbl (indx).leg_orig_sys_cust_ref,
                               l_cust_account_ext_tbl (indx).leg_orig_sys_loc_ref,
                               l_cust_account_ext_tbl (indx).leg_cust_acct_id,
                               l_cust_account_ext_tbl (indx).leg_party_id,
                               l_cust_account_ext_tbl (indx).leg_cust_account_site_id,
                               l_cust_account_ext_tbl (indx).leg_old_cust_acct_id,
                               l_cust_account_ext_tbl (indx).leg_request_id_merge,
                               l_cust_account_ext_tbl (indx).leg_request_id_enrich,
                               l_cust_account_ext_tbl (indx).leg_request_id_ddpl,
                               l_cust_account_ext_tbl (indx).leg_cust_site_orig_sys_ref  -- Defect# 5880, V1.74
                              );
            EXCEPTION
               WHEN OTHERS
               THEN
                  FOR l_indx_exp IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                  LOOP
                     l_err_record :=
                        l_cust_account_ext_tbl
                              (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id;
                     g_retcode := '1';
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Record sequence : '
                         || l_cust_account_ext_tbl
                               (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id
                        );
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Error Message : '
                         || SQLERRM
                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE)
                        );

                     -- Updating Leg_process_flag to 'E' for failed records
                     UPDATE xxar_cust_bankacnt_ext_r12 xsber
                        SET leg_process_flag = g_error,
                            last_updated_by = g_last_updated_by,
                            last_update_login = g_last_updated_by,
                            last_updated_date = SYSDATE
                      WHERE xsber.interface_txn_id = l_err_record
                        AND xsber.leg_process_flag = g_validated;

                     g_failed_count := g_failed_count + SQL%ROWCOUNT;
--                     l_error_message :=
--                           l_error_message
--                        || ' ~~ '
--                        || SQLERRM
--                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE);
                  END LOOP;
            END;

            -- Update Successful records in Extraction Table
            UPDATE xxar_cust_bankacnt_ext_r12 stg2
               SET leg_process_flag = g_processed,
                   last_updated_by = g_last_updated_by,
                   last_update_login = g_last_updated_by,
                   last_updated_date = SYSDATE
             WHERE leg_process_flag = g_validated
               AND EXISTS (
                           SELECT 1
                             FROM xxar_customer_bankaccnts_stg stg1
                            WHERE stg1.interface_txn_id =
                                                         stg2.interface_txn_id);

            COMMIT;
         END LOOP;

         CLOSE cust_account_ext_cur;                           -- Close Cursor
      END IF;

      -- COMMIT;

      --- Open LOOP --
      --  i := 0;

      --- Customer
      IF g_entity = g_customer
      THEN
         -- Open Cursor for all account records
         OPEN load_xxar_customer_cur;

         LOOP
            l_xxar_customer_tbl.DELETE;

            FETCH load_xxar_customer_cur
            BULK COLLECT INTO l_xxar_customer_tbl LIMIT 500;

            --limit size of Bulk Collect

            -- Get Total Count
            g_total_count := g_total_count + l_xxar_customer_tbl.COUNT;
            EXIT WHEN l_xxar_customer_tbl.COUNT = 0;

            BEGIN
               -- Bulk Insert into Conversion table
               FORALL indx IN 1 .. l_xxar_customer_tbl.COUNT SAVE EXCEPTIONS
                  INSERT INTO xxar_customer_stg
                              (interface_txn_id,
                               batch_id,
                               run_sequence_id,
                               leg_customer_number,
                               leg_customer_name,
                               leg_customer_type,
                               leg_customer_status,
                               leg_orig_sys_cust_ref,
                               leg_customer_class_code,
                               leg_cust_tax_code, leg_customer_key,
                               leg_tax_exempt_num,
                               leg_jgzz_fiscal_code,
                               leg_tax_reference,
                               leg_cust_ship_via,
                               leg_cust_prospect_code,
                               leg_cust_name_phonetic,
                               leg_person_flag,
                               leg_person_fist_name,
                               leg_person_last_name,
                               leg_duns_number,
                               leg_orig_sys_party_ref,
                               leg_source_system,
                               leg_request_id,
                               leg_seq_num,
                               leg_process_flag,
                               customer_number,
                               cust_account_id,
                               customer_acc_name_r12,
                               party_id,
                               party_number,
                               program_application_id,
                               program_id,
                               program_update_date,
                               request_id,
                               process_flag,
                               ERROR_TYPE, ic_customer_flag,
                               credit_office, eaton_ledger,
                               hca_attribute_category, hca_attribute1,
                               hca_attribute2, hca_attribute3,
                               hca_attribute4, hca_attribute5,
                               hca_attribute6, hca_attribute7,
                               hca_attribute8, hca_attribute9,
                               hca_attribute10, hca_attribute11,
                               hca_attribute12, hca_attribute13,
                               hca_attribute14, hca_attribute15,
                               creation_date, created_by, last_updated_date,
                               last_updated_by, last_update_login,
                               leg_alternate_name,
                               -- added below for v1.51
                               leg_attribute1,
                               leg_attribute2,
                               leg_attribute3,
                               leg_attribute4,
                               leg_attribute5,
                               leg_attribute6,
                               leg_attribute7,
                               leg_attribute8,
                               leg_attribute9,
                               leg_attribute10,
                               leg_attribute11,
                               leg_attribute12,
                               leg_attribute13,
                               leg_attribute14,
                               leg_attribute15,
                               leg_attribute16,
                               leg_attribute17,
                               leg_attribute18,
                               leg_attribute19,
                               leg_attribute20,
                               -- added above for v1.51
                               leg_default_country   -- Defect#5880, added for v1.74
                              )
                       VALUES (l_xxar_customer_tbl (indx).interface_txn_id,
                               l_xxar_customer_tbl (indx).batch_id,
                               l_xxar_customer_tbl (indx).run_sequence_id,
                               l_xxar_customer_tbl (indx).leg_customer_number,
                               l_xxar_customer_tbl (indx).leg_customer_name,
                               l_xxar_customer_tbl (indx).leg_customer_type,
                               NULL,
                               --l_xxar_customer_tbl (indx).leg_customer_status,
                               l_xxar_customer_tbl (indx).leg_orig_sys_cust_ref,
                               l_xxar_customer_tbl (indx).leg_customer_class_code,
                               NULL,
                                    --l_xxar_customer_tbl (indx).leg_cust_tax_code,
                               NULL,
                               --l_xxar_customer_tbl (indx).leg_customer_key,
                               NULL,
                               --l_xxar_customer_tbl (indx).leg_tax_exempt_num,
                               l_xxar_customer_tbl (indx).leg_jgzz_fiscal_code,
                               l_xxar_customer_tbl (indx).leg_tax_reference,
                               l_xxar_customer_tbl (indx).leg_cust_ship_via,
                               NULL,
                               --l_xxar_customer_tbl (indx).leg_cust_prospect_code,
                               NULL,
                               --l_xxar_customer_tbl (indx).leg_cust_name_phonetic,
                               l_xxar_customer_tbl (indx).leg_person_flag,
                               l_xxar_customer_tbl (indx).leg_person_fist_name,
                               l_xxar_customer_tbl (indx).leg_person_last_name,
                               l_xxar_customer_tbl (indx).leg_duns_number,
                               l_xxar_customer_tbl (indx).leg_orig_sys_party_ref,
                               l_xxar_customer_tbl (indx).leg_source_system,
                               l_xxar_customer_tbl (indx).leg_request_id,
                               l_xxar_customer_tbl (indx).leg_seq_num,
                               l_xxar_customer_tbl (indx).leg_process_flag,
                               l_xxar_customer_tbl (indx).customer_number,
                               l_xxar_customer_tbl (indx).cust_account_id,
                               l_xxar_customer_tbl (indx).customer_acc_name_r12,
                               l_xxar_customer_tbl (indx).party_id,
                               l_xxar_customer_tbl (indx).party_number,
                               l_xxar_customer_tbl (indx).program_application_id,
                               l_xxar_customer_tbl (indx).program_id,
                               l_xxar_customer_tbl (indx).program_update_date,
                               l_xxar_customer_tbl (indx).request_id,
                               l_xxar_customer_tbl (indx).process_flag,
                               l_xxar_customer_tbl (indx).ERROR_TYPE, NULL,
                               --l_xxar_customer_tbl (indx).ic_customer_flag,
                               NULL,
                                    --l_xxar_customer_tbl (indx).credit_office,
                               NULL,
                               --l_xxar_customer_tbl (indx).eaton_ledger,
                               NULL,
                                    --l_xxar_customer_tbl (indx).hca_attribute_category,
                               --NULL,                                                  -- Off for version 1.32
                               l_xxar_customer_tbl (indx).hca_attribute1,               -- ON for version 1.32
                              -- NULL,                                                  -- Off for version 1.32
                               l_xxar_customer_tbl (indx).hca_attribute2,               -- ON for version 1.32
                               --NULL,                                                  -- Commented for v1.73
                               l_xxar_customer_tbl (indx).hca_attribute3,               -- ON for v1.73
                               NULL,
                                    --l_xxar_customer_tbl (indx).hca_attribute4,
                               --NULL,                                                  -- Off for version 1.32
                               l_xxar_customer_tbl (indx).hca_attribute5,               -- ON for version 1.32
                               NULL,
                                    --l_xxar_customer_tbl (indx).hca_attribute6,
                               --NULL,                                                  -- Off for version 1.32
                               l_xxar_customer_tbl (indx).hca_attribute7,               -- ON for version 1.32
                               --NULL,                                                  -- Off for version 1.32
                               l_xxar_customer_tbl (indx).hca_attribute8,               -- ON for version 1.32
                               NULL,
                               --l_xxar_customer_tbl (indx).hca_attribute9,
                               --NULL,                                                  -- Off for version 1.32
                               l_xxar_customer_tbl (indx).hca_attribute10,              -- ON for version 1.32
                               NULL,
                               --l_xxar_customer_tbl (indx).hca_attribute11,
                               NULL,
                                    --l_xxar_customer_tbl (indx).hca_attribute12,
                               NULL,
                               --l_xxar_customer_tbl (indx).hca_attribute13,
                               NULL,
                                    --l_xxar_customer_tbl (indx).hca_attribute14,
                               --NULL,                                                  -- Off for version 1.32
                               l_xxar_customer_tbl (indx).hca_attribute15,              -- ON for version 1.32
                               SYSDATE, g_last_updated_by, SYSDATE,
                               g_last_updated_by, g_last_update_login,
                               l_xxar_customer_tbl (indx).leg_alternate_name,
                               -- added below for v1.51
                               l_xxar_customer_tbl (indx).leg_attribute1,
                               l_xxar_customer_tbl (indx).leg_attribute2,
                               l_xxar_customer_tbl (indx).leg_attribute3,
                               l_xxar_customer_tbl (indx).leg_attribute4,
                               l_xxar_customer_tbl (indx).leg_attribute5,
                               l_xxar_customer_tbl (indx).leg_attribute6,
                               l_xxar_customer_tbl (indx).leg_attribute7,
                               l_xxar_customer_tbl (indx).leg_attribute8,
                               l_xxar_customer_tbl (indx).leg_attribute9,
                               l_xxar_customer_tbl (indx).leg_attribute10,
                               l_xxar_customer_tbl (indx).leg_attribute11,
                               l_xxar_customer_tbl (indx).leg_attribute12,
                               l_xxar_customer_tbl (indx).leg_attribute13,
                               l_xxar_customer_tbl (indx).leg_attribute14,
                               l_xxar_customer_tbl (indx).leg_attribute15,
                               l_xxar_customer_tbl (indx).leg_attribute16,
                               l_xxar_customer_tbl (indx).leg_attribute17,
                               l_xxar_customer_tbl (indx).leg_attribute18,
                               l_xxar_customer_tbl (indx).leg_attribute19,
                               l_xxar_customer_tbl (indx).leg_attribute20,
                               -- added above for v1.51
                               l_xxar_customer_tbl (indx).leg_default_country    -- 5880, V1.74
                              );
            EXCEPTION
               WHEN OTHERS
               THEN
                  FOR l_indx_exp IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                  LOOP
                     l_err_record :=
                        l_xxar_customer_tbl
                              (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id;
                     g_retcode := '1';
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Record sequence : '
                         || l_xxar_customer_tbl
                               (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id
                        );
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Error Message : '
                         || SQLERRM
                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE)
                        );

                     -- Updating Leg_process_flag to 'E' for failed records
                     UPDATE xxar_cust_ext_r12 xsber
                        SET leg_process_flag = g_error,
                            last_updated_by = g_last_updated_by,
                            last_update_login = g_last_updated_by,
                            last_updated_date = SYSDATE
                      WHERE xsber.interface_txn_id = l_err_record
                        AND xsber.leg_process_flag = g_validated;

                     g_failed_count := g_failed_count + SQL%ROWCOUNT;
--                     l_error_message :=
--                           l_error_message
--                        || ' ~~ '
--                        || SQLERRM
--                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE);
                  END LOOP;
            END;

            -- Update Successful records in Extraction Table
            UPDATE xxar_cust_ext_r12 stg2
               SET leg_process_flag = g_processed,
                   last_updated_by = g_last_updated_by,
                   last_update_login = g_last_updated_by,
                   last_updated_date = SYSDATE
             WHERE leg_process_flag = g_validated
               AND EXISTS (
                           SELECT 1
                             FROM xxar_customer_stg stg1
                            WHERE stg1.interface_txn_id =
                                                         stg2.interface_txn_id);

            COMMIT;
         END LOOP;

         CLOSE load_xxar_customer_cur;                         -- Close Cursor
      --   COMMIT;
      END IF;

      -- Site
      IF g_entity = g_customer_site
      THEN
         -- Open Cursor for all account records
         OPEN load_xxar_customer_site_cur;

         LOOP
            l_xxar_customer_site_tbl.DELETE;

            FETCH load_xxar_customer_site_cur
            BULK COLLECT INTO l_xxar_customer_site_tbl LIMIT 500;

            --limit size of Bulk Collect

            -- Get Total Count
            g_total_count := g_total_count + l_xxar_customer_site_tbl.COUNT;
            EXIT WHEN l_xxar_customer_site_tbl.COUNT = 0;

            BEGIN
               -- Bulk Insert into Conversion table
               FORALL indx IN 1 .. l_xxar_customer_site_tbl.COUNT SAVE EXCEPTIONS
                  INSERT INTO xxar_customer_site_stg
                              (interface_txn_id,
                               batch_id,
                               run_sequence_id,
                               leg_customer_number,
                               leg_customer_name,
                               leg_customer_type,
                               leg_orig_sys_cust_ref,
                               leg_customer_class_code,
                               leg_customer_category_code,
                               leg_jgzz_fiscal_code,
                               leg_tax_reference,
                               leg_cust_ship_via,
                               leg_person_flag,
                               leg_person_first_name,
                               leg_person_last_name,
                               leg_duns_number,
                               leg_orig_sys_party_ref,
                               leg_source_system,
                               leg_request_id,
                               leg_seq_num,
                               leg_process_flag,
                               leg_site_use_id,
                               leg_site_use_code,
                               leg_party_site_number,
                               leg_orig_sys_add_ref,
                               leg_orig_sys_cust_site_ref,
                               leg_orig_sys_party_site_ref,
                               leg_primary_site_use_flag,
                               leg_trans_cust_name,
                               leg_territory,
                               operating_unit,
                               territory_id,
                               leg_pay_method,
                               pay_method_id,
                               leg_gl_id_rec,
                               gl_id_rec_account,
                               gl_id_rec,
                               leg_gl_id_rev,
                               gl_id_rev_account,
                               gl_id_rev,
                               leg_gl_id_tax,
                               gl_id_tax_account,
                               gl_id_tax,
                               leg_gl_id_freight,
                               gl_id_freight_account,
                               gl_id_freight,
                               leg_gl_id_clearing,
                               gl_id_clearing_account,
                               gl_id_clearing,
                               leg_gl_id_unbilled,
                               gl_id_unbilled_account,
                               gl_id_unbilled,
                               leg_gl_id_unearned,
                               gl_id_unearned_account,
                               gl_id_unearned,
                               leg_location,
                               leg_address1,
                               leg_address2,
                               leg_address3,
                               leg_address4,
                               leg_city,
                               leg_state,
                               leg_province,
                               leg_county,
                               leg_postal_code,
                               leg_country,
                               leg_language,
                               leg_demand_class_code,
                               leg_site_use_tax_code,
                               leg_site_use_tax_ref,
                               leg_site_ship_via,
                               leg_bill_to_orig_ref,
                               leg_url,
                               leg_operating_unit,
                               org_id,
                               leg_cust_profile_class_name,
                               leg_collector_name,
                               collector_id,
                               leg_credit_bal_stmt,
                               leg_credit_checking,
                               leg_credit_hold,
                               leg_discount_term,
                               leg_dunning_letters,
                               leg_interest_charges,
                               leg_statements,
                               leg_tolerance,
                               leg_tax_printing_option,
                               leg_account_status,
                               leg_auto_hier_name,
                               leg_credit_rating,
                               leg_discount_grace_days,
                               leg_dunning_letter_set_name,
                               leg_interest_period_days,
                               leg_override_term,
                               leg_payment_grace_days,
                               leg_percent_collectible,
                               leg_risk_code,
                               leg_term_name,
                               term_name,
                               term_id,
                               leg_stmt_cycle_name,
                               leg_charge_on_fin_flag,
                               leg_grouping_name,
                               leg_currency_code,
                               currency_code,
                               leg_auto_rec_min_rcpt_amt,
                               leg_interest_rate,
                               leg_max_int_charge,
                               leg_min_dun_amt,
                               leg_min_dun_inv_amt,
                               leg_min_fc_bal_amt,
                               leg_min_fc_inv_amt,
                               leg_min_stmt_amt,
                               leg_overall_credit_limit,
                               leg_tax_credit_limit,
                               leg_auto_rec_incl_dis_flag,
                               leg_clearing_days,
                               leg_cons_inv_flag,
                               leg_cons_inv_type,
                               leg_lockbox_matching_option,
                               leg_credit_classification,
                               leg_dis_tran_flag,
                               customer_number,
                               cust_account_id,
                               customer_acc_name_r12,
                               party_number,
                               party_id,
                               party_site_number,
                               party_site_name,
                               site_use_number,
                               site_use_code,
                               location_id,
                               party_site_id,
                               bill_to_site_use_id,
                               cust_acct_site_id,
                               cust_acct_site_use_id,
                               hl_attribute_category,
                               hl_attribute1,
                               hl_attribute2,
                               hl_attribute3,
                               hl_attribute4,
                               hl_attribute5,
                               hl_attribute6,
                               hl_attribute7,
                               hl_attribute8,
                               hl_attribute9,
                               hl_attribute10,
                               hl_attribute11,
                               hl_attribute12,
                               hl_attribute13,
                               hl_attribute14,
                               hl_attribute15,
                               hcsu_attribute_category,
                               hcsu_attribute1,
                               hcsu_attribute2,
                               hcsu_attribute3,
                               hcsu_attribute4,
                               hcsu_attribute5,
                               hcsu_attribute6,
                               hcsu_attribute7,
                               hcsu_attribute8,
                               hcsu_attribute9,
                               hcsu_attribute10,
                               hcsu_attribute11,
                               hcsu_attribute12,
                               hcsu_attribute13,
                               hcsu_attribute14,
                               hcsu_attribute15,
                               hcsu_attribute16,
                               hcsu_attribute17,
                               hcsu_attribute18,
                               hcsu_attribute19,
                               hcsu_attribute20,
                               hcsu_attribute21,
                               hcsu_attribute22,
                               hcsu_attribute23,
                               hcsu_attribute24,
                               hcsu_attribute25,
                               hcsu_global_attr_cat,
                               hcsu_global_attribute1,
                               hcsu_global_attribute2,
                               hcsu_global_attribute3,
                               hcsu_global_attribute4,
                               hcsu_global_attribute5,
                               hcsu_global_attribute6,
                               hcsu_global_attribute7,
                               hcsu_global_attribute8,
                               hcsu_global_attribute9,
                               hcsu_global_attribute10,
                               hcsu_global_attribute11,
                               hcsu_global_attribute12,
                               hcsu_global_attribute13,
                               hcsu_global_attribute14,
                               hcsu_global_attribute15,
                               hcsu_global_attribute16,
                               hcsu_global_attribute17,
                               hcsu_global_attribute18,
                               hcsu_global_attribute19,
                               hcsu_global_attribute20,
                               hcsu_gdf_attribute_category,
                               hcsu_gdf_attribute1,
                               hcsu_gdf_attribute2,
                               hcsu_gdf_attribute3,
                               hcsu_gdf_attribute4,
                               hcsu_gdf_attribute5,
                               hcsu_gdf_attribute6,
                               hcsu_gdf_attribute7,
                               hcsu_gdf_attribute8,
                               hcsu_gdf_attribute9,
                               hcsu_gdf_attribute10,
                               hcsu_gdf_attribute11,
                               hcsu_gdf_attribute12,
                               hcsu_gdf_attribute13,
                               hcsu_gdf_attribute14,
                               hcsu_gdf_attribute15,
                               hcsu_gdf_attribute16,
                               hcsu_gdf_attribute17,
                               hcsu_gdf_attribute18,
                               hcsu_gdf_attribute19,
                               hcsu_gdf_attribute20,
                               program_application_id,
                               program_id,
                               program_update_date,
                               request_id,
                               process_flag,
                               ERROR_TYPE,
                               hcp_attribute_category,
                               hcp_attribute1,
                               hcp_attribute2,
                               hcp_attribute3,
                               hcp_attribute4,
                               hcp_attribute5,
                               hcp_attribute6,
                               hcp_attribute7,
                               hcp_attribute8,
                               hcp_attribute9,
                               hcp_attribute10,
                               hcp_attribute11,
                               hcp_attribute12,
                               hcp_attribute13,
                               hcp_attribute14,
                               hcp_attribute15,
                               hcp_global_attribute1,
                               hcp_global_attribute2,
                               hcp_global_attribute3,
                               hcp_global_attribute4,
                               hcp_global_attribute5,
                               hcp_global_attribute6,
                               hcp_global_attribute7,
                               hcp_global_attribute8,
                               hcp_global_attribute9,
                               hcp_global_attribute10,
                               hcp_global_attribute11,
                               hcp_global_attribute12,
                               hcp_global_attribute13,
                               hcp_global_attribute14,
                               hcp_global_attribute15,
                               hcp_global_attribute16,
                               hcp_global_attribute17,
                               hcp_global_attribute18,
                               hcp_global_attribute19,
                               hcp_global_attribute20,
                               hcp_gdf_attribute_category,
                               hcp_gdf_attribute1,
                               hcp_gdf_attribute2,
                               hcp_gdf_attribute3,
                               hcp_gdf_attribute4,
                               hcp_gdf_attribute5,
                               hcp_gdf_attribute6,
                               hcp_gdf_attribute7,
                               hcp_gdf_attribute8,
                               hcp_gdf_attribute9,
                               hcp_gdf_attribute10,
                               hcp_gdf_attribute11,
                               hcp_gdf_attribute12,
                               hcp_gdf_attribute13,
                               hcp_gdf_attribute14,
                               hcp_gdf_attribute15,
                               hcp_gdf_attribute16,
                               hcp_gdf_attribute17,
                               hcp_gdf_attribute18,
                               hcp_gdf_attribute19,
                               hcp_gdf_attribute20,
                               hcpa_attribute_category,
                               hcpa_attribute1,
                               hcpa_attribute2,
                               hcpa_attribute3,
                               hcpa_attribute4,
                               hcpa_attribute5,
                               hcpa_attribute6,
                               hcpa_attribute7,
                               hcpa_attribute8,
                               hcpa_attribute9,
                               hcpa_attribute10,
                               hcpa_attribute11,
                               hcpa_attribute12,
                               hcpa_attribute13,
                               hcpa_attribute14,
                               hcpa_attribute15, creation_date, created_by,
                               last_updated_date, last_updated_by,
                               last_update_login,
                               leg_bill_to_site_use_id,
                               hcs_attribute_category,
                               hcs_attribute1,
                               hcs_attribute2,
                               hcs_attribute3,
                               hcs_attribute4,
                               hcs_attribute5,
                               hcs_attribute6,
                               hcs_attribute7,
                               hcs_attribute8,
                               hcs_attribute9,
                               hcs_attribute10,
                               hcs_attribute11,
                               hcs_attribute12,
                               hcs_attribute13,
                               hcs_attribute14,
                               hcs_attribute15,
                               hcs_attribute16,
                               hcs_attribute17,
                               hcs_attribute18,
                               hcs_attribute19,
                               hcs_attribute20,
                               hcs_global_attr_cat,
                               hcs_global_attribute1,
                               hcs_global_attribute2,
                               hcs_global_attribute3,
                               hcs_global_attribute4,
                               hcs_global_attribute5,
                               hcs_global_attribute6,
                               hcs_global_attribute7,
                               hcs_global_attribute8,
                               hcs_global_attribute9,
                               hcs_global_attribute10,
                               hcs_global_attribute11,
                               hcs_global_attribute12,
                               hcs_global_attribute13,
                               hcs_global_attribute14,
                               hcs_global_attribute15,
                               hcs_global_attribute16,
                               hcs_global_attribute17,
                               hcs_global_attribute18,
                               hcs_global_attribute19,
                               hcs_global_attribute20,
                               leg_cust_acct_site_id        --5880, V1.74
                              )
                       VALUES (l_xxar_customer_site_tbl (indx).interface_txn_id,
                               l_xxar_customer_site_tbl (indx).batch_id,
                               l_xxar_customer_site_tbl (indx).run_sequence_id,
                               l_xxar_customer_site_tbl (indx).leg_customer_number,
                               l_xxar_customer_site_tbl (indx).leg_customer_name,
                               l_xxar_customer_site_tbl (indx).leg_customer_type,
                               l_xxar_customer_site_tbl (indx).leg_orig_sys_cust_ref,
                               l_xxar_customer_site_tbl (indx).leg_customer_class_code,
                               l_xxar_customer_site_tbl (indx).leg_customer_category_code,
                               l_xxar_customer_site_tbl (indx).leg_jgzz_fiscal_code,
                               l_xxar_customer_site_tbl (indx).leg_tax_reference,
                               l_xxar_customer_site_tbl (indx).leg_cust_ship_via,
                               l_xxar_customer_site_tbl (indx).leg_person_flag,
                               l_xxar_customer_site_tbl (indx).leg_person_fist_name,
                               l_xxar_customer_site_tbl (indx).leg_person_last_name,
                               l_xxar_customer_site_tbl (indx).leg_duns_number,
                               l_xxar_customer_site_tbl (indx).leg_orig_sys_party_ref,
                               l_xxar_customer_site_tbl (indx).leg_source_system,
                               l_xxar_customer_site_tbl (indx).leg_request_id,
                               l_xxar_customer_site_tbl (indx).leg_seq_num,
                               l_xxar_customer_site_tbl (indx).leg_process_flag,
                               l_xxar_customer_site_tbl (indx).leg_site_use_id,
                               l_xxar_customer_site_tbl (indx).leg_site_use_code,
                               l_xxar_customer_site_tbl (indx).leg_party_site_number,
                               l_xxar_customer_site_tbl (indx).leg_orig_sys_add_ref,
                               l_xxar_customer_site_tbl (indx).leg_orig_sys_cust_site_ref,
                               l_xxar_customer_site_tbl (indx).leg_orig_sys_party_site_ref,
                               l_xxar_customer_site_tbl (indx).leg_primary_site_use_flag,
                               l_xxar_customer_site_tbl (indx).leg_trans_cust_name,
                               l_xxar_customer_site_tbl (indx).leg_territory,
                               NULL,
                               --l_xxar_customer_site_tbl (indx).operating_unit,
                               l_xxar_customer_site_tbl (indx).territory_id,
                               l_xxar_customer_site_tbl (indx).leg_pay_method,
                               l_xxar_customer_site_tbl (indx).pay_method_id,
                               l_xxar_customer_site_tbl (indx).leg_gl_id_rec,
                               l_xxar_customer_site_tbl (indx).gl_id_rec_account,
                               l_xxar_customer_site_tbl (indx).gl_id_rec,
                               l_xxar_customer_site_tbl (indx).leg_gl_id_rev,
                               l_xxar_customer_site_tbl (indx).gl_id_rev_account,
                               l_xxar_customer_site_tbl (indx).gl_id_rev,
                               l_xxar_customer_site_tbl (indx).leg_gl_id_tax,
                               l_xxar_customer_site_tbl (indx).gl_id_tax_account,
                               l_xxar_customer_site_tbl (indx).gl_id_tax,
                               l_xxar_customer_site_tbl (indx).leg_gl_id_freight,
                               l_xxar_customer_site_tbl (indx).gl_id_freight_account,
                               l_xxar_customer_site_tbl (indx).gl_id_freight,
                               l_xxar_customer_site_tbl (indx).leg_gl_id_clearing,
                               l_xxar_customer_site_tbl (indx).gl_id_clearing_account,
                               l_xxar_customer_site_tbl (indx).gl_id_clearing,
                               l_xxar_customer_site_tbl (indx).leg_gl_id_unbilled,
                               l_xxar_customer_site_tbl (indx).gl_id_unbilled_account,
                               l_xxar_customer_site_tbl (indx).gl_id_unbilled,
                               l_xxar_customer_site_tbl (indx).leg_gl_id_unearned,
                               l_xxar_customer_site_tbl (indx).gl_id_unearned_account,
                               l_xxar_customer_site_tbl (indx).gl_id_unearned,
                               l_xxar_customer_site_tbl (indx).leg_location,
                               l_xxar_customer_site_tbl (indx).leg_address1,
                               l_xxar_customer_site_tbl (indx).leg_address2,
                               l_xxar_customer_site_tbl (indx).leg_address3,
                               l_xxar_customer_site_tbl (indx).leg_address4,
                               l_xxar_customer_site_tbl (indx).leg_city,
                               l_xxar_customer_site_tbl (indx).leg_state,
                               l_xxar_customer_site_tbl (indx).leg_province,
                               l_xxar_customer_site_tbl (indx).leg_county,
                               l_xxar_customer_site_tbl (indx).leg_postal_code,
                               DECODE(l_xxar_customer_site_tbl (indx).leg_country,
                                      'FX','FR',
                                      'LX','LT',
                                      'TP','TL',
                                      'YU','RS',
                                      'ZR','CD',
                                      l_xxar_customer_site_tbl (indx).leg_country), --modified for Defect#1669 - obsolete country codes, v1.23
                               l_xxar_customer_site_tbl (indx).leg_language,
                               l_xxar_customer_site_tbl (indx).leg_demand_class_code,
                               l_xxar_customer_site_tbl (indx).leg_site_use_tax_code,
                               l_xxar_customer_site_tbl (indx).leg_site_use_tax_ref,
                               l_xxar_customer_site_tbl (indx).leg_site_ship_via,
                               l_xxar_customer_site_tbl (indx).leg_bill_to_orig_ref,
                               l_xxar_customer_site_tbl (indx).leg_url,
                               l_xxar_customer_site_tbl (indx).leg_operating_unit,
                               NULL, --l_xxar_customer_site_tbl (indx).org_id,
                               l_xxar_customer_site_tbl (indx).leg_cust_profile_class_name,
                               l_xxar_customer_site_tbl (indx).leg_collector_name,
                               l_xxar_customer_site_tbl (indx).collector_id,
                               l_xxar_customer_site_tbl (indx).leg_credit_bal_stmt,
                               l_xxar_customer_site_tbl (indx).leg_credit_checking,
                               l_xxar_customer_site_tbl (indx).leg_credit_hold,
                               l_xxar_customer_site_tbl (indx).leg_discount_term,
                               l_xxar_customer_site_tbl (indx).leg_dunning_letters,
                               l_xxar_customer_site_tbl (indx).leg_interest_charges,
                               l_xxar_customer_site_tbl (indx).leg_statements,
                               l_xxar_customer_site_tbl (indx).leg_tolerance,
                               l_xxar_customer_site_tbl (indx).leg_tax_printing_option,
                               l_xxar_customer_site_tbl (indx).leg_account_status,
                               l_xxar_customer_site_tbl (indx).leg_auto_hier_name,
                               l_xxar_customer_site_tbl (indx).leg_credit_rating,
                               l_xxar_customer_site_tbl (indx).leg_discount_grace_days,
                               l_xxar_customer_site_tbl (indx).leg_dunning_letter_set_name,
                               l_xxar_customer_site_tbl (indx).leg_interest_period_days,
                               l_xxar_customer_site_tbl (indx).leg_override_term,
                               l_xxar_customer_site_tbl (indx).leg_payment_grace_days,
                               l_xxar_customer_site_tbl (indx).leg_percent_collectible,
                               l_xxar_customer_site_tbl (indx).leg_risk_code,
                               l_xxar_customer_site_tbl (indx).leg_term_name,
                               l_xxar_customer_site_tbl (indx).term_name,
                               l_xxar_customer_site_tbl (indx).term_id,
                               l_xxar_customer_site_tbl (indx).leg_stmt_cycle_name,
                               l_xxar_customer_site_tbl (indx).leg_charge_on_fin_flag,
                               l_xxar_customer_site_tbl (indx).leg_grouping_name,
                               l_xxar_customer_site_tbl (indx).leg_currency_code,
                               l_xxar_customer_site_tbl (indx).currency_code,
                               l_xxar_customer_site_tbl (indx).leg_auto_rec_min_rcpt_amt,
                               l_xxar_customer_site_tbl (indx).leg_interest_rate,
                               l_xxar_customer_site_tbl (indx).leg_max_int_charge,
                               l_xxar_customer_site_tbl (indx).leg_min_dun_amt,
                               l_xxar_customer_site_tbl (indx).leg_min_dun_inv_amt,
                               l_xxar_customer_site_tbl (indx).leg_min_fc_bal_amt,
                               l_xxar_customer_site_tbl (indx).leg_min_fc_inv_amt,
                               l_xxar_customer_site_tbl (indx).leg_min_stmt_amt,
                               l_xxar_customer_site_tbl (indx).leg_overall_credit_limit,
                               l_xxar_customer_site_tbl (indx).leg_tax_credit_limit,
                               l_xxar_customer_site_tbl (indx).leg_auto_rec_incl_dis_flag,
                               l_xxar_customer_site_tbl (indx).leg_clearing_days,
                               l_xxar_customer_site_tbl (indx).leg_cons_inv_flag,
                               l_xxar_customer_site_tbl (indx).leg_cons_inv_type,
                               l_xxar_customer_site_tbl (indx).leg_lockbox_matching_option,
                               l_xxar_customer_site_tbl (indx).leg_credit_classification,
                               l_xxar_customer_site_tbl (indx).leg_dis_tran_flag,
                               l_xxar_customer_site_tbl (indx).customer_number,
                               l_xxar_customer_site_tbl (indx).cust_account_id,
                               l_xxar_customer_site_tbl (indx).customer_acc_name_r12,
                               l_xxar_customer_site_tbl (indx).party_number,
                               l_xxar_customer_site_tbl (indx).party_id,
                               l_xxar_customer_site_tbl (indx).party_site_number,
                               l_xxar_customer_site_tbl (indx).party_site_name,
                               l_xxar_customer_site_tbl (indx).site_use_number,
                               l_xxar_customer_site_tbl (indx).site_use_code,
                               l_xxar_customer_site_tbl (indx).location_id,
                               l_xxar_customer_site_tbl (indx).party_site_id,
                               l_xxar_customer_site_tbl (indx).bill_to_site_use_id,
                               l_xxar_customer_site_tbl (indx).cust_acct_site_id,
                               l_xxar_customer_site_tbl (indx).cust_acct_site_use_id,
                               l_xxar_customer_site_tbl (indx).hl_attribute_category,
                               l_xxar_customer_site_tbl (indx).hl_attribute1,
                               l_xxar_customer_site_tbl (indx).hl_attribute2,
                               l_xxar_customer_site_tbl (indx).hl_attribute3,
                               l_xxar_customer_site_tbl (indx).hl_attribute4,
                               l_xxar_customer_site_tbl (indx).hl_attribute5,
                               l_xxar_customer_site_tbl (indx).hl_attribute6,
                               l_xxar_customer_site_tbl (indx).hl_attribute7,
                               l_xxar_customer_site_tbl (indx).hl_attribute8,
                               l_xxar_customer_site_tbl (indx).hl_attribute9,
                               l_xxar_customer_site_tbl (indx).hl_attribute10,
                               l_xxar_customer_site_tbl (indx).hl_attribute11,
                               l_xxar_customer_site_tbl (indx).hl_attribute12,
                               l_xxar_customer_site_tbl (indx).hl_attribute13,
                               l_xxar_customer_site_tbl (indx).hl_attribute14,
                               l_xxar_customer_site_tbl (indx).hl_attribute15,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute_category,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute1,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute2,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute3,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute4,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute5,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute6,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute7,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute8,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute9,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute10,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute11,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute12,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute13,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute14,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute15,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute16,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute17,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute18,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute19,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute20,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute21,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute22,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute23,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute24,
                               l_xxar_customer_site_tbl (indx).hcsu_attribute25,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attr_cat,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute1,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute2,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute3,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute4,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute5,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute6,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute7,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute8,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute9,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute10,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute11,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute12,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute13,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute14,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute15,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute16,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute17,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute18,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute19,
                               l_xxar_customer_site_tbl (indx).hcsu_global_attribute20,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute_category,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute1,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute2,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute3,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute4,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute5,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute6,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute7,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute8,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute9,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute10,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute11,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute12,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute13,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute14,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute15,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute16,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute17,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute18,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute19,
                               l_xxar_customer_site_tbl (indx).hcsu_gdf_attribute20,
                               l_xxar_customer_site_tbl (indx).program_application_id,
                               l_xxar_customer_site_tbl (indx).program_id,
                               l_xxar_customer_site_tbl (indx).program_update_date,
                               l_xxar_customer_site_tbl (indx).request_id,
                               l_xxar_customer_site_tbl (indx).process_flag,
                               l_xxar_customer_site_tbl (indx).ERROR_TYPE,
                               l_xxar_customer_site_tbl (indx).hcp_attribute_category,
                               l_xxar_customer_site_tbl (indx).hcp_attribute1,
                               l_xxar_customer_site_tbl (indx).hcp_attribute2,
                               l_xxar_customer_site_tbl (indx).hcp_attribute3,
                               l_xxar_customer_site_tbl (indx).hcp_attribute4,
                               l_xxar_customer_site_tbl (indx).hcp_attribute5,
                               l_xxar_customer_site_tbl (indx).hcp_attribute6,
                               l_xxar_customer_site_tbl (indx).hcp_attribute7,
                               l_xxar_customer_site_tbl (indx).hcp_attribute8,
                               l_xxar_customer_site_tbl (indx).hcp_attribute9,
                               l_xxar_customer_site_tbl (indx).hcp_attribute10,
                               l_xxar_customer_site_tbl (indx).hcp_attribute11,
                               l_xxar_customer_site_tbl (indx).hcp_attribute12,
                               l_xxar_customer_site_tbl (indx).hcp_attribute13,
                               l_xxar_customer_site_tbl (indx).hcp_attribute14,
                               l_xxar_customer_site_tbl (indx).hcp_attribute15,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute1,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute2,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute3,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute4,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute5,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute6,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute7,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute8,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute9,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute10,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute11,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute12,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute13,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute14,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute15,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute16,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute17,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute18,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute19,
                               l_xxar_customer_site_tbl (indx).hcp_global_attribute20,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute_category,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute1,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute2,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute3,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute4,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute5,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute6,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute7,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute8,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute9,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute10,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute11,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute12,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute13,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute14,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute15,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute16,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute17,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute18,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute19,
                               l_xxar_customer_site_tbl (indx).hcp_gdf_attribute20,
                               l_xxar_customer_site_tbl (indx).hcpa_attribute_category,
                               l_xxar_customer_site_tbl (indx).hcpa_attribute1,
                               l_xxar_customer_site_tbl (indx).hcpa_attribute2,
                               l_xxar_customer_site_tbl (indx).hcpa_attribute3,
                               l_xxar_customer_site_tbl (indx).hcpa_attribute4,
                               l_xxar_customer_site_tbl (indx).hcpa_attribute5,
                               l_xxar_customer_site_tbl (indx).hcpa_attribute6,
                               l_xxar_customer_site_tbl (indx).hcpa_attribute7,
                               l_xxar_customer_site_tbl (indx).hcpa_attribute8,
                               l_xxar_customer_site_tbl (indx).hcpa_attribute9,
                               l_xxar_customer_site_tbl (indx).hcpa_attribute10,
                               l_xxar_customer_site_tbl (indx).hcpa_attribute11,
                               l_xxar_customer_site_tbl (indx).hcpa_attribute12,
                               l_xxar_customer_site_tbl (indx).hcpa_attribute13,
                               l_xxar_customer_site_tbl (indx).hcpa_attribute14,
                               NULL,
                                    --l_xxar_customer_site_tbl (indx).hcpa_attribute15,
                                    SYSDATE, g_last_updated_by,
                               SYSDATE, g_last_updated_by,
                               g_last_update_login,
                               l_xxar_customer_site_tbl (indx).leg_bill_to_site_use_id,
                               l_xxar_customer_site_tbl (indx).hcs_attribute_category,
                               l_xxar_customer_site_tbl (indx).hcs_attribute1,
                               l_xxar_customer_site_tbl (indx).hcs_attribute2,
                               l_xxar_customer_site_tbl (indx).hcs_attribute3,
                               l_xxar_customer_site_tbl (indx).hcs_attribute4,
                               l_xxar_customer_site_tbl (indx).hcs_attribute5,
                               l_xxar_customer_site_tbl (indx).hcs_attribute6,
                               l_xxar_customer_site_tbl (indx).hcs_attribute7,
                               l_xxar_customer_site_tbl (indx).hcs_attribute8,
                               l_xxar_customer_site_tbl (indx).hcs_attribute9,
                               l_xxar_customer_site_tbl (indx).hcs_attribute10,
                               l_xxar_customer_site_tbl (indx).hcs_attribute11,
                               l_xxar_customer_site_tbl (indx).hcs_attribute12,
                               l_xxar_customer_site_tbl (indx).hcs_attribute13,
                               l_xxar_customer_site_tbl (indx).hcs_attribute14,
                               l_xxar_customer_site_tbl (indx).hcs_attribute15,
                               l_xxar_customer_site_tbl (indx).hcs_attribute16,
                               l_xxar_customer_site_tbl (indx).hcs_attribute17,
                               l_xxar_customer_site_tbl (indx).hcs_attribute18,
                               l_xxar_customer_site_tbl (indx).hcs_attribute19,
                               l_xxar_customer_site_tbl (indx).hcs_attribute20,
                               l_xxar_customer_site_tbl (indx).hcs_global_attr_cat,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute1,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute2,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute3,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute4,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute5,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute6,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute7,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute8,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute9,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute10,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute11,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute12,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute13,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute14,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute15,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute16,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute17,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute18,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute19,
                               l_xxar_customer_site_tbl (indx).hcs_global_attribute20,
                               l_xxar_customer_site_tbl (indx).leg_cust_acct_site_id          -- Defect# 5880, V1.74
                              );
            EXCEPTION
               WHEN OTHERS
               THEN
                  FOR l_indx_exp IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                  LOOP
                     l_err_record :=
                        l_xxar_customer_site_tbl
                              (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id;
                     g_retcode := '1';
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Record sequence : '
                         || l_xxar_customer_site_tbl
                               (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id
                        );
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Error Message : '
                         || SQLERRM
                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE)
                        );

                     -- Updating Leg_process_flag to 'E' for failed records
                     UPDATE xxar_cust_site_ext_r12 xsber
                        SET leg_process_flag = g_error,
                            last_updated_by = g_last_updated_by,
                            last_update_login = g_last_updated_by,
                            last_updated_date = SYSDATE
                      WHERE xsber.interface_txn_id = l_err_record
                        AND xsber.leg_process_flag = g_validated;

                     COMMIT;
                     g_failed_count := g_failed_count + SQL%ROWCOUNT;
--                     l_error_message :=
--                           l_error_message
--                        || ' ~~ '
--                        || SQLERRM
--                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE);
                  END LOOP;
            END;

            -- Update Successful records in Extraction Table
            UPDATE xxar_cust_site_ext_r12 stg2
               SET leg_process_flag = g_processed,
                   last_updated_by = g_last_updated_by,
                   last_update_login = g_last_updated_by,
                   last_updated_date = SYSDATE
             WHERE leg_process_flag = g_validated
               AND EXISTS (
                           SELECT 1
                             FROM xxar_customer_site_stg stg1
                            WHERE stg1.interface_txn_id =
                                                         stg2.interface_txn_id);

            COMMIT;
         END LOOP;

         CLOSE load_xxar_customer_site_cur;                    -- Close Cursor

         -- COMMIT;

         ------
         OPEN load_xxar_cust_prof_amnt_cur;

         LOOP
            l_xxar_customer_prof_amnt_tbl.DELETE;

            FETCH load_xxar_cust_prof_amnt_cur
            BULK COLLECT INTO l_xxar_customer_prof_amnt_tbl LIMIT 500;

            --limit size of Bulk Collect

            -- Get Total Count
            g_total_count :=
                          g_total_count + l_xxar_customer_prof_amnt_tbl.COUNT;
            EXIT WHEN l_xxar_customer_prof_amnt_tbl.COUNT = 0;

            BEGIN
               -- Bulk Insert into Conversion table
               FORALL indx IN 1 .. l_xxar_customer_prof_amnt_tbl.COUNT SAVE EXCEPTIONS
                  INSERT INTO xxar_customer_prof_amnt_stg
                              (interface_txn_id,
                               batch_id,
                               run_sequence_id,
                               leg_customer_number,
                               leg_customer_name,
                               leg_orig_sys_cust_ref,
                               leg_source_system,
                               leg_request_id,
                               leg_seq_num,
                               leg_process_flag,
                               leg_site_use_code,
                               leg_party_site_number,
                               org_id,
                               leg_cust_profile_class_name,
                               leg_collector_name,
                               collector_id,
                               leg_credit_bal_stmt,
                               leg_credit_checking,
                               leg_credit_hold,
                               leg_discount_term,
                               leg_dunning_letters,
                               leg_interest_charges,
                               leg_statements,
                               leg_tolerance,
                               leg_tax_printing_option,
                               leg_account_status,
                               leg_auto_hier_name,
                               leg_credit_rating,
                               leg_discount_grace_days,
                               leg_dunning_letter_set_name,
                               leg_interest_period_days,
                               leg_override_term,
                               leg_payment_grace_days,
                               leg_percent_collectible,
                               leg_risk_code,
                               leg_term_name,
                               term_name,
                               term_id,
                               leg_stmt_cycle_name,
                               leg_charge_on_fin_flag,
                               leg_grouping_name,
                               leg_currency_code,
                               currency_code,
                               leg_auto_rec_min_rcpt_amt,
                               leg_interest_rate,
                               leg_max_int_charge,
                               leg_min_dun_amt,
                               leg_min_dun_inv_amt,
                               leg_min_fc_bal_amt,
                               leg_min_fc_inv_amt,
                               leg_min_stmt_amt,
                               leg_overall_credit_limit,
                               leg_tax_credit_limit,
                               leg_auto_rec_incl_dis_flag,
                               leg_clearing_days,
                               leg_cons_inv_flag,
                               leg_cons_inv_type,
                               leg_lockbox_matching_option,
                               leg_credit_classification,
                               leg_dis_tran_flag,
                               customer_number,
                               cust_account_id,
                               customer_acc_name_r12,
                               party_number,
                               party_site_number,
                               party_site_name,
                               site_use_number,
                               site_use_code,
                               location_id,
                               party_site_id,
                               bill_to_site_use_id,
                               cust_acct_site_id,
                               cust_acct_site_use_id,
                               program_application_id,
                               program_id,
                               program_update_date,
                               request_id,
                               process_flag,
                               ERROR_TYPE,
                               hcp_attribute_category,
                               hcp_attribute1,
                               hcp_attribute2,
                               hcp_attribute3,
                               hcp_attribute4,
                               hcp_attribute5,
                               hcp_attribute6,
                               hcp_attribute7,
                               hcp_attribute8,
                               hcp_attribute9,
                               hcp_attribute10,
                               hcp_attribute11,
                               hcp_attribute12,
                               hcp_attribute13,
                               hcp_attribute14,
                               hcp_attribute15,
                               hcp_global_attribute1,
                               hcp_global_attribute2,
                               hcp_global_attribute3,
                               hcp_global_attribute4,
                               hcp_global_attribute5,
                               hcp_global_attribute6,
                               hcp_global_attribute7,
                               hcp_global_attribute8,
                               hcp_global_attribute9,
                               hcp_global_attribute10,
                               hcp_global_attribute11,
                               hcp_global_attribute12,
                               hcp_global_attribute13,
                               hcp_global_attribute14,
                               hcp_global_attribute15,
                               hcp_global_attribute16,
                               hcp_global_attribute17,
                               hcp_global_attribute18,
                               hcp_global_attribute19,
                               hcp_global_attribute20,
                               hcp_gdf_attribute_category,
                               hcp_gdf_attribute1,
                               hcp_gdf_attribute2,
                               hcp_gdf_attribute3,
                               hcp_gdf_attribute4,
                               hcp_gdf_attribute5,
                               hcp_gdf_attribute6,
                               hcp_gdf_attribute7,
                               hcp_gdf_attribute8,
                               hcp_gdf_attribute9,
                               hcp_gdf_attribute10,
                               hcp_gdf_attribute11,
                               hcp_gdf_attribute12,
                               hcp_gdf_attribute13,
                               hcp_gdf_attribute14,
                               hcp_gdf_attribute15,
                               hcp_gdf_attribute16,
                               hcp_gdf_attribute17,
                               hcp_gdf_attribute18,
                               hcp_gdf_attribute19,
                               hcp_gdf_attribute20,
                               hcpa_attribute_category,
                               hcpa_attribute1,
                               hcpa_attribute2,
                               hcpa_attribute3,
                               hcpa_attribute4,
                               hcpa_attribute5,
                               hcpa_attribute6,
                               hcpa_attribute7,
                               hcpa_attribute8,
                               hcpa_attribute9,
                               hcpa_attribute10,
                               hcpa_attribute11,
                               hcpa_attribute12,
                               hcpa_attribute13,
                               hcpa_attribute14,
                               hcpa_attribute15,
                               creation_date,
                               created_by,
                               last_updated_date,
                               last_updated_by,
                               last_update_login,
                               leg_cust_account_id,
                               leg_party_id,
                               leg_cust_acct_site_id,
                               leg_party_site_id,
                               leg_request_id_merge,
                               leg_request_id_enrich,
                               party_id,
                               leg_orig_sys_cust_site_ref,
                               leg_orig_sys_party_site_ref,
                               leg_request_id_ddpl,
                               leg_site_use_id,
                               leg_orig_sys_party_ref,
                               leg_old_cust_acct_id,
                               leg_old_cust_orig_sys_ref,
                               leg_operating_unit_name,
                               operating_unit_name,
                               leg_plant,
                               leg_orig_sys_hcsu_ref
                              )
                       VALUES (l_xxar_customer_prof_amnt_tbl (indx).interface_txn_id,
                               l_xxar_customer_prof_amnt_tbl (indx).batch_id,
                               l_xxar_customer_prof_amnt_tbl (indx).run_sequence_id,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_customer_number,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_customer_name,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_orig_sys_cust_ref,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_source_system,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_request_id,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_seq_num,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_process_flag,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_site_use_code,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_party_site_number,
                               NULL,
                               --l_xxar_customer_prof_amnt_tbl (indx).org_id,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_cust_profile_class_name,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_collector_name,
                               l_xxar_customer_prof_amnt_tbl (indx).collector_id,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_credit_bal_stmt,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_credit_checking,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_credit_hold,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_discount_term,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_dunning_letters,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_interest_charges,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_statements,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_tolerance,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_tax_printing_option,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_account_status,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_auto_hier_name,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_credit_rating,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_discount_grace_days,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_dunning_letter_set_name,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_interest_period_days,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_override_term,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_payment_grace_days,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_percent_collectible,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_risk_code,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_term_name,
                               l_xxar_customer_prof_amnt_tbl (indx).term_name,
                               l_xxar_customer_prof_amnt_tbl (indx).term_id,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_stmt_cycle_name,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_charge_on_fin_flag,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_grouping_name,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_currency_code,
                               l_xxar_customer_prof_amnt_tbl (indx).currency_code,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_auto_rec_min_rcpt_amt,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_interest_rate,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_max_int_charge,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_min_dun_amt,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_min_dun_inv_amt,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_min_fc_bal_amt,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_min_fc_inv_amt,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_min_stmt_amt,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_overall_credit_limit,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_tax_credit_limit,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_auto_rec_incl_dis_flag,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_clearing_days,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_cons_inv_flag,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_cons_inv_type,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_lockbox_matching_option,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_credit_classification,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_dis_tran_flag,
                               l_xxar_customer_prof_amnt_tbl (indx).customer_number,
                               l_xxar_customer_prof_amnt_tbl (indx).cust_account_id,
                               l_xxar_customer_prof_amnt_tbl (indx).customer_acc_name_r12,
                               l_xxar_customer_prof_amnt_tbl (indx).party_number,
                               l_xxar_customer_prof_amnt_tbl (indx).party_site_number,
                               l_xxar_customer_prof_amnt_tbl (indx).party_site_name,
                               l_xxar_customer_prof_amnt_tbl (indx).site_use_number,
                               l_xxar_customer_prof_amnt_tbl (indx).site_use_code,
                               l_xxar_customer_prof_amnt_tbl (indx).location_id,
                               l_xxar_customer_prof_amnt_tbl (indx).party_site_id,
                               l_xxar_customer_prof_amnt_tbl (indx).bill_to_site_use_id,
                               l_xxar_customer_prof_amnt_tbl (indx).cust_acct_site_id,
                               l_xxar_customer_prof_amnt_tbl (indx).cust_acct_site_use_id,
                               l_xxar_customer_prof_amnt_tbl (indx).program_application_id,
                               l_xxar_customer_prof_amnt_tbl (indx).program_id,
                               l_xxar_customer_prof_amnt_tbl (indx).program_update_date,
                               l_xxar_customer_prof_amnt_tbl (indx).request_id,
                               l_xxar_customer_prof_amnt_tbl (indx).process_flag,
                               l_xxar_customer_prof_amnt_tbl (indx).ERROR_TYPE,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_attribute_category,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_attribute1,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_attribute2,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_attribute3,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_attribute4,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_attribute5,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_attribute6,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_attribute7,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_attribute8,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_attribute9,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_attribute10,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_attribute11,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_attribute12,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_attribute13,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_attribute14,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_attribute15,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute1,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute2,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute3,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute4,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute5,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute6,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute7,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute8,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute9,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute10,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute11,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute12,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute13,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute14,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute15,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute16,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute17,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute18,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute19,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_global_attribute20,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute_category,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute1,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute2,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute3,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute4,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute5,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute6,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute7,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute8,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute9,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute10,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute11,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute12,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute13,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute14,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute15,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute16,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute17,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute18,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute19,
                               l_xxar_customer_prof_amnt_tbl (indx).hcp_gdf_attribute20,
                               l_xxar_customer_prof_amnt_tbl (indx).hcpa_attribute_category,
                               l_xxar_customer_prof_amnt_tbl (indx).hcpa_attribute1,
                               l_xxar_customer_prof_amnt_tbl (indx).hcpa_attribute2,
                               l_xxar_customer_prof_amnt_tbl (indx).hcpa_attribute3,
                               l_xxar_customer_prof_amnt_tbl (indx).hcpa_attribute4,
                               l_xxar_customer_prof_amnt_tbl (indx).hcpa_attribute5,
                               l_xxar_customer_prof_amnt_tbl (indx).hcpa_attribute6,
                               l_xxar_customer_prof_amnt_tbl (indx).hcpa_attribute7,
                               l_xxar_customer_prof_amnt_tbl (indx).hcpa_attribute8,
                               l_xxar_customer_prof_amnt_tbl (indx).hcpa_attribute9,
                               l_xxar_customer_prof_amnt_tbl (indx).hcpa_attribute10,
                               l_xxar_customer_prof_amnt_tbl (indx).hcpa_attribute11,
                               l_xxar_customer_prof_amnt_tbl (indx).hcpa_attribute12,
                               l_xxar_customer_prof_amnt_tbl (indx).hcpa_attribute13,
                               l_xxar_customer_prof_amnt_tbl (indx).hcpa_attribute14,
                               l_xxar_customer_prof_amnt_tbl (indx).hcpa_attribute15,
                               l_xxar_customer_prof_amnt_tbl (indx).creation_date,
                               l_xxar_customer_prof_amnt_tbl (indx).created_by,
                               l_xxar_customer_prof_amnt_tbl (indx).last_updated_date,
                               l_xxar_customer_prof_amnt_tbl (indx).last_updated_by,
                               l_xxar_customer_prof_amnt_tbl (indx).last_update_login,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_cust_account_id,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_party_id,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_cust_acct_site_id,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_party_site_id,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_request_id_merge,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_request_id_enrich,
                               l_xxar_customer_prof_amnt_tbl (indx).party_id,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_orig_sys_cust_site_ref,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_orig_sys_party_site_ref,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_request_id_ddpl,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_site_use_id,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_orig_sys_party_ref,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_old_cust_acct_id,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_old_cust_orig_sys_ref,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_operating_unit_name,
                               l_xxar_customer_prof_amnt_tbl (indx).operating_unit_name,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_plant,
                               l_xxar_customer_prof_amnt_tbl (indx).leg_orig_sys_hcsu_ref
                              );
            EXCEPTION
               WHEN OTHERS
               THEN
                  FOR l_indx_exp IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                  LOOP
                     l_err_record :=
                        l_xxar_customer_prof_amnt_tbl
                              (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id;
                     g_retcode := '1';
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Record sequence : '
                         || l_xxar_customer_prof_amnt_tbl
                               (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id
                        );
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Error Message : '
                         || SQLERRM
                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE)
                        );

                     -- Updating Leg_process_flag to 'E' for failed records
                     UPDATE xxar_cust_prof_amt_ext_r12 xsber
                        SET leg_process_flag = g_error,
                            last_updated_by = g_last_updated_by,
                            last_update_login = g_last_updated_by,
                            last_updated_date = SYSDATE
                      WHERE xsber.interface_txn_id = l_err_record
                        AND xsber.leg_process_flag = g_validated;

                     g_failed_count := g_failed_count + SQL%ROWCOUNT;
--                     l_error_message :=
--                           l_error_message
--                        || ' ~~ '
--                        || SQLERRM
--                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE);
                  END LOOP;
            END;

            -- Update Successful records in Extraction Table
            UPDATE xxar_cust_prof_amt_ext_r12 stg2
               SET leg_process_flag = g_processed,
                   last_updated_by = g_last_updated_by,
                   last_update_login = g_last_updated_by,
                   last_updated_date = SYSDATE
             WHERE leg_process_flag = g_validated
               AND EXISTS (
                           SELECT 1
                             FROM xxar_customer_prof_amnt_stg stg1
                            WHERE stg1.interface_txn_id =
                                                         stg2.interface_txn_id);

            COMMIT;
         END LOOP;

         CLOSE load_xxar_cust_prof_amnt_cur;                   -- Close Cursor
      -- COMMIT;
      END IF;

      --- Relation
      IF g_entity = g_relation AND 1 = 2
      -- This is not required as this will be taken care in Contacts
      THEN
         -- Open Cursor for all account records
         OPEN load_xxar_entity_relation_cur;

         LOOP
            l_xxar_entity_relation_tbl.DELETE;

            FETCH load_xxar_entity_relation_cur
            BULK COLLECT INTO l_xxar_entity_relation_tbl LIMIT 500;

            --limit size of Bulk Collect

            -- Get Total Count
            g_total_count := g_total_count + l_xxar_entity_relation_tbl.COUNT;
            EXIT WHEN l_xxar_entity_relation_tbl.COUNT = 0;

            BEGIN
               -- Bulk Insert into Conversion table
               FORALL indx IN 1 .. l_xxar_entity_relation_tbl.COUNT SAVE EXCEPTIONS
                  INSERT INTO xxar_entity_relation_stg
                              (interface_txn_id,
                               batch_id,
                               run_sequence_id,
                               hr_relationship_id,
                               hr_subject_id,
                               hr_sub_first_name,
                               hr_sub_last_name,
                               subject_orig_sys_party_ref,
                               hr_subject_type,
                               hr_object_id,
                               object_orig_sys_party_ref,
                               leg_title,
                               leg_job_title,
                               leg_job_title_code,
                               hr_object_type,
                               hr_subject_table_name,
                               hr_object_table_name,
                               hr_relationship_code,
                               hr_relationship_type,
                               hr_status,
                               hr_directional_flag,
                               hr_start_date,
                               hr_end_date,
                               hcar_cust_account_id,
                               hcar_related_cust_account_id, hcar_org_id,
                               hcar_org_name, hcar_bill_to_flag,
                               hcar_comments, hcar_customer_reciprocal_flag,
                               hcar_relationship_type, hcar_ship_to_flag,
                               hcar_status, leg_customer_number,
                               leg_site_number,
                               customer_number,
                               customer_site_number,
                               cust_account_id,
                               customer_acct_site_id,
                               customer_acc_name_r12,
                               customer_site_use_id,
                               creation_date, created_by, last_updated_date,
                               last_updated_by, last_update_login,
                               program_application_id,
                               program_id,
                               program_update_date,
                               request_id,
                               process_flag,
                               ERROR_TYPE,
                               leg_source_system,
                               leg_request_id,
                               leg_seq_num,
                               leg_process_flag
                              )
                       VALUES (l_xxar_entity_relation_tbl (indx).interface_txn_id,
                               l_xxar_entity_relation_tbl (indx).batch_id,
                               l_xxar_entity_relation_tbl (indx).run_sequence_id,
                               l_xxar_entity_relation_tbl (indx).hr_relationship_id,
                               l_xxar_entity_relation_tbl (indx).leg_hr_subject_id,
                               l_xxar_entity_relation_tbl (indx).leg_hr_sub_first_name,
                               l_xxar_entity_relation_tbl (indx).leg_hr_sub_last_name,
                               l_xxar_entity_relation_tbl (indx).leg_subject_orig_sys_party_ref,
                               l_xxar_entity_relation_tbl (indx).leg_hr_subject_type,
                               l_xxar_entity_relation_tbl (indx).leg_hr_object_id,
                               l_xxar_entity_relation_tbl (indx).leg_object_orig_sys_party_ref,
                               l_xxar_entity_relation_tbl (indx).leg_title,
                               l_xxar_entity_relation_tbl (indx).leg_job_title,
                               l_xxar_entity_relation_tbl (indx).leg_job_title_code,
                               l_xxar_entity_relation_tbl (indx).leg_hr_object_type,
                               l_xxar_entity_relation_tbl (indx).leg_hr_subject_table_name,
                               l_xxar_entity_relation_tbl (indx).leg_hr_object_table_name,
                               l_xxar_entity_relation_tbl (indx).leg_hr_relationship_code,
                               l_xxar_entity_relation_tbl (indx).leg_hr_relationship_type,
                               l_xxar_entity_relation_tbl (indx).leg_hr_status,
                               l_xxar_entity_relation_tbl (indx).leg_hr_directional_flag,
                               l_xxar_entity_relation_tbl (indx).leg_hr_start_date,
                               l_xxar_entity_relation_tbl (indx).leg_hr_end_date,
                               NULL,
                               --l_xxar_entity_relation_tbl (indx).hcar_cust_account_id,
                               NULL,
                                    --l_xxar_entity_relation_tbl (indx).hcar_related_cust_account_id,
                               NULL,
                               --l_xxar_entity_relation_tbl (indx).hcar_org_id,
                               NULL,
                                    --l_xxar_entity_relation_tbl (indx).hcar_org_name,
                               NULL,
                               --l_xxar_entity_relation_tbl (indx).hcar_bill_to_flag,
                               NULL,
                                    --l_xxar_entity_relation_tbl (indx).hcar_comments,
                               NULL,
                               --l_xxar_entity_relation_tbl (indx).hcar_customer_reciprocal_flag,
                               NULL,
                                    --l_xxar_entity_relation_tbl (indx).hcar_relationship_type,
                               NULL,
                               --l_xxar_entity_relation_tbl (indx).hcar_ship_to_flag,
                               NULL,
                                    --l_xxar_entity_relation_tbl (indx).hcar_status,
                               NULL,
                               --l_xxar_entity_relation_tbl (indx).leg_customer_number,
                               NULL,
                               --l_xxar_entity_relation_tbl (indx).leg_site_number,
                               l_xxar_entity_relation_tbl (indx).customer_number,
                               l_xxar_entity_relation_tbl (indx).customer_site_number,
                               l_xxar_entity_relation_tbl (indx).cust_account_id,
                               l_xxar_entity_relation_tbl (indx).customer_acct_site_id,
                               l_xxar_entity_relation_tbl (indx).customer_acc_name_r12,
                               l_xxar_entity_relation_tbl (indx).customer_site_use_id,
                               SYSDATE, g_last_updated_by, SYSDATE,
                               g_last_updated_by, g_last_update_login,
                               l_xxar_entity_relation_tbl (indx).program_application_id,
                               l_xxar_entity_relation_tbl (indx).program_id,
                               l_xxar_entity_relation_tbl (indx).program_update_date,
                               l_xxar_entity_relation_tbl (indx).request_id,
                               l_xxar_entity_relation_tbl (indx).process_flag,
                               l_xxar_entity_relation_tbl (indx).ERROR_TYPE,
                               l_xxar_entity_relation_tbl (indx).leg_source_system,
                               l_xxar_entity_relation_tbl (indx).leg_request_id,
                               l_xxar_entity_relation_tbl (indx).leg_seq_num,
                               l_xxar_entity_relation_tbl (indx).leg_process_flag
                              );
            EXCEPTION
               WHEN OTHERS
               THEN
                  FOR l_indx_exp IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                  LOOP
                     l_err_record :=
                        l_xxar_entity_relation_tbl
                              (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id;
                     g_retcode := '1';
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Record sequence : '
                         || l_xxar_entity_relation_tbl
                               (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id
                        );
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Error Message : '
                         || SQLERRM
                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE)
                        );

                     -- Updating Leg_process_flag to 'E' for failed records
                     UPDATE xxar_entity_rel_ext_r12 xsber
                        SET leg_process_flag = g_error,
                            last_updated_by = g_last_updated_by,
                            last_update_login = g_last_updated_by,
                            last_updated_date = SYSDATE
                      WHERE xsber.interface_txn_id = l_err_record
                        AND xsber.leg_process_flag = g_validated;

                     g_failed_count := g_failed_count + SQL%ROWCOUNT;
--                     l_error_message :=
--                           l_error_message
--                        || ' ~~ '
--                        || SQLERRM
--                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE);
                  END LOOP;
            END;

            -- Update Successful records in Extraction Table
            UPDATE xxar_entity_rel_ext_r12 stg2
               SET leg_process_flag = g_processed,
                   last_updated_by = g_last_updated_by,
                   last_update_login = g_last_updated_by,
                   last_updated_date = SYSDATE
             WHERE leg_process_flag = g_validated
               AND EXISTS (
                           SELECT 1
                             FROM xxar_entity_relation_stg stg1
                            WHERE stg1.interface_txn_id =
                                                         stg2.interface_txn_id);

            COMMIT;
         END LOOP;

         CLOSE load_xxar_entity_relation_cur;                  -- Close Cursor
      --  COMMIT;
      END IF;

      --- Relation
      IF g_entity = g_relation
      THEN
         -- Open Cursor for all account records
         OPEN load_xxar_account_relation_cur;

         LOOP
            l_xxar_account_relation_tbl.DELETE;

            FETCH load_xxar_account_relation_cur
            BULK COLLECT INTO l_xxar_account_relation_tbl LIMIT 500;

            --limit size of Bulk Collect

            -- Get Total Count
            g_total_count :=
                            g_total_count + l_xxar_account_relation_tbl.COUNT;
            EXIT WHEN l_xxar_account_relation_tbl.COUNT = 0;

            BEGIN
               -- Bulk Insert into Conversion table
               FORALL indx IN 1 .. l_xxar_account_relation_tbl.COUNT SAVE EXCEPTIONS
                  INSERT INTO xxar_cust_acct_relation_stg
                              (interface_txn_id,
                               batch_id,
                               run_sequence_id,
                               hcar_cust_account_id,
                               leg_orig_sys_cust_ref,
                               hcar_related_cust_account_id,
                               leg_rel_orig_sys_cust_ref,
                               hcar_org_id,
                               hcar_org_name,
                               hcar_bill_to_flag,
                               hcar_comments,
                               hcar_customer_reciprocal_flag,
                               hcar_relationship_type,
                               hcar_ship_to_flag,
                               hcar_status,
                               leg_customer_number,
                               leg_site_number,
                               customer_number,
                               customer_site_number,
                               cust_account_id,
                               customer_acct_site_id,
                               customer_acc_name_r12,
                               customer_site_use_id,
                               operating_unit,
                               org_id, creation_date, created_by,
                               last_updated_date, last_updated_by,
                               last_update_login,
                               program_application_id,
                               program_id,
                               program_update_date,
                               request_id,
                               process_flag,
                               ERROR_TYPE,
                               leg_source_system,
                               leg_request_id,
                               leg_seq_num,
                               leg_process_flag
                              )
                       VALUES (l_xxar_account_relation_tbl (indx).interface_txn_id,
                               l_xxar_account_relation_tbl (indx).batch_id,
                               l_xxar_account_relation_tbl (indx).run_sequence_id,
                               NULL,
                               --l_xxar_account_relation_tbl (indx).hcar_cust_account_id,
                               l_xxar_account_relation_tbl (indx).leg_orig_sys_cust_ref,
                               NULL,
                               --l_xxar_account_relation_tbl (indx).hcar_related_cust_account_id,
                               l_xxar_account_relation_tbl (indx).leg_rel_orig_sys_cust_ref,
                               NULL,
                               --l_xxar_account_relation_tbl (indx).hcar_org_id,
                               l_xxar_account_relation_tbl (indx).leg_hcar_org_name,
                               l_xxar_account_relation_tbl (indx).leg_hcar_bill_to_flag,
                               l_xxar_account_relation_tbl (indx).leg_hcar_comments,
                               l_xxar_account_relation_tbl (indx).leg_hcar_cust_reciprocal_flag,
                               l_xxar_account_relation_tbl (indx).leg_hcar_relationship_type,
                               l_xxar_account_relation_tbl (indx).leg_hcar_ship_to_flag,
                               l_xxar_account_relation_tbl (indx).leg_hcar_status,
                               l_xxar_account_relation_tbl (indx).leg_customer_number,
                               l_xxar_account_relation_tbl (indx).leg_site_number,
                               l_xxar_account_relation_tbl (indx).customer_number,
                               l_xxar_account_relation_tbl (indx).customer_site_number,
                               l_xxar_account_relation_tbl (indx).cust_account_id,
                               l_xxar_account_relation_tbl (indx).customer_acct_site_id,
                               l_xxar_account_relation_tbl (indx).customer_acc_name_r12,
                               l_xxar_account_relation_tbl (indx).customer_site_use_id,
                               l_xxar_account_relation_tbl (indx).operating_unit,
                               NULL,
                                    --l_xxar_account_relation_tbl (indx).org_id,
                                    SYSDATE, g_last_updated_by,
                               SYSDATE, g_last_updated_by,
                               g_last_update_login,
                               l_xxar_account_relation_tbl (indx).program_application_id,
                               l_xxar_account_relation_tbl (indx).program_id,
                               l_xxar_account_relation_tbl (indx).program_update_date,
                               l_xxar_account_relation_tbl (indx).request_id,
                               l_xxar_account_relation_tbl (indx).process_flag,
                               l_xxar_account_relation_tbl (indx).ERROR_TYPE,
                               l_xxar_account_relation_tbl (indx).leg_source_system,
                               l_xxar_account_relation_tbl (indx).leg_request_id,
                               l_xxar_account_relation_tbl (indx).leg_seq_num,
                               l_xxar_account_relation_tbl (indx).leg_process_flag
                              );
            EXCEPTION
               WHEN OTHERS
               THEN
                  FOR l_indx_exp IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                  LOOP
                     l_err_record :=
                        l_xxar_account_relation_tbl
                              (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id;
                     g_retcode := '1';
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Record sequence : '
                         || l_xxar_account_relation_tbl
                               (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id
                        );
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Error Message : '
                         || SQLERRM
                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE)
                        );

                     -- Updating Leg_process_flag to 'E' for failed records
                     UPDATE xxar_cust_acct_rel_ext_r12 xsber
                        SET leg_process_flag = g_error,
                            last_updated_by = g_last_updated_by,
                            last_update_login = g_last_updated_by,
                            last_updated_date = SYSDATE
                      WHERE xsber.interface_txn_id = l_err_record
                        AND xsber.leg_process_flag = g_validated;

                     g_failed_count := g_failed_count + SQL%ROWCOUNT;
--                     l_error_message :=
--                           l_error_message
--                        || ' ~~ '
--                        || SQLERRM
--                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE);
                  END LOOP;
            END;

            -- Update Successful records in Extraction Table
            UPDATE xxar_cust_acct_rel_ext_r12 stg2
               SET leg_process_flag = g_processed,
                   last_updated_by = g_last_updated_by,
                   last_update_login = g_last_updated_by,
                   last_updated_date = SYSDATE
             WHERE leg_process_flag = g_validated
               AND EXISTS (
                           SELECT 1
                             FROM xxar_cust_acct_relation_stg stg1
                            WHERE stg1.interface_txn_id =
                                                         stg2.interface_txn_id);

            COMMIT;
         END LOOP;

         CLOSE load_xxar_account_relation_cur;                 -- Close Cursor
--         COMMIT;
      END IF;

      --- Contacts
      IF g_entity = g_contact_point
      THEN
         -- Open Cursor for all account records
         OPEN load_xxar_cust_contact_cur;

         LOOP
            l_xxar_cust_contact_tbl.DELETE;

            FETCH load_xxar_cust_contact_cur
            BULK COLLECT INTO l_xxar_cust_contact_tbl LIMIT 500;

            --limit size of Bulk Collect

            -- Get Total Count
            g_total_count := g_total_count + l_xxar_cust_contact_tbl.COUNT;
            EXIT WHEN l_xxar_cust_contact_tbl.COUNT = 0;

            BEGIN
               -- Bulk Insert into Conversion table
               FORALL indx IN 1 .. l_xxar_cust_contact_tbl.COUNT SAVE EXCEPTIONS
                  INSERT INTO xxar_customer_contact_stg
                              (interface_txn_id,
                               batch_id,
                               run_sequence_id,
                               leg_person_first_name,
                               leg_person_last_name,
                               leg_party_type,
                               leg_title,
                               leg_job_title,
                               leg_job_title_code,
                               leg_orig_sys_contact_ref,
                               leg_mail_stop,
                               leg_email_address,
                               leg_contact_key,
                               leg_contact_type,
                               leg_contact_number,
                               leg_orig_sys_telephone_ref,
                               leg_phone_area_code,
                               leg_phone_country_code,
                               leg_phone_extension,
                               leg_phone_line_type,
                               leg_phone_number,
                               leg_orig_sys_customer_ref,
                               leg_orig_system_address_ref,
                               leg_saluation,
                               leg_sex_code,
                               leg_customer_number,
                               leg_site_number,
                               leg_url,
                               leg_telex_number,
                               customer_number,
                               customer_site_number,
                               --   customer_site_id,
                               cust_account_id,
                               customer_acct_site_id,
                               customer_acc_name_r12,
                               contact_party_id,
                               org_cont_party_id,
                               contact_role_id,
                               cust_account_role_id,
                               leg_operating_unit,
                               org_id,
                               hoc_attribute_category,
                               hoc_attribute1,
                               hoc_attribute2,
                               hoc_attribute3,
                               hoc_attribute4,
                               hoc_attribute5,
                               hoc_attribute6,
                               hoc_attribute7,
                               hoc_attribute8,
                               hoc_attribute9,
                               hoc_attribute10,
                               hoc_attribute11,
                               hoc_attribute12,
                               hoc_attribute13,
                               hoc_attribute14,
                               hoc_attribute15,
                               hoc_attribute16,
                               hoc_attribute17,
                               hoc_attribute18,
                               hoc_attribute19,
                               hoc_attribute20,
                               hoc_attribute21,
                               hoc_attribute22,
                               hoc_attribute23,
                               hoc_attribute24,
                               hoc_attribute25,
                               hcp_attribute_category,
                               hcp_attribute1,
                               hcp_attribute2,
                               hcp_attribute3,
                               hcp_attribute4,
                               hcp_attribute5,
                               hcp_attribute6,
                               hcp_attribute7,
                               hcp_attribute8,
                               hcp_attribute9,
                               hcp_attribute10,
                               hcp_attribute11,
                               hcp_attribute12,
                               hcp_attribute13,
                               hcp_attribute14,
                               hcp_attribute15,
                               creation_date, created_by, last_updated_date,
                               last_updated_by, last_update_login,
                               program_application_id,
                               program_id,
                               program_update_date,
                               request_id,
                               process_flag,
                               ERROR_TYPE,
                               leg_source_system,
                               leg_request_id,
                               leg_seq_num,
                               leg_process_flag
                              )
                       VALUES (l_xxar_cust_contact_tbl (indx).interface_txn_id,
                               l_xxar_cust_contact_tbl (indx).batch_id,
                               l_xxar_cust_contact_tbl (indx).run_sequence_id,
                               l_xxar_cust_contact_tbl (indx).leg_person_first_name,
                               l_xxar_cust_contact_tbl (indx).leg_person_last_name,
                               l_xxar_cust_contact_tbl (indx).leg_party_type,
                               l_xxar_cust_contact_tbl (indx).leg_title,
                               l_xxar_cust_contact_tbl (indx).leg_job_title,
                               l_xxar_cust_contact_tbl (indx).leg_job_title_code,
                               l_xxar_cust_contact_tbl (indx).leg_orig_sys_contact_ref,
                               l_xxar_cust_contact_tbl (indx).leg_mail_stop,
                               l_xxar_cust_contact_tbl (indx).leg_email_address,
                               l_xxar_cust_contact_tbl (indx).leg_contact_key,
                               l_xxar_cust_contact_tbl (indx).leg_contact_type,
                               l_xxar_cust_contact_tbl (indx).leg_contact_number,
                               l_xxar_cust_contact_tbl (indx).leg_orig_sys_telephone_ref,
                               l_xxar_cust_contact_tbl (indx).leg_phone_area_code,
                               DECODE(l_xxar_cust_contact_tbl (indx).leg_phone_country_code,
                                      'FX','FR',
                                      'LX','LT',
                                      'TP','TL',
                                      'YU','RS',
                                      'ZR','CD',
                                      l_xxar_cust_contact_tbl (indx).leg_phone_country_code), --modified for Defect#1669 - obsolete country codes, v1.23
                               l_xxar_cust_contact_tbl (indx).leg_phone_extension,
                               l_xxar_cust_contact_tbl (indx).leg_phone_line_type,
                               l_xxar_cust_contact_tbl (indx).leg_phone_number,
                               l_xxar_cust_contact_tbl (indx).leg_orig_sys_customer_ref,
                               l_xxar_cust_contact_tbl (indx).leg_orig_system_address_ref,
                               l_xxar_cust_contact_tbl (indx).leg_saluation,
                               l_xxar_cust_contact_tbl (indx).leg_sex_code,
                               l_xxar_cust_contact_tbl (indx).leg_customer_number,
                               l_xxar_cust_contact_tbl (indx).leg_site_number,
                               l_xxar_cust_contact_tbl (indx).leg_url,
                               l_xxar_cust_contact_tbl (indx).leg_telex_number,
                               l_xxar_cust_contact_tbl (indx).customer_number,
                               l_xxar_cust_contact_tbl (indx).customer_site_number,
                               --l_xxar_cust_contact_tbl(i).customer_site_id,
                               l_xxar_cust_contact_tbl (indx).cust_account_id,
                               l_xxar_cust_contact_tbl (indx).customer_acct_site_id,
                               l_xxar_cust_contact_tbl (indx).customer_acc_name_r12,
                               l_xxar_cust_contact_tbl (indx).contact_party_id,
                               l_xxar_cust_contact_tbl (indx).org_cont_party_id,
                               l_xxar_cust_contact_tbl (indx).contact_role_id,
                               l_xxar_cust_contact_tbl (indx).cust_account_role_id,
                               l_xxar_cust_contact_tbl (indx).leg_operating_unit,
                               NULL,  --l_xxar_cust_contact_tbl (indx).org_id,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute_category,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute1,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute2,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute3,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute4,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute5,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute6,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute7,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute8,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute9,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute10,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute11,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute12,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute13,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute14,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute15,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute16,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute17,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute18,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute19,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute20,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute21,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute22,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute23,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute24,
                               l_xxar_cust_contact_tbl (indx).hoc_attribute25,
                               l_xxar_cust_contact_tbl (indx).hcp_attribute_category,
                               l_xxar_cust_contact_tbl (indx).hcp_attribute1,
                               l_xxar_cust_contact_tbl (indx).hcp_attribute2,
                               l_xxar_cust_contact_tbl (indx).hcp_attribute3,
                               l_xxar_cust_contact_tbl (indx).hcp_attribute4,
                               l_xxar_cust_contact_tbl (indx).hcp_attribute5,
                               l_xxar_cust_contact_tbl (indx).hcp_attribute6,
                               l_xxar_cust_contact_tbl (indx).hcp_attribute7,
                               l_xxar_cust_contact_tbl (indx).hcp_attribute8,
                               l_xxar_cust_contact_tbl (indx).hcp_attribute9,
                               l_xxar_cust_contact_tbl (indx).hcp_attribute10,
                               l_xxar_cust_contact_tbl (indx).hcp_attribute11,
                               l_xxar_cust_contact_tbl (indx).hcp_attribute12,
                               l_xxar_cust_contact_tbl (indx).hcp_attribute13,
                               l_xxar_cust_contact_tbl (indx).hcp_attribute14,
                               l_xxar_cust_contact_tbl (indx).hcp_attribute15,
                               SYSDATE, g_last_updated_by, SYSDATE,
                               g_last_updated_by, g_last_update_login,
                               l_xxar_cust_contact_tbl (indx).program_application_id,
                               l_xxar_cust_contact_tbl (indx).program_id,
                               l_xxar_cust_contact_tbl (indx).program_update_date,
                               l_xxar_cust_contact_tbl (indx).request_id,
                               l_xxar_cust_contact_tbl (indx).process_flag,
                               l_xxar_cust_contact_tbl (indx).ERROR_TYPE,
                               l_xxar_cust_contact_tbl (indx).leg_source_system,
                               l_xxar_cust_contact_tbl (indx).leg_request_id,
                               l_xxar_cust_contact_tbl (indx).leg_seq_num,
                               l_xxar_cust_contact_tbl (indx).leg_process_flag
                              );
            EXCEPTION
               WHEN OTHERS
               THEN
                  FOR l_indx_exp IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                  LOOP
                     l_err_record :=
                        l_xxar_cust_contact_tbl
                              (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id;
                     g_retcode := '1';
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Record sequence : '
                         || l_xxar_cust_contact_tbl
                               (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id
                        );
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Error Message : '
                         || SQLERRM
                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE)
                        );

                     -- Updating Leg_process_flag to 'E' for failed records
                     UPDATE xxar_cust_contact_ext_r12 xsber
                        SET leg_process_flag = g_error,
                            last_updated_by = g_last_updated_by,
                            last_update_login = g_last_updated_by,
                            last_updated_date = SYSDATE
                      WHERE xsber.interface_txn_id = l_err_record
                        AND xsber.leg_process_flag = g_validated;

                     g_failed_count := g_failed_count + SQL%ROWCOUNT;
--                     l_error_message :=
--                           l_error_message
--                        || ' ~~ '
--                        || SQLERRM
--                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE);
                  END LOOP;
            END;

            -- Update Successful records in Extraction Table
            UPDATE xxar_cust_contact_ext_r12 stg2
               SET leg_process_flag = g_processed,
                   last_updated_by = g_last_updated_by,
                   last_update_login = g_last_updated_by,
                   last_updated_date = SYSDATE
             WHERE leg_process_flag = g_validated
               AND EXISTS (
                           SELECT 1
                             FROM xxar_customer_contact_stg stg1
                            WHERE stg1.interface_txn_id =
                                                         stg2.interface_txn_id);

            COMMIT;
         END LOOP;

         CLOSE load_xxar_cust_contact_cur;                     -- Close Cursor
      -- COMMIT;
      END IF;

      -- Pay Method
      IF g_entity = g_pay_method
      THEN
         -- Open Cursor for all account records
         OPEN load_xxar_cust_pay_method_cur;

         LOOP
            l_xxar_cust_pay_method_tbl.DELETE;

            FETCH load_xxar_cust_pay_method_cur
            BULK COLLECT INTO l_xxar_cust_pay_method_tbl LIMIT 500;

            --limit size of Bulk Collect

            -- Get Total Count
            g_total_count := g_total_count + l_xxar_cust_pay_method_tbl.COUNT;
            EXIT WHEN l_xxar_cust_pay_method_tbl.COUNT = 0;

            BEGIN
               -- Bulk Insert into Conversion table
               FORALL indx IN 1 .. l_xxar_cust_pay_method_tbl.COUNT SAVE EXCEPTIONS
                  INSERT INTO xxar_cust_pay_method_stg
                              (interface_txn_id,
                               batch_id,
                               run_sequence_id,
                               leg_customer_number,
                               leg_site_number,
                               leg_start_date,
                               leg_end_date,
                               leg_primary_flag,
                               leg_source_system,
                               leg_request_id,
                               leg_seq_num,
                               leg_process_flag,
                               leg_pay_method_name,
                               hca_orig_system_customer_ref,
                               hl_orig_system_customer_ref,
                               org_id,
                               operating_unit_name,
                               branch_id,
                               bank_id,
                               customer_number,
                               customer_site_number,
                               cust_account_id,
                               customer_acct_site_id,
                               customer_acc_name_r12,
                               customer_site_use_id,
                               program_application_id,
                               program_id,
                               program_update_date,
                               request_id,
                               process_flag,
                               ERROR_TYPE,
                               rcp_attribute_category,
                               rcp_attribute1,
                               rcp_attribute2,
                               rcp_attribute3,
                               rcp_attribute4,
                               rcp_attribute5,
                               rcp_attribute6,
                               rcp_attribute7,
                               rcp_attribute8,
                               rcp_attribute9,
                               rcp_attribute10,
                               rcp_attribute11,
                               rcp_attribute12,
                               rcp_attribute13,
                               rcp_attribute14,
                               rcp_attribute15,
                               creation_date, created_by, last_updated_date,
                               last_updated_by, last_update_login
                              )
                       VALUES (l_xxar_cust_pay_method_tbl (indx).interface_txn_id,
                               l_xxar_cust_pay_method_tbl (indx).batch_id,
                               l_xxar_cust_pay_method_tbl (indx).run_sequence_id,
                               l_xxar_cust_pay_method_tbl (indx).leg_customer_number,
                               l_xxar_cust_pay_method_tbl (indx).leg_site_number,
                               l_xxar_cust_pay_method_tbl (indx).leg_start_date,
                               l_xxar_cust_pay_method_tbl (indx).leg_end_date,
                               l_xxar_cust_pay_method_tbl (indx).leg_primary_flag,
                               l_xxar_cust_pay_method_tbl (indx).leg_source_system,
                               l_xxar_cust_pay_method_tbl (indx).leg_request_id,
                               l_xxar_cust_pay_method_tbl (indx).leg_seq_num,
                               l_xxar_cust_pay_method_tbl (indx).leg_process_flag,
                               l_xxar_cust_pay_method_tbl (indx).leg_pay_method_name,
                               l_xxar_cust_pay_method_tbl (indx).hca_orig_system_customer_ref,
                               l_xxar_cust_pay_method_tbl (indx).hl_orig_system_customer_ref,
                               NULL,
                               --l_xxar_cust_pay_method_tbl (indx).org_id,
                               l_xxar_cust_pay_method_tbl (indx).operating_unit_name,
                               l_xxar_cust_pay_method_tbl (indx).branch_id,
                               l_xxar_cust_pay_method_tbl (indx).bank_id,
                               l_xxar_cust_pay_method_tbl (indx).customer_number,
                               l_xxar_cust_pay_method_tbl (indx).customer_site_number,
                               l_xxar_cust_pay_method_tbl (indx).cust_account_id,
                               l_xxar_cust_pay_method_tbl (indx).customer_acct_site_id,
                               l_xxar_cust_pay_method_tbl (indx).customer_acc_name_r12,
                               l_xxar_cust_pay_method_tbl (indx).customer_site_use_id,
                               l_xxar_cust_pay_method_tbl (indx).program_application_id,
                               l_xxar_cust_pay_method_tbl (indx).program_id,
                               l_xxar_cust_pay_method_tbl (indx).program_update_date,
                               l_xxar_cust_pay_method_tbl (indx).request_id,
                               l_xxar_cust_pay_method_tbl (indx).process_flag,
                               l_xxar_cust_pay_method_tbl (indx).ERROR_TYPE,
                               l_xxar_cust_pay_method_tbl (indx).rcp_attribute_category,
                               l_xxar_cust_pay_method_tbl (indx).rcp_attribute1,
                               l_xxar_cust_pay_method_tbl (indx).rcp_attribute2,
                               l_xxar_cust_pay_method_tbl (indx).rcp_attribute3,
                               l_xxar_cust_pay_method_tbl (indx).rcp_attribute4,
                               l_xxar_cust_pay_method_tbl (indx).rcp_attribute5,
                               l_xxar_cust_pay_method_tbl (indx).rcp_attribute6,
                               l_xxar_cust_pay_method_tbl (indx).rcp_attribute7,
                               l_xxar_cust_pay_method_tbl (indx).rcp_attribute8,
                               l_xxar_cust_pay_method_tbl (indx).rcp_attribute9,
                               l_xxar_cust_pay_method_tbl (indx).rcp_attribute10,
                               l_xxar_cust_pay_method_tbl (indx).rcp_attribute11,
                               l_xxar_cust_pay_method_tbl (indx).rcp_attribute12,
                               l_xxar_cust_pay_method_tbl (indx).rcp_attribute13,
                               l_xxar_cust_pay_method_tbl (indx).rcp_attribute14,
                               l_xxar_cust_pay_method_tbl (indx).rcp_attribute15,
                               SYSDATE, g_last_updated_by, SYSDATE,
                               g_last_updated_by, g_last_update_login
                              );
            EXCEPTION
               WHEN OTHERS
               THEN
                  FOR l_indx_exp IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                  LOOP
                     l_err_record :=
                        l_xxar_cust_pay_method_tbl
                              (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id;
                     g_retcode := '1';
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Record sequence : '
                         || l_xxar_cust_pay_method_tbl
                               (SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_INDEX).interface_txn_id
                        );
                     fnd_file.put_line
                        (fnd_file.LOG,
                            'Error Message : '
                         || SQLERRM
                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE)
                        );

                     -- Updating Leg_process_flag to 'E' for failed records
                     UPDATE xxar_cust_pay_mtd_ext_r12 xsber
                        SET leg_process_flag = g_error,
                            last_updated_by = g_last_updated_by,
                            last_update_login = g_last_updated_by,
                            last_updated_date = SYSDATE
                      WHERE xsber.interface_txn_id = l_err_record
                        AND xsber.leg_process_flag = g_validated;

                     g_failed_count := g_failed_count + SQL%ROWCOUNT;
--                     l_error_message :=
--                           l_error_message
--                        || ' ~~ '
--                        || SQLERRM
--                               (-SQL%BULK_EXCEPTIONS (l_indx_exp).ERROR_CODE);
                  END LOOP;
            END;

            -- Update Successful records in Extraction Table
            UPDATE xxar_cust_pay_mtd_ext_r12 stg2
               SET leg_process_flag = g_processed,
                   last_updated_by = g_last_updated_by,
                   last_update_login = g_last_updated_by,
                   last_updated_date = SYSDATE
             WHERE leg_process_flag = g_validated
               AND EXISTS (
                           SELECT 1
                             FROM xxar_cust_pay_method_stg stg1
                            WHERE stg1.interface_txn_id =
                                                         stg2.interface_txn_id);

            COMMIT;
         END LOOP;

         CLOSE load_xxar_cust_pay_method_cur;                  -- Close Cursor
      -- COMMIT;
      END IF;
   END;



-- Added for Defect# 5880, V1.74
-- =============================================================================
-- Procedure: update_def_rpt_country
-- =============================================================================
-- This private procedure will update default reporting country code
-- This is called from p_import_customer
-- =============================================================================
PROCEDURE update_def_rpt_country IS

   l_init_msg_list                                   VARCHAR2(200);
   x_profile_id                                      NUMBER;
   l_error_message                                   VARCHAR2(2000);
   l_msg_index_out                                   NUMBER;
   x_tax_prf_ret_status                              VARCHAR2(2000);
   x_msg_count                                       NUMBER;
   x_msg_data                                        VARCHAR2(2000);
   l_log_ret_stats                                   VARCHAR2 (10);
   l_log_err_msg                                     VARCHAR2 (2000);
   source_rec                                        xxetn_common_error_pkg.g_source_rec_type;
   p_counter                                         NUMBER :=0;

   CURSOR update_party_country_cur
    IS
    SELECT xcs.leg_default_country
          ,zptp.party_tax_profile_id
          ,zptp.party_id
          ,zptp.program_login_id
          ,zptp.party_type_code
          ,xcs.leg_jgzz_fiscal_code rep_registration_number
          ,xcs.interface_txn_id
      FROM xxar_customer_stg xcs ,
           zx_party_tax_profile zptp
      WHERE 1=1
        AND zptp.party_id = xcs.party_id
        AND xcs.process_flag = g_converted
        AND xcs.batch_id = NVL (g_batch_id, xcs.batch_id)
        AND xcs.leg_source_system = NVL (g_leg_src_sys, xcs.leg_source_system)
        AND xcs.request_id = g_request_id
       ;

BEGIN

FOR update_party_country_rec in update_party_country_cur
LOOP

   x_tax_prf_ret_status                           := NULL;
   x_msg_count                                    := NULL;
   x_msg_data                                     := NULL;

   /*apps.zx_party_tax_profile_pkg.update_row ( p_party_tax_profile_id         => update_party_country_rec.party_tax_profile_id
                                                 ,p_rep_registration_number      => NULL --update_party_country_rec.rep_registration_number
                                                 ,p_party_id                     => update_party_country_rec.party_id
                                                 ,p_program_login_id             => update_party_country_rec.program_login_id
                                                 ,p_party_type_code              => update_party_country_rec.party_type_code
                                                 ,x_return_status                => x_tax_prf_ret_status
                                                 ,p_country_code                 => update_party_country_rec.leg_default_country
                                            );*/

   apps.zx_party_tax_profile_pkg.update_row ( p_party_tax_profile_id         => update_party_country_rec.party_tax_profile_id
                                                 ,p_collecting_authority_flag    => NULL
                                                 ,p_provider_type_code           => NULL
                                                 ,p_create_awt_dists_type_code   => NULL
                                                 ,p_create_awt_invoices_type_cod => NULL
                                                 ,p_tax_classification_code      => NULL
                                                 ,p_self_assess_flag             => NULL
                                                 ,p_allow_offset_tax_flag        => NULL
                                                 ,p_rep_registration_number      => update_party_country_rec.rep_registration_number
                                                 ,p_effective_from_use_le        => NULL
                                                 ,p_record_type_code             => NULL
                                                 ,p_request_id                   => NULL
                                                 ,p_attribute1                   => NULL
                                                 ,p_attribute2                   => NULL
                                                 ,p_attribute3                   => NULL
                                                 ,p_attribute4                   => NULL
                                                 ,p_attribute5                   => NULL
                                                 ,p_attribute6                   => NULL
                                                 ,p_attribute7                   => NULL
                                                 ,p_attribute8                   => NULL
                                                 ,p_attribute9                   => NULL
                                                 ,p_attribute10                  => NULL
                                                 ,p_attribute11                  => NULL
                                                 ,p_attribute12                  => NULL
                                                 ,p_attribute13                  => NULL
                                                 ,p_attribute14                  => NULL
                                                 ,p_attribute15                  => NULL
                                                 ,p_attribute_category           => NULL
                                                 ,p_party_id                     => update_party_country_rec.party_id
                                                 ,p_program_login_id             => update_party_country_rec.program_login_id
                                                 ,p_party_type_code              => update_party_country_rec.party_type_code
                                                 ,p_supplier_flag                => NULL
                                                 ,p_customer_flag                => NULL
                                                 ,p_site_flag                    => NULL
                                                 ,p_process_for_applicability_fl => NULL
                                                 ,p_rounding_level_code          => NULL
                                                 ,p_rounding_rule_code           => NULL
                                                 ,p_withholding_start_date       => NULL
                                                 ,p_inclusive_tax_flag           => NULL
                                                 ,p_allow_awt_flag               => NULL
                                                 ,p_use_le_as_subscriber_flag    => NULL
                                                 ,p_legal_establishment_flag     => NULL
                                                 ,p_first_party_le_flag          => NULL
                                                 ,p_reporting_authority_flag     => NULL
                                                 ,x_return_status                => x_tax_prf_ret_status
                                                 ,p_registration_type_code       => NULL
                                                 ,p_country_code                 => update_party_country_rec.leg_default_country
                         );

   IF x_tax_prf_ret_status <> fnd_api.g_ret_sts_success
   THEN
      l_error_message := NULL ;
      x_msg_data      := NULL ;
      FOR i IN 1 .. x_msg_count
      LOOP
         apps.fnd_msg_pub.get(p_msg_index      => i,
                          p_encoded        => fnd_api.g_false,
                          p_data           => x_msg_data,
                              p_msg_index_out  => l_msg_index_out
               );

         IF l_error_message IS NULL
         THEN
            l_error_message                                := SUBSTR(x_msg_data, 1, 250);
         ELSE
            l_error_message                                := l_error_message || ' /' || SUBSTR(x_msg_data, 1, 250);
         END IF;
      END LOOP;

        debug_msg_p ('STEP:7.3.1',
                               'IMPORT_CUSTOMERS_P',
                                  'Error in procedure update_def_rpt_country while updating country code: '
                               || update_party_country_rec.party_id
                               || ': Error - '
                               || l_error_message
                              );

        source_rec.interface_staging_id := update_party_country_rec.interface_txn_id;
        source_rec.source_column_name := NULL;
        source_rec.source_column_value := NULL;
        source_rec.ERROR_CODE := 'PARTY_TAX_PROF_API_ERROR';
        source_rec.error_message := l_error_message;
        log_errors_p (pov_ret_stats      => l_log_ret_stats,
                      pov_err_msg        => l_log_err_msg,
                      pi_err_rec         => source_rec
                      );

   END IF;

    p_counter := p_counter + 1;
    IF p_counter >= 500 THEN
        p_counter := 0;
        COMMIT;
    END IF;

END LOOP ;

EXCEPTION
   WHEN OTHERS
   THEN
      l_error_message := SQLERRM;
      debug_msg_p ('STEP:7.3.2',
                               'IMPORT_CUSTOMERS_P',
                                  'Error in procedure update_def_rpt_country while updating country code: '
                               || NULL
                               || ': Error - '
                               || l_error_message
                              );
END update_def_rpt_country;



--
-- =============================================================================
-- Procedure: print_stats_p
-- =============================================================================
-- This private procedure will Print Stats in Output File
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: MAIN_PROC_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters     :
--  pin_total_count      : Total Records Count
--  pin_success_count    : Success Records Count
--  pin_failed_count     : Failed Records Count in Validation
--  pin_failed_count_imp : Failed Records Count in Import
--
--  Output Parameters    :
--  pov_ret_stats        : Return Status as 'S' or 'E'
--  pov_err_msg          : Return Error Message
--
--  Return               : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE print_stats_p
   IS
      l_pass_val1   NUMBER := 0;
      l_err_val1    NUMBER := 0;
      l_tot_val1    NUMBER := 0;
      l_pass_imp1   NUMBER := 0;
      l_err_imp1    NUMBER := 0;
      l_tot_imp1    NUMBER := 0;
      l_new_count   NUMBER := 0;
   BEGIN
      -- Assign Batch Id and Run Sequence Id for Current Run
      g_new_run_seq_id :=
                        NVL (g_new_run_seq_id, xxetn_run_sequences_s.NEXTVAL);
      g_new_batch_id := NVL (g_new_batch_id, g_batch_id);
      print_log_message_p (   'Batch : '
                           || g_new_batch_id
                           || ' - '
                           || 'run seq : '
                           || g_new_run_seq_id
                          );
      debug_msg_p ('STEP:5.1',
                   'PRINT_STATS_P',
                   'In Begin of Prc: PRINT_STATS_P'
                  );
      fnd_file.put_line (fnd_file.output,
                         'Program Name : Eaton Customer Conversion Program'
                        );
      fnd_file.put_line (fnd_file.output,
                         'Request ID   : ' || TO_CHAR (g_request_id)
                        );
      fnd_file.put_line (fnd_file.output,
                            'Report Date  : '
                         || TO_CHAR (SYSDATE, 'DD-MON-RRRR HH24:MI:SS')
                        );
      fnd_file.put_line
         (fnd_file.output,
          '============================================================================================='
         );
      fnd_file.put_line (fnd_file.output, CHR (10));
      fnd_file.put_line (fnd_file.output, 'Parameters');
      fnd_file.put_line (fnd_file.output,
                         '---------------------------------------------'
                        );
      fnd_file.put_line (fnd_file.output,
                         'Run Mode            : ' || g_run_mode
                        );
      fnd_file.put_line (fnd_file.output,
                         'Batch ID            : ' || g_new_batch_id
                        );
      fnd_file.put_line (fnd_file.output,
                         'Process records     : ' || g_process_records
                        );
      fnd_file.put_line (fnd_file.output, CHR (10));
      fnd_file.put_line
         (fnd_file.output,
          '============================================================================================='
         );
      fnd_file.put_line (fnd_file.output,
                         'Statistics (' || g_run_mode || '):');
      fnd_file.put_line
         (fnd_file.output,
          '============================================================================================='
         );

      -- Get COUNTS for Customer
      IF g_entity = g_customer
      THEN
         fnd_file.put_line (fnd_file.output,
                               'Records Counts for table   : '
                            || 'XXAR_CUSTOMERS_STG'
                           );

         --count for all the records which are loaded
         SELECT COUNT (1)
           INTO l_new_count
           FROM xxar_customer_stg xcs
          WHERE xcs.process_flag IS NULL;

         --count for all the records processed
         SELECT COUNT (1)
           INTO l_tot_val1
           FROM xxar_customer_stg xcs
          WHERE xcs.batch_id = NVL (g_new_batch_id, xcs.batch_id)
            AND xcs.run_sequence_id =
                                   NVL (g_new_run_seq_id, xcs.run_sequence_id);

         --count for all the records which errored out while validating
         SELECT COUNT (1)
           INTO l_err_val1
           FROM xxar_customer_stg xcs
          WHERE xcs.batch_id = NVL (g_new_batch_id, xcs.batch_id)
            AND xcs.run_sequence_id =
                                   NVL (g_new_run_seq_id, xcs.run_sequence_id)
            AND xcs.process_flag = g_error
            AND xcs.ERROR_TYPE = g_val_err_type;

         --count for all the records which errored out while importing
         SELECT COUNT (1)
           INTO l_err_imp1
           FROM xxar_customer_stg xcs
          WHERE xcs.batch_id = NVL (g_new_batch_id, xcs.batch_id)
            AND xcs.run_sequence_id =
                                   NVL (g_new_run_seq_id, xcs.run_sequence_id)
            AND xcs.process_flag = g_error
            AND xcs.ERROR_TYPE = g_imp_err_type;

         --count for all the records which successfully got validated
         SELECT COUNT (1)
           INTO l_pass_val1
           FROM xxar_customer_stg xcs
          WHERE xcs.batch_id = NVL (g_new_batch_id, xcs.batch_id)
            AND xcs.run_sequence_id =
                                   NVL (g_new_run_seq_id, xcs.run_sequence_id)
            AND xcs.process_flag = g_validated;

         --count for all the records which successfully got converted
         SELECT COUNT (1)
           INTO l_pass_imp1
           FROM xxar_customer_stg xcs
          WHERE xcs.batch_id = NVL (g_new_batch_id, xcs.batch_id)
            AND xcs.run_sequence_id =
                                   NVL (g_new_run_seq_id, xcs.run_sequence_id)
            AND xcs.process_flag = g_converted;
      END IF;

      -- Get COUNTS for customer_site
      IF g_entity = g_customer_site
         AND g_table_name = 'XXAR_CUSTOMER_SITE_STG'
      THEN
         fnd_file.put_line (fnd_file.output,
                            'Records Counts for table   : ' || g_table_name
                           );

         --count for all the records which are loaded
         SELECT COUNT (1)
           INTO l_new_count
           FROM xxar_customer_site_stg xcss
          WHERE xcss.process_flag IS NULL;

         --count for all the records processed
         SELECT COUNT (1)
           INTO l_tot_val1
           FROM xxar_customer_site_stg xcss
          WHERE xcss.batch_id = NVL (g_new_batch_id, xcss.batch_id)
            AND xcss.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcss.run_sequence_id);

         --count for all the records which errored out while validating
         SELECT COUNT (1)
           INTO l_err_val1
           FROM xxar_customer_site_stg xcss
          WHERE xcss.batch_id = NVL (g_new_batch_id, xcss.batch_id)
            AND xcss.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcss.run_sequence_id)
            AND xcss.process_flag = g_error
            AND xcss.ERROR_TYPE = g_val_err_type;

         --count for all the records which errored out while importing
         SELECT COUNT (1)
           INTO l_err_imp1
           FROM xxar_customer_site_stg xcss
          WHERE xcss.batch_id = NVL (g_new_batch_id, xcss.batch_id)
            AND xcss.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcss.run_sequence_id)
            AND xcss.process_flag = g_error
            AND xcss.ERROR_TYPE = g_imp_err_type;

         --count for all the records which successfully got validated
         SELECT COUNT (1)
           INTO l_pass_val1
           FROM xxar_customer_site_stg xcss
          WHERE xcss.batch_id = NVL (g_new_batch_id, xcss.batch_id)
            AND xcss.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcss.run_sequence_id)
            AND xcss.process_flag = g_validated;

         --count for all the records which successfully got converted
         SELECT COUNT (1)
           INTO l_pass_imp1
           FROM xxar_customer_site_stg xcss
          WHERE xcss.batch_id = NVL (g_new_batch_id, xcss.batch_id)
            AND xcss.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcss.run_sequence_id)
            AND xcss.process_flag = g_converted;
      END IF;

      IF     g_entity = g_customer_site
         AND g_table_name = 'XXAR_CUSTOMER_PROF_AMNT_STG'
      THEN
         fnd_file.put_line (fnd_file.output,
                            'Records Counts for table   : ' || g_table_name
                           );

         --count for all the records which are loaded
         SELECT COUNT (1)
           INTO l_new_count
           FROM xxar_customer_prof_amnt_stg xcs
          WHERE xcs.process_flag IS NULL;

         --count for all the records processed
         SELECT COUNT (1)
           INTO l_tot_val1
           FROM xxar_customer_prof_amnt_stg xcss
          WHERE xcss.batch_id = NVL (g_new_batch_id, xcss.batch_id)
            AND xcss.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcss.run_sequence_id);

         --count for all the records which errored out while validating
         SELECT COUNT (1)
           INTO l_err_val1
           FROM xxar_customer_prof_amnt_stg xcss
          WHERE xcss.batch_id = NVL (g_new_batch_id, xcss.batch_id)
            AND xcss.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcss.run_sequence_id)
            AND xcss.process_flag = g_error
            AND xcss.ERROR_TYPE = g_val_err_type;

         --count for all the records which errored out while importing
         SELECT COUNT (1)
           INTO l_err_imp1
           FROM xxar_customer_prof_amnt_stg xcss
          WHERE xcss.batch_id = NVL (g_new_batch_id, xcss.batch_id)
            AND xcss.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcss.run_sequence_id)
            AND xcss.process_flag = g_error
            AND xcss.ERROR_TYPE = g_imp_err_type;

         --count for all the records which successfully got validated
         SELECT COUNT (1)
           INTO l_pass_val1
           FROM xxar_customer_prof_amnt_stg xcss
          WHERE xcss.batch_id = NVL (g_new_batch_id, xcss.batch_id)
            AND xcss.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcss.run_sequence_id)
            AND xcss.process_flag = g_validated;

         --count for all the records which successfully got converted
         SELECT COUNT (1)
           INTO l_pass_imp1
           FROM xxar_customer_prof_amnt_stg xcss
          WHERE xcss.batch_id = NVL (g_new_batch_id, xcss.batch_id)
            AND xcss.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcss.run_sequence_id)
            AND xcss.process_flag = g_converted;
      END IF;

      -- Get COUNTS for customer_contact
      IF g_entity = g_contact_point
      THEN
         fnd_file.put_line (fnd_file.output,
                            'Records Counts for table   : ' || g_table_name
                           );

         --count for all the records which are loaded
         SELECT COUNT (1)
           INTO l_new_count
           FROM xxar_customer_contact_stg xcs
          WHERE xcs.process_flag IS NULL;

         --count for all the records processed
         SELECT COUNT (1)
           INTO l_tot_val1
           FROM xxar_customer_contact_stg xccs
          WHERE xccs.batch_id = NVL (g_new_batch_id, xccs.batch_id)
            AND xccs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xccs.run_sequence_id);

         --count for all the records which errored out while validating
         SELECT COUNT (1)
           INTO l_err_val1
           FROM xxar_customer_contact_stg xccs
          WHERE xccs.batch_id = NVL (g_new_batch_id, xccs.batch_id)
            AND xccs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xccs.run_sequence_id)
            AND xccs.process_flag = g_error
            AND xccs.ERROR_TYPE = g_val_err_type;

         --count for all the records which errored out while importing
         SELECT COUNT (1)
           INTO l_err_imp1
           FROM xxar_customer_contact_stg xccs
          WHERE xccs.batch_id = NVL (g_new_batch_id, xccs.batch_id)
            AND xccs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xccs.run_sequence_id)
            AND xccs.process_flag = g_error
            AND xccs.ERROR_TYPE = g_imp_err_type;

         --count for all the records which successfully got validated
         SELECT COUNT (1)
           INTO l_pass_val1
           FROM xxar_customer_contact_stg xccs
          WHERE xccs.batch_id = NVL (g_new_batch_id, xccs.batch_id)
            AND xccs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xccs.run_sequence_id)
            AND xccs.process_flag = g_validated;

         --count for all the records which successfully got converted
         SELECT COUNT (1)
           INTO l_pass_imp1
           FROM xxar_customer_contact_stg xccs
          WHERE xccs.batch_id = NVL (g_new_batch_id, xccs.batch_id)
            AND xccs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xccs.run_sequence_id)
            AND xccs.process_flag = g_converted;
      END IF;

      -- Get COUNTS for cust_pay_method
      IF g_entity = g_pay_method
      THEN
         fnd_file.put_line (fnd_file.output,
                            'Records Counts for table   : ' || g_table_name
                           );

         --count for all the records which are loaded
         SELECT COUNT (1)
           INTO l_new_count
           FROM xxar_cust_pay_method_stg xcs
          WHERE xcs.process_flag = g_new;

         --count for all the records processed
         SELECT COUNT (1)
           INTO l_tot_val1
           FROM xxar_cust_pay_method_stg xcpms
          WHERE xcpms.batch_id = NVL (g_new_batch_id, xcpms.batch_id)
            AND xcpms.run_sequence_id =
                                 NVL (g_new_run_seq_id, xcpms.run_sequence_id);

         --count for all the records which errored out while validating
         SELECT COUNT (1)
           INTO l_err_val1
           FROM xxar_cust_pay_method_stg xcpms
          WHERE xcpms.batch_id = NVL (g_new_batch_id, xcpms.batch_id)
            AND xcpms.run_sequence_id =
                                 NVL (g_new_run_seq_id, xcpms.run_sequence_id)
            AND xcpms.process_flag = g_error
            AND xcpms.ERROR_TYPE = g_val_err_type;

         --count for all the records which errored out while importing
         SELECT COUNT (1)
           INTO l_err_imp1
           FROM xxar_cust_pay_method_stg xcpms
          WHERE xcpms.batch_id = NVL (g_new_batch_id, xcpms.batch_id)
            AND xcpms.run_sequence_id =
                                 NVL (g_new_run_seq_id, xcpms.run_sequence_id)
            AND xcpms.process_flag = g_error
            AND xcpms.ERROR_TYPE = g_imp_err_type;

         --count for all the records which successfully got validated
         SELECT COUNT (1)
           INTO l_pass_val1
           FROM xxar_cust_pay_method_stg xcpms
          WHERE xcpms.batch_id = NVL (g_new_batch_id, xcpms.batch_id)
            AND xcpms.run_sequence_id =
                                 NVL (g_new_run_seq_id, xcpms.run_sequence_id)
            AND xcpms.process_flag = g_validated;

         --count for all the records which successfully got converted
         SELECT COUNT (1)
           INTO l_pass_imp1
           FROM xxar_cust_pay_method_stg xcpms
          WHERE xcpms.batch_id = NVL (g_new_batch_id, xcpms.batch_id)
            AND xcpms.run_sequence_id =
                                 NVL (g_new_run_seq_id, xcpms.run_sequence_id)
            AND xcpms.process_flag = g_converted;
      END IF;

      IF g_entity = g_relation AND g_table_name = 'XXAR_ENTITY_RELATION_STG'
      THEN
         fnd_file.put_line (fnd_file.output,
                            'Records Counts for table   : ' || g_table_name
                           );

         --count for all the records which are loaded
         SELECT COUNT (1)
           INTO l_new_count
           FROM xxar_entity_relation_stg xcs
          WHERE xcs.process_flag = g_new;

         --count for all the records processed
         SELECT COUNT (1)
           INTO l_tot_val1
           FROM xxar_entity_relation_stg xers
          WHERE xers.batch_id = NVL (g_new_batch_id, xers.batch_id)
            AND xers.run_sequence_id =
                                  NVL (g_new_run_seq_id, xers.run_sequence_id);

         --count for all the records which errored out while validating
         SELECT COUNT (1)
           INTO l_err_val1
           FROM xxar_entity_relation_stg xers
          WHERE xers.batch_id = NVL (g_new_batch_id, xers.batch_id)
            AND xers.run_sequence_id =
                                  NVL (g_new_run_seq_id, xers.run_sequence_id)
            AND xers.process_flag = g_error
            AND xers.ERROR_TYPE = g_val_err_type;

         --count for all the records which errored out while importing
         SELECT COUNT (1)
           INTO l_err_imp1
           FROM xxar_entity_relation_stg xers
          WHERE xers.batch_id = NVL (g_new_batch_id, xers.batch_id)
            AND xers.run_sequence_id =
                                  NVL (g_new_run_seq_id, xers.run_sequence_id)
            AND xers.process_flag = g_error
            AND xers.ERROR_TYPE = g_imp_err_type;

         --count for all the records which successfully got validated
         SELECT COUNT (1)
           INTO l_pass_val1
           FROM xxar_entity_relation_stg xers
          WHERE xers.batch_id = NVL (g_new_batch_id, xers.batch_id)
            AND xers.run_sequence_id =
                                  NVL (g_new_run_seq_id, xers.run_sequence_id)
            AND xers.process_flag = g_validated;

         --count for all the records which successfully got converted
         SELECT COUNT (1)
           INTO l_pass_imp1
           FROM xxar_entity_relation_stg xers
          WHERE xers.batch_id = NVL (g_new_batch_id, xers.batch_id)
            AND xers.run_sequence_id =
                                  NVL (g_new_run_seq_id, xers.run_sequence_id)
            AND xers.process_flag = g_converted;
      END IF;

      IF g_entity = g_relation
         AND g_table_name = 'XXAR_CUST_ACCT_RELATION_STG'
      THEN
         fnd_file.put_line (fnd_file.output,
                            'Records Counts for table   : ' || g_table_name
                           );

         --count for all the records which are loaded
         SELECT COUNT (1)
           INTO l_new_count
           FROM xxar_cust_acct_relation_stg xcs
          WHERE xcs.process_flag = g_new;

         --count for all the records processed
         SELECT COUNT (1)
           INTO l_tot_val1
           FROM xxar_cust_acct_relation_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id);

         --count for all the records which errored out while validating
         SELECT COUNT (1)
           INTO l_err_val1
           FROM xxar_cust_acct_relation_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id)
            AND xcbs.process_flag = g_error
            AND xcbs.ERROR_TYPE = g_val_err_type;

         --count for all the records which errored out while importing
         SELECT COUNT (1)
           INTO l_err_imp1
           FROM xxar_cust_acct_relation_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id)
            AND xcbs.process_flag = g_error
            AND xcbs.ERROR_TYPE = g_imp_err_type;

         --count for all the records which successfully got validated
         SELECT COUNT (1)
           INTO l_pass_val1
           FROM xxar_cust_acct_relation_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id)
            AND xcbs.process_flag = g_validated;

         --count for all the records which successfully got converted
         SELECT COUNT (1)
           INTO l_pass_imp1
           FROM xxar_cust_acct_relation_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id)
            AND xcbs.process_flag = g_converted;
      END IF;

      IF g_entity = g_bank
      THEN
         fnd_file.put_line (fnd_file.output,
                            'Records Counts for table   : ' || g_table_name
                           );

         --count for all the records which are loaded
         SELECT COUNT (1)
           INTO l_new_count
           FROM xxar_customer_banks_stg xcs
          WHERE xcs.process_flag = g_new;

         --count for all the records processed
         SELECT COUNT (1)
           INTO l_tot_val1
           FROM xxar_customer_banks_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id);

         print_log_message_p ('l_tot_val1' || l_tot_val1);

         --count for all the records which errored out while validating
         SELECT COUNT (1)
           INTO l_err_val1
           FROM xxar_customer_banks_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id)
            AND xcbs.process_flag = g_error
            AND xcbs.ERROR_TYPE = g_val_err_type;

         print_log_message_p (   'bbb '
                              || g_val_err_type
                              || ' l_err_val1'
                              || l_err_val1
                             );

         --count for all the records which errored out while importing
         SELECT COUNT (1)
           INTO l_err_imp1
           FROM xxar_customer_banks_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id)
            AND xcbs.process_flag = g_error
            AND xcbs.ERROR_TYPE = g_imp_err_type;

         print_log_message_p (   'bbb '
                              || g_imp_err_type
                              || ' l_err_imp1'
                              || l_err_imp1
                             );

         --count for all the records which successfully got validated
         SELECT COUNT (1)
           INTO l_pass_val1
           FROM xxar_customer_banks_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id)
            AND xcbs.process_flag = g_validated;

         print_log_message_p (   'bbb '
                              || g_validated
                              || ' l_pass_val1'
                              || l_pass_val1
                             );

         --count for all the records which successfully got converted
         SELECT COUNT (1)
           INTO l_pass_imp1
           FROM xxar_customer_banks_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id)
            AND xcbs.process_flag = g_converted;

         print_log_message_p (   'bbb '
                              || g_converted
                              || ' l_pass_imp1'
                              || l_pass_imp1
                             );
      END IF;

      IF g_entity = g_branch
      THEN
         fnd_file.put_line (fnd_file.output,
                            'Records Counts for table   : ' || g_table_name
                           );

         --count for all the records which are loaded
         SELECT COUNT (1)
           INTO l_new_count
           FROM xxar_customer_branches_stg xcs
          WHERE xcs.process_flag = g_new;

         --count for all the records processed
         SELECT COUNT (1)
           INTO l_tot_val1
           FROM xxar_customer_branches_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id);

         --count for all the records which errored out while validating
         SELECT COUNT (1)
           INTO l_err_val1
           FROM xxar_customer_branches_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id)
            AND xcbs.process_flag = g_error
            AND xcbs.ERROR_TYPE = g_val_err_type;

         --count for all the records which errored out while importing
         SELECT COUNT (1)
           INTO l_err_imp1
           FROM xxar_customer_branches_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id)
            AND xcbs.process_flag = g_error
            AND xcbs.ERROR_TYPE = g_imp_err_type;

         --count for all the records which successfully got validated
         SELECT COUNT (1)
           INTO l_pass_val1
           FROM xxar_customer_branches_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id)
            AND xcbs.process_flag = g_validated;

         --count for all the records which successfully got converted
         SELECT COUNT (1)
           INTO l_pass_imp1
           FROM xxar_customer_branches_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id)
            AND xcbs.process_flag = g_converted;
      END IF;

      IF g_entity = g_account
      THEN
         fnd_file.put_line (fnd_file.output,
                            'Records Counts for table   : ' || g_table_name
                           );

         --count for all the records which are loaded
         SELECT COUNT (1)
           INTO l_new_count
           FROM xxar_customer_bankaccnts_stg xcs
          WHERE xcs.process_flag = g_new;

         --count for all the records processed
         SELECT COUNT (1)
           INTO l_tot_val1
           FROM xxar_customer_bankaccnts_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id);

         --count for all the records which errored out while validating
         SELECT COUNT (1)
           INTO l_err_val1
           FROM xxar_customer_bankaccnts_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id)
            AND xcbs.process_flag = g_error
            AND xcbs.ERROR_TYPE = g_val_err_type;

         --count for all the records which errored out while importing
         SELECT COUNT (1)
           INTO l_err_imp1
           FROM xxar_customer_bankaccnts_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id)
            AND xcbs.process_flag = g_error
            AND xcbs.ERROR_TYPE = g_imp_err_type;

         --count for all the records which successfully got validated
         SELECT COUNT (1)
           INTO l_pass_val1
           FROM xxar_customer_bankaccnts_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id)
            AND xcbs.process_flag = g_validated;

         --count for all the records which successfully got converted
         SELECT COUNT (1)
           INTO l_pass_imp1
           FROM xxar_customer_bankaccnts_stg xcbs
          WHERE xcbs.batch_id = NVL (g_new_batch_id, xcbs.batch_id)
            AND xcbs.run_sequence_id =
                                  NVL (g_new_run_seq_id, xcbs.run_sequence_id)
            AND xcbs.process_flag = g_converted;
      END IF;

      IF g_run_mode = 'LOAD-DATA'
      THEN
         NULL;
         fnd_file.put_line (fnd_file.output,
                            'Records Loaded  : ' || l_new_count
                           );
      ELSIF g_run_mode = 'VALIDATE'
      THEN
         fnd_file.put_line (fnd_file.output,
                            'Records Submitted  : ' || l_tot_val1
                           );
         fnd_file.put_line (fnd_file.output,
                            'Records Validated  : ' || l_pass_val1
                           );
         fnd_file.put_line (fnd_file.output,
                            'Records Errored    : ' || l_err_val1
                           );
      ELSIF g_run_mode = 'CONVERSION'
      THEN
         fnd_file.put_line (fnd_file.output,
                            'Records Submitted  : ' || l_tot_val1
                           );
         fnd_file.put_line (fnd_file.output,
                            'Records Imported   : ' || l_pass_imp1
                           );
         fnd_file.put_line (fnd_file.output,
                            'Records Errored    : ' || l_err_imp1
                           );
      ELSIF g_run_mode = 'RECONCILE'
      THEN
         fnd_file.put_line (fnd_file.output,
                            'Records Submitted              : ' || l_tot_val1
                           );
         fnd_file.put_line (fnd_file.output,
                            'Records Imported               : ' || l_pass_imp1
                           );
         fnd_file.put_line (fnd_file.output,
                            'Records Errored in Validation  : ' || l_err_val1
                           );
         fnd_file.put_line (fnd_file.output,
                            'Records Errored in Import      : ' || l_err_imp1
                           );
      END IF;

      fnd_file.put_line
         (fnd_file.output,
          '============================================================================================='
         );
      debug_msg_p ('STEP:5.1', 'PRINT_STATS_P',
                   'In End of Prc: PRINT_STATS_P');
   EXCEPTION
      WHEN OTHERS
      THEN
         /*       pov_ret_stats := 'E';
                pov_err_msg :=
                      'ERROR : XXAR_CUSTOMER_PKG.PRINT_STATS_P->WHEN_OTHERS->'
                   || SQLERRM; */
         debug_msg_p ('STEP:5.1', 'PRINT_STATS_P', 'Error :' || SQLERRM);
   END print_stats_p;

--
-- =============================================================================
-- Procedure: pre_validate_p
-- =============================================================================
-- This private procedure will perform pre-validations for Customer Conversion
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: MAIN_PROC_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters  : NONE
--
--  Output Parameters :
--  pov_ret_stats     : Return Status of Procedure as 'S' or 'E'
--  pov_err_msg       : Returns Error Message
--
--  Return            : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE pre_validate_p (
      pov_ret_stats   OUT NOCOPY   VARCHAR2,
      pov_err_msg     OUT NOCOPY   VARCHAR2
   )
   IS
--  Declaring local variables
      l_ou_check             VARCHAR2 (1);
      l_term_check           NUMBER;
      l_collector_check      NUMBER;
      l_cust_profile_check   NUMBER;
      l_sales_check          NUMBER;
      l_receipt_method       NUMBER;
   BEGIN
      pov_ret_stats := 'S';
      pov_err_msg := NULL;
      debug_msg_p ('STEP:3.1',
                   'PRE_VALIDATE_P',
                   'In Begin of Prc: PRE_VALIDATE_P'
                  );
      debug_msg_p ('STEP:3.2',
                   'PRE_VALIDATE_P',
                   'Checking 11i-R12 OU Mapping Lookup'
                  );

      -- Check if 11i-R12 OU Mapping Lookup is defined
      BEGIN
         SELECT 1
           INTO l_ou_check
           FROM fnd_lookup_types fl
          WHERE fl.lookup_type = g_ou_lookup;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            pov_ret_stats := 'E';
            pov_err_msg :=
               '11i-R12 Operating Unit Mapping Lookup ETN_COMMON_OU_MAP is not setup';
         WHEN OTHERS
         THEN
            pov_ret_stats := 'E';
            pov_err_msg := 'SQL Error while checking OU Lookup. ' || SQLERRM;
            debug_msg_p ('STEP:3.3',
                         'PRE_VALIDATE_P',
                         'SQL Error while checking OU Lookup. ' || SQLERRM
                        );
      END;

      debug_msg_p ('STEP:3.4',
                   'PRE_VALIDATE_P',
                   'Checking if Payment Terms are defined in R12'
                  );

      -- Check if Payment Terms are defined in R12
      BEGIN
         SELECT COUNT (1)
           INTO l_term_check
           FROM ra_terms_tl;

         IF l_term_check = 0
         THEN
            pov_ret_stats := 'E';
            pov_err_msg :=
                   pov_err_msg || ' ~~ ' || 'R12 Payment terms are not setup';
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            pov_ret_stats := 'E';
            pov_err_msg :=
                  pov_err_msg
               || ' ~~ '
               || 'SQL Error while Checking if Payment Terms are defined in R12 '
               || SQLERRM;
            debug_msg_p
               ('STEP:3.5',
                'PRE_VALIDATE_P',
                   'SQL Error while cChecking if Payment Terms are defined in R12. '
                || SQLERRM
               );
      END;

      debug_msg_p ('STEP:3.6',
                   'PRE_VALIDATE_P',
                   'Checking if AR Collector is setup'
                  );

      -- Checking if AR Collector is setup
      BEGIN
         SELECT COUNT (1)
           INTO l_collector_check
           FROM ar_collectors
          WHERE NAME <> 'Default Collector';

         IF l_collector_check = 0
         THEN
            pov_ret_stats := 'E';
            pov_err_msg :=
                         pov_err_msg || ' ~~ ' || 'AR Collector is not setup';
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            pov_ret_stats := 'E';
            pov_err_msg :=
                  pov_err_msg
               || ' ~~ '
               || 'SQL Error while checking if AR Collector is setup '
               || SQLERRM;
            debug_msg_p
                      ('STEP:3.7',
                       'PRE_VALIDATE_P',
                          'SQL Error while Checking if AR Collector is setup '
                       || SQLERRM
                      );
      END;

      debug_msg_p ('STEP:3.7',
                   'PRE_VALIDATE_P',
                   'Checking if Customer Profile Class is setup'
                  );

      -- Check if Customer Profile Class is setup
      BEGIN
         SELECT COUNT (1)
           INTO l_cust_profile_check
           FROM hz_cust_profile_classes
          WHERE NAME <> 'DEFAULT';

         IF l_cust_profile_check = 0
         THEN
            pov_ret_stats := 'E';
            pov_err_msg :=
               pov_err_msg || ' ~~ ' || 'Customer Profile Class is not setup';
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            pov_ret_stats := 'E';
            pov_err_msg :=
                  pov_err_msg
               || ' ~~ '
               || 'SQL Error while checking Customer Profile Class '
               || SQLERRM;
            debug_msg_p ('STEP:3.8',
                         'PRE_VALIDATE_P',
                            'SQL Error while checking Customer Profile Class '
                         || SQLERRM
                        );
      END;

      debug_msg_p
         ('STEP:3.9',
          'PRE_VALIDATE_P',
          'Checking if Sales Channel Values are setup in SALES_CHANNEL lookup'
         );

      -- Check if Sales Channel Values are setup in SALES_CHANNEL lookup
      BEGIN
         SELECT COUNT (1)
           INTO l_sales_check
           FROM fnd_lookup_values
          WHERE lookup_type = 'SALES_CHANNEL' AND enabled_flag = 'Y';

         IF l_sales_check = 0
         THEN
            pov_ret_stats := 'E';
            pov_err_msg :=
                pov_err_msg || ' ~~ ' || 'Sales Channel Values are not setup';
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            pov_ret_stats := 'E';
            pov_err_msg :=
                  pov_err_msg
               || ' ~~ '
               || 'SQL Error while checking SALES_CHANNEL '
               || SQLERRM;
            debug_msg_p ('STEP:3.8',
                         'PRE_VALIDATE_P',
                         'SQL Error while checking SALES_CHANNEL ' || SQLERRM
                        );
      END;

      debug_msg_p ('STEP:3.10',
                   'PRE_VALIDATE_P',
                   'Checking if Reciept Methods are Setup'
                  );

      -- Checking if Reciept Methods are Setup
      BEGIN
         SELECT COUNT (1)
           INTO l_receipt_method
           FROM ar_receipt_methods;

         IF l_receipt_method = 0
         THEN
            pov_ret_stats := 'E';
            pov_err_msg :=
                     pov_err_msg || ' ~~ ' || 'Reciept Methods are not setup';
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            pov_ret_stats := 'E';
            pov_err_msg :=
                  pov_err_msg
               || ' ~~ '
               || 'SQL Error while checking Reciept Methods '
               || SQLERRM;
            debug_msg_p ('STEP:3.8',
                         'PRE_VALIDATE_P',
                         'SQL Error while checking Reciept Methods '
                         || SQLERRM
                        );
      END;
   EXCEPTION
      WHEN OTHERS
      THEN
         pov_ret_stats := 'E';
         pov_err_msg :=
               pov_err_msg
            || ' ~~ '
            || 'ERROR : XXAR_CUSTOMER_PKG.PRE_VALIDATE_P->WHEN_OTHERS->'
            || SQLERRM;
   END pre_validate_p;

--
-- =============================================================================
-- Function: mandatory_check_f
-- =============================================================================
-- This private procedure will perform mandatory check for Not NULL fields
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: VALIDATE_CUSTOMERS_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters  : piv_field     Field to be checked for Mandatory value
--                      pi_source_rec Error Table Record Type
--
--  Output Parameters : NONE
--
--  Return            : BOOLEAN
-- -----------------------------------------------------------------------------
   FUNCTION mandatory_check_f (
      piv_field       IN   VARCHAR2,
      pi_source_rec   IN   xxetn_common_error_pkg.g_source_rec_type
   )
      RETURN BOOLEAN
   IS
      l_log_ret_stats   VARCHAR2 (10);
      l_log_err_msg     VARCHAR2 (2000);
   BEGIN
      IF TRIM (piv_field) IS NULL
      THEN
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => pi_source_rec
                      );

         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
               (   'Not able to insert error details in Common Error Table. '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;

         RETURN TRUE;
      ELSE
         RETURN FALSE;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         print_log_message_p
             (   'ERROR : XXAR_CUSTOMER_PKG.MANDATORY_CHECK_F->WHEN_OTHERS->'
              || SQLERRM
             );
         RETURN TRUE;
   END mandatory_check_f;

--
-- =============================================================================
-- Procedure: derive_r12_ou_p
-- =============================================================================
-- This private procedure will derive R12 OU based on Legacy OU provided in Extraction
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: VALIDATE_SITES_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters  :
--  piv_leg_ou_name   : Legacy Operating Unit Name
--
--  Output Parameters :
--  pov_ou_name       : Returns R12 Operating Unit Name
--  pov_status        : Returns Status of Validation as 'S' or 'E'
--  pov_error_code    : Returns Error Code
--  pov_error_message : Returns Error Message
--
--  Return            : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE derive_r12_ou_p (
      pov_ou_name         OUT NOCOPY      VARCHAR2,
      pov_status          OUT NOCOPY      VARCHAR2,
      pov_error_code      OUT NOCOPY      VARCHAR2,
      pov_error_message   OUT NOCOPY      VARCHAR2,
      piv_leg_ledger      IN              VARCHAR2,
      piv_source_system   IN              VARCHAR2
   )
   IS
      l_oper_unit    xxetn_map_unit.operating_unit%TYPE;
      l_input_rec    xxetn_map_util.g_input_rec;
      l_output_rec   xxetn_map_util.g_output_rec;
   BEGIN
      pov_ou_name := NULL;
      pov_status := 'S';
      pov_error_code := NULL;
      pov_error_message := NULL;

      IF piv_source_system IN ('ISSC', 'SASC')
      THEN
         -- Deriving R12 OU based on Legacy site ledger
         BEGIN
            l_input_rec.site := piv_leg_ledger;
            l_output_rec := xxetn_map_util.get_value (l_input_rec);
            l_oper_unit := l_output_rec.operating_unit;

            IF l_oper_unit IS NULL
            THEN
               pov_status := g_error;
               pov_ou_name := NULL;
               pov_error_code := 'INVALID_SITE';
               pov_error_message :=
                  'R12 Operating Unit does not exist in XXETN_MAP_UNIT_V for Legacy Site';
            ELSE
               pov_ou_name := l_oper_unit;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               pov_status := g_error;
               pov_ou_name := NULL;
               pov_error_code := 'INVALID_SITE';
               pov_error_message :=
                  'R12 Operating Unit does not exist in XXETN_MAP_UNIT_V for Legacy Site';
            WHEN TOO_MANY_ROWS
            THEN
               pov_status := g_error;
               pov_ou_name := NULL;
               pov_error_code := 'TOO_MANY_SITE';
               pov_error_message :=
                  'Too Many R12 Operating Units exist in XXETN_MAP_UNIT_V for Legacy Site';
            WHEN OTHERS
            THEN
               pov_status := g_error;
               pov_ou_name := NULL;
               pov_error_code := 'SQL_ERR_SITE';
               pov_error_message :=
                     'SQL Error occured while deriving R12 Operating Units in XXETN_MAP_UNIT_V for Legacy Site. ERROR: '
                  || SQLERRM;
         END;
      ELSIF piv_source_system = 'FSC'
      THEN
         BEGIN
            -- Select from ETN Map Unit Table
            SELECT DISTINCT operating_unit
                       INTO l_oper_unit
                       FROM xxetn_map_unit
                      WHERE ar_credit_office = piv_leg_ledger
                        AND TRUNC (SYSDATE) BETWEEN NVL (start_date_active,
                                                         SYSDATE - 1
                                                        )
                                                AND NVL (end_date_active,
                                                         SYSDATE + 1
                                                        )
                        AND enabled_flag = 'Y'
                        AND ROWNUM = 1;

            -- Added rownum to avoid the issue while Credit_office has multiple Orgs
            pov_ou_name := l_oper_unit;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               pov_status := g_error;
               pov_ou_name := NULL;
               pov_error_code := 'INVALID_CREDIT_OFC';
               pov_error_message :=
                  'R12 Operating Unit does not exist in XXETN_MAP_UNIT for Legacy Credit Office';
            WHEN TOO_MANY_ROWS
            THEN
               pov_status := g_error;
               pov_ou_name := NULL;
               pov_error_code := 'MULTIPLE_CREDIT_OFC';
               pov_error_message :=
                  'Too Many R12 Operating Units exist in XXETN_MAP_UNIT for Legacy Credit Office';
            WHEN OTHERS
            THEN
               pov_status := g_error;
               pov_ou_name := NULL;
               pov_error_code := 'SQL_ERR_CREDIT_OFC';
               pov_error_message :=
                     'SQL Error occured while deriving R12 Operating Units in XXETN_MAP_UNIT for Legacy Credit Office. ERROR: '
                  || SQLERRM;
         END;
      ELSE
         NULL;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         print_log_message_p
               (   'ERROR : XXAR_CUSTOMER_PKG.DERIVE_R12_OU_P->WHEN_OTHERS->'
                || SQLERRM
               );
   END derive_r12_ou_p;

--
-- =============================================================================
-- Procedure: derive_org_id_p
-- =============================================================================
-- This private procedure will derive Org ID based on R12 Operating Unit
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: VALIDATE_SITES_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters  :
--  piv_ou_name       : R12 Operating Unit Name
--
--  Output Parameters :
--  pon_org_id        : Returns R12 Organization Id
--  pov_status        : Returns Status of Validation as 'S' or 'E'
--  pov_error_code    : Returns Error Code
--  pov_error_message : Returns Error Message
--
--  Return            : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE derive_org_id_p (
      pon_org_id          OUT NOCOPY      NUMBER,
      pov_status          OUT NOCOPY      VARCHAR2,
      pov_error_code      OUT NOCOPY      VARCHAR2,
      pov_error_message   OUT NOCOPY      VARCHAR2,
      piv_ou_name         IN              VARCHAR2
   )
   IS
   BEGIN
      pon_org_id := NULL;
      pov_status := 'S';
      pov_error_code := NULL;
      pov_error_message := NULL;

      -- Deriving Org Id based on R12 OU
      BEGIN
         SELECT hou.organization_id
           INTO pon_org_id
           FROM hr_operating_units hou
          WHERE UPPER (hou.NAME) = UPPER (piv_ou_name)
            AND TRUNC (NVL (hou.date_to, SYSDATE)) >= TRUNC (SYSDATE);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            pov_status := g_error;
            pon_org_id := -1;
            pov_error_code := 'INVALID_R12_OU';
            pov_error_message :=
                             'No Org id exist for derived R12 Operating Unit';
         WHEN TOO_MANY_ROWS
         THEN
            pov_status := g_error;
            pon_org_id := -1;
            pov_error_code := 'TOO_MANY_R12_OU';
            pov_error_message :=
                       'Too Many Org id exist for derived R12 Operating Unit';
         WHEN OTHERS
         THEN
            pov_status := g_error;
            pon_org_id := -1;
            pov_error_code := 'SQL_ERR_R12_OU';
            pov_error_message :=
                  'SQL Error occured while deriving Org id for R12 Operating Unit. ERROR: '
               || SQLERRM;
      END;
   EXCEPTION
      WHEN OTHERS
      THEN
         print_log_message_p
             (   'ERROR : XXAR_CONVERSION_PKG.DERIVE_ORG_ID_P->WHEN_OTHERS->'
              || SQLERRM
             );
   END derive_org_id_p;

--
-- =============================================================================
-- Procedure: derive_term_id_p
-- =============================================================================
-- This private procedure will derive R12 Payment Term Details
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: VALIDATE_SITES_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters  :
--  piv_leg_term_name : Legacy Payment team name
--
--  Output Parameters :
--  pon_term_id       : Returns R12 Term ID
--  pon_term_name     : Returns R12 Term Name
--  pov_status        : Returns Status of Validation as 'S' or 'E'
--  pov_error_code    : Returns Error Code
--  pov_error_message : Returns Error Message
--
--  Return            : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE derive_term_id_p (
      pon_term_id         OUT NOCOPY      NUMBER,
      pov_term_name       OUT NOCOPY      VARCHAR2,
      pov_status          OUT NOCOPY      VARCHAR2,
      pov_error_code      OUT NOCOPY      VARCHAR2,
      pov_error_message   OUT NOCOPY      VARCHAR2,
      piv_leg_term_name   IN              VARCHAR2
   )
   IS
      l_term_name_r12   VARCHAR2 (240);
   BEGIN
      pov_status := 'S';
      pov_error_code := NULL;
      pov_error_message := NULL;

      BEGIN
         SELECT description
           INTO l_term_name_r12
           FROM fnd_lookup_values
          WHERE lookup_type = 'ETN_AR_PAYMENT_TERMS'
            AND LANGUAGE = 'US'
            AND meaning = piv_leg_term_name;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            pov_status := g_error;
            pov_term_name := NULL;
            pov_error_code := 'NO_PAYMENT_TERM_MAPPING';
            pov_error_message := 'Payment term mapping defined in R12';
         WHEN TOO_MANY_ROWS
         THEN
            pov_status := g_error;
            pov_term_name := NULL;
            pov_error_code := 'NO_PAYMENT_TERM_MAPPING';
            pov_error_message :=
                               'Too Many Payment term Mapping defined in R12';
         WHEN OTHERS
         THEN
            pov_status := g_error;
            pov_term_name := NULL;
            pov_error_code := 'SQL_PAYMENT_TERM';
            pov_error_message :=
                  'SQL Error occured while fetching Payment term: '
               || piv_leg_term_name
               || '. Error:'
               || SQLERRM;
      END;

      IF l_term_name_r12 IS NOT NULL
      THEN
         -- Derive Term ID
         BEGIN
            SELECT rtt.term_id, rtt.NAME
              INTO pon_term_id, pov_term_name
              FROM ra_terms_tl rtt
             WHERE rtt.NAME = l_term_name_r12 AND rtt.LANGUAGE = 'US';
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               pov_status := g_error;
               pov_term_name := NULL;
               pov_error_code := 'NO_PAYMENT_TERM';
               pov_error_message := 'Payment term Not defined in R12';
            WHEN TOO_MANY_ROWS
            THEN
               pov_status := g_error;
               pov_term_name := NULL;
               pov_error_code := 'TOO_PAYMENT_TERM';
               pov_error_message := 'Too Many Payment term defined in R12';
            WHEN OTHERS
            THEN
               pov_status := g_error;
               pov_term_name := NULL;
               pov_error_code := 'SQL_PAYMENT_TERM';
               pov_error_message :=
                     'SQL Error occured while fetching Payment term: '
                  || piv_leg_term_name
                  || '. Error:'
                  || SQLERRM;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         print_log_message_p
             (   'ERROR : XXAR_CUSTOMERS_PKG.DERIVE_TERM_ID_P->WHEN_OTHERS->'
              || SQLERRM
             );
   END derive_term_id_p;

--
-- =============================================================================
-- Procedure: dervive_business_seg_p
-- =============================================================================
-- This private procedure will derive dervive business segment
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: VALIDATE_SITES_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters  :
--  piv_leg_term_name : Legacy Payment team name
--
--  Output Parameters :
--  pon_term_id       : Returns R12 Term ID
--  pon_term_name     : Returns R12 Term Name
--  pov_status        : Returns Status of Validation as 'S' or 'E'
--  pov_error_code    : Returns Error Code
--  pov_error_message : Returns Error Message
--
--  Return            : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE dervive_business_seg_p (
      piv_value           IN              VARCHAR2,
      piv_source_system   IN              VARCHAR2,
      pov_business_seg    OUT NOCOPY      VARCHAR2,
      pov_status          OUT NOCOPY      VARCHAR2,
      pov_error_code      OUT NOCOPY      VARCHAR2,
      pov_error_message   OUT NOCOPY      VARCHAR2
   )
   IS
      lv_business_seg   VARCHAR2 (240);
   BEGIN
      pov_status := 'S';
      pov_error_code := NULL;
      pov_error_message := NULL;

      IF piv_source_system IN ('ISSC', 'SASC')
      THEN
         BEGIN
            -- Select from ETN Map Unit Table
            SELECT DISTINCT CUSTOMER_SEGMENT --v1.4  populated CUSTOMER_SEGMENT instead of SEGMENT as on 19-APR-2015
                       INTO lv_business_seg
                       FROM xxetn_map_unit
                      WHERE site = piv_value
                        AND TRUNC (SYSDATE) BETWEEN NVL (start_date_active,
                                                         SYSDATE - 1
                                                        )
                                                AND NVL (end_date_active,
                                                         SYSDATE + 1
                                                        )
                        AND enabled_flag = 'Y'
                        AND CUSTOMER_SEGMENT IS NOT NULL; --v1.4  Added to Avoid Duplicate null rows

            pov_business_seg := lv_business_seg;

            IF lv_business_seg IS NOT NULL
            THEN
               pov_business_seg := lv_business_seg;
            ELSE
               pov_status := g_error;
               pov_business_seg := NULL;
               pov_error_code := 'NULL_BUSINESS_SEGMENT';
               pov_error_message :=
                   'Business Segment is NULL in R12 for Site : ' || piv_value;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               pov_status := g_error;
               pov_business_seg := NULL;
               pov_error_code := 'NO_BUSINESS_SEGMENT';
               pov_error_message :=
                     'Business Segment Not defined in R12 for Site : '
                  || piv_value;
            WHEN TOO_MANY_ROWS
            THEN
               pov_status := g_error;
               pov_business_seg := NULL;
               pov_error_code := 'TOO_MANY_BUSINESS_SEGMENT';
               pov_error_message :=
                     'Too Many Business Segment defined in R12 for Site : '
                  || piv_value;
            WHEN OTHERS
            THEN
               pov_status := g_error;
               pov_business_seg := NULL;
               pov_error_code := 'SQL_BUSINESS_SEGMENT';
               pov_error_message :=
                     'SQL Error occured while fetching Business Segment: '
                  || piv_value
                  || '. Error:'
                  || SQLERRM;
         END;
      ELSIF piv_source_system = 'FSC'
      THEN
         BEGIN
            -- Select from ETN Map Unit Table
            SELECT DISTINCT CUSTOMER_SEGMENT --v1.4 populated CUSTOMER_SEGMENT instead of SEGMENT as on 19-APR-2015
                       INTO lv_business_seg
                       FROM xxetn_map_unit
                      WHERE ar_credit_office = piv_value
                        AND TRUNC (SYSDATE) BETWEEN NVL (start_date_active,
                                                         SYSDATE - 1
                                                        )
                                                AND NVL (end_date_active,
                                                         SYSDATE + 1
                                                        )
                        AND enabled_flag = 'Y'
                        AND CUSTOMER_SEGMENT IS NOT NULL; --v1.4  Added to Avoid Duplicate null rows

            IF lv_business_seg IS NOT NULL
            THEN
               pov_business_seg := lv_business_seg;
            ELSE
               pov_status := g_error;
               pov_business_seg := NULL;
               pov_error_code := 'NULL_BUSINESS_SEGMENT';
               pov_error_message :=
                     'Business Segment is NULL in R12 for Credit Ofc : '
                  || piv_value;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               pov_status := g_error;
               pov_business_seg := NULL;
               pov_error_code := 'NO_BUSINESS_SEGMENT';
               pov_error_message :=
                     'Business Segment Not defined in R12 for Credit Ofc : '
                  || piv_value;
            WHEN TOO_MANY_ROWS
            THEN
               pov_status := g_error;
               pov_business_seg := NULL;
               pov_error_code := 'TOO_MANY_BUSINESS_SEGMENT';
               pov_error_message :=
                     'Too Many Business Segment defined in R12 for Credit Ofc : '
                  || piv_value;
            WHEN OTHERS
            THEN
               pov_status := g_error;
               pov_business_seg := NULL;
               pov_error_code := 'SQL_BUSINESS_SEGMENT';
               pov_error_message :=
                     'SQL Error occured while fetching Business Segment: '
                  || piv_value
                  || '. Error:'
                  || SQLERRM;
         END;
      ELSE
         NULL;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         print_log_message_p
             (   'ERROR : XXAR_CUSTOMERS_PKG.DERIVE_TERM_ID_P->WHEN_OTHERS->'
              || SQLERRM
             );
   END dervive_business_seg_p;

-- <AP>
   --
   -- ========================
   -- Procedure: mandatory_value_check_bank
   -- =============================================================================
   --   This procedure to do mandatory value check
   -- =============================================================================
   --  Input Parameters :
   --   piv_bank_name
   --   piv_bank_number
   --   piv_country
   --   piv_bank_institution_type
   --   piv_address1
   --   pon_error_cnt

   --  Output Parameters :
--   pon_error_cnt    : Return Error Count
-- -----------------------------------------------------------------------------
--
   PROCEDURE mandatory_value_check_bank (
      piv_bank_name               IN       VARCHAR2,
      piv_bank_number             IN       VARCHAR2,
      piv_country                 IN       VARCHAR2,
      piv_bank_institution_type   IN       VARCHAR2,
      -- pin_interface_txn_id        IN       NUMBER, -- Ankur
      pi_source_rec               IN       xxetn_common_error_pkg.g_source_rec_type,
      -- Ankur
      pon_error_cnt               OUT      NUMBER
   )
   IS
      l_record_cnt      NUMBER;
      l_err_msg         VARCHAR2 (2000);
      l_log_ret_stats   VARCHAR2 (50);
      l_log_err_msg     VARCHAR2 (2000);
      l_err_code        VARCHAR2 (40)                            := NULL;
      -- Error Table Record Type
      source_rec        xxetn_common_error_pkg.g_source_rec_type;
   BEGIN
      source_rec := pi_source_rec;
      xxetn_debug_pkg.add_debug ('   PROCEDURE : mandatory_value_check_bank');
      l_record_cnt := 0;
      l_err_msg := NULL;
      l_log_ret_stats := NULL;
      l_log_err_msg := NULL;
      l_err_code := NULL;
      debug_msg_p ('1', '1', '6');

      --source_rec.interface_txn_id :=  pin_interface_txn_id;
      IF piv_bank_name IS NULL
      THEN
         l_record_cnt := 2;
         xxetn_debug_pkg.add_debug ('Mandatory Value missing on record.');
         source_rec.source_column_name := 'LEG_BANK_NAME';
         source_rec.source_column_value := piv_bank_name;
         source_rec.ERROR_CODE := 'ETN_AR_MANDATORY_NOT_ENTERED';
         source_rec.error_message :=
                                  'Error: Mandatory Value missing on record.';
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );

         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
               (   'Not able to insert error details in Common Error Table for record: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;
      END IF;

       --Mandatory Column check
      /* IF piv_bank_number IS NULL
       THEN
          l_record_cnt := 2;
          xxetn_debug_pkg.add_debug ('Mandatory Value missing on record.');
          source_rec.source_column_name := 'LEG_BANK_NUMBER';
          source_rec.source_column_value := piv_bank_number;
          source_rec.ERROR_CODE := 'ETN_AR_MANDATORY_NOT_ENTERED';
          source_rec.error_message :=
                                   'Error: Mandatory Value missing on record.';
          log_errors_p (pov_ret_stats      => l_log_ret_stats,
                        pov_err_msg        => l_log_err_msg,
                        pi_err_rec         => source_rec
                       );

          IF l_log_ret_stats <> 'S'
          THEN
             print_log_message_p
                (   'Not able to insert error details in Common Error Table for record: '
                 || 'Error: '
                 || l_log_err_msg
                );
          END IF;
       END IF;*/

      --Mandatory Column check
      IF piv_country IS NULL
      THEN
         l_record_cnt := 2;
         xxetn_debug_pkg.add_debug ('Mandatory Value missing on record.');
         source_rec.source_column_name := 'LEG_COUNTRY';
         source_rec.source_column_value := piv_country;
         source_rec.ERROR_CODE := 'ETN_AR_MANDATORY_NOT_ENTERED';
         source_rec.error_message :=
                                  'Error: Mandatory Value missing on record.';
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );

         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
               (   'Not able to insert error details in Common Error Table for record: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;
      END IF;

      --Mandatory Column check
      IF piv_bank_institution_type IS NULL
      THEN
         l_record_cnt := 2;
         xxetn_debug_pkg.add_debug ('Mandatory Value missing on record.');
         source_rec.source_column_name := 'LEG_BANK_INSTITUTION_TYPE';
         source_rec.source_column_value := piv_bank_institution_type;
         source_rec.ERROR_CODE := 'ETN_AR_MANDATORY_NOT_ENTERED';
         source_rec.error_message :=
                                  'Error: Mandatory Value missing on record.';
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );

         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
               (   'Not able to insert error details in Common Error Table for record: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;
      END IF;

      IF l_record_cnt > 1
      THEN
         pon_error_cnt := 2;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
         pon_error_cnt := 2;
         print_log_message_p
                          (   'In Exception mandatory_value_check_bank check'
                           || SQLERRM
                          );
   END mandatory_value_check_bank;

--
-- ========================
-- Procedure: mandatory_value_check_branch
-- =============================================================================
--   This procedure to do mandatory value check
-- =============================================================================
--  Input Parameters :
--   piv_bank_name
--   piv_bank_number
--   piv_country
--   piv_bank_institution_type
--   piv_address1
--   pon_error_cnt

   --  Output Parameters :
--   pon_error_cnt    : Return Error Count
-- -----------------------------------------------------------------------------
--
   PROCEDURE mandatory_value_check_branch (
      piv_branch_name        IN       VARCHAR2,
      piv_bank_name          IN       VARCHAR2,
      piv_branch_number      IN       VARCHAR2,
      piv_country            IN       VARCHAR2,
      piv_branch_type        IN       VARCHAR2,
      pin_interface_txn_id   IN       NUMBER,
      pon_error_cnt          OUT      NUMBER
   )
   IS
      l_record_cnt      NUMBER;
      l_err_msg         VARCHAR2 (2000);
      l_log_ret_stats   VARCHAR2 (50);
      l_log_err_msg     VARCHAR2 (2000);
      l_err_code        VARCHAR2 (40)                            := NULL;
      -- Error Table Record Type
      source_rec        xxetn_common_error_pkg.g_source_rec_type;
   BEGIN
      xxetn_debug_pkg.add_debug
                               ('   PROCEDURE : mandatory_value_check_branch');
      l_record_cnt := 0;
      l_log_ret_stats := NULL;
      l_log_err_msg := NULL;
      source_rec.interface_staging_id := pin_interface_txn_id;

      IF piv_branch_name IS NULL
      THEN
         l_record_cnt := 2;
         xxetn_debug_pkg.add_debug ('Mandatory Value missing on record.');
         source_rec.source_column_name := 'LEG_BANK_BRANCH_NAME';
         source_rec.source_column_value := piv_branch_name;
         source_rec.ERROR_CODE := 'ETN_AR_MANDATORY_NOT_ENTERED';
         source_rec.error_message :=
                                  'Error: Mandatory Value missing on record.';
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );

         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
               (   'Not able to insert error details in Common Error Table for record: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;
      END IF;

      IF piv_bank_name IS NULL
      THEN
         l_record_cnt := 2;
         xxetn_debug_pkg.add_debug ('Mandatory Value missing on record.');
         source_rec.source_column_name := 'LEG_BANK_NAME';
         source_rec.source_column_value := piv_bank_name;
         source_rec.ERROR_CODE := 'ETN_AR_MANDATORY_NOT_ENTERED';
         source_rec.error_message :=
                                  'Error: Mandatory Value missing on record.';
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );

         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
               (   'Not able to insert error details in Common Error Table for record: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;
      END IF;

      --Mandatory Column check
/*      IF piv_branch_number IS NULL
      THEN
         l_record_cnt := 2;
         xxetn_debug_pkg.add_debug ('Mandatory Value missing on record.');
         source_rec.source_column_name := 'BRANCH_NUMBER';
         source_rec.source_column_value := piv_branch_number;
         source_rec.ERROR_CODE := 'ETN_AR_MANDATORY_NOT_ENTERED';
         source_rec.error_message :=
                                  'Error: Mandatory Value missing on record.';
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );

         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
               (   'Not able to insert error details in Common Error Table for record: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;
      END IF;
*/
      --Mandatory Column check
      IF piv_country IS NULL
      THEN
         l_record_cnt := 2;
         xxetn_debug_pkg.add_debug ('Mandatory Value missing on record.');
         source_rec.source_column_name := 'LEG_COUNTRY';
         source_rec.source_column_value := piv_country;
         source_rec.ERROR_CODE := 'ETN_AR_MANDATORY_NOT_ENTERED';
         source_rec.error_message :=
                                  'Error: Mandatory Value missing on record.';
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );

         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
               (   'Not able to insert error details in Common Error Table for record: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;
      END IF;

      --Mandatory Column check
      IF piv_branch_type IS NULL
      THEN
         l_record_cnt := 2;
         xxetn_debug_pkg.add_debug ('Mandatory Value missing on record.');
         source_rec.source_column_name := 'LEG_BANK_BRANCH_TYPE';
         source_rec.source_column_value := piv_branch_type;
         source_rec.ERROR_CODE := 'ETN_AR_MANDATORY_NOT_ENTERED';
         source_rec.error_message :=
                                  'Error: Mandatory Value missing on record.';
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );

         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
               (   'Not able to insert error details in Common Error Table for record: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;
      END IF;

      IF l_record_cnt > 1
      THEN
         pon_error_cnt := 2;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
         pon_error_cnt := 2;
         print_log_message_p
                        (   'In Exception mandatory_value_check_branch check'
                         || SQLERRM
                        );
   END mandatory_value_check_branch;

--
-- ========================
-- Procedure: mandatory_value_check_account
-- =============================================================================
--   This procedure to do mandatory value check
-- =============================================================================
--  Input Parameters :
--   leg_bank_name
--   leg_branch_name
--   leg_customer_name
--   leg_country
--   leg_account_name
--   leg_account_num
--   leg_operating_unit
--   leg_account_type
--   Output Parameters :
--   pon_error_cnt    : Return Error Count
-- -----------------------------------------------------------------------------
--
   PROCEDURE mandatory_value_check_account (
      piv_bank_name       IN       VARCHAR2,
      piv_branch_name     IN       VARCHAR2,
      piv_customer_name   IN       VARCHAR2,
--      piv_country          IN       VARCHAR2,
      piv_account_name    IN       VARCHAR2,
      piv_account_num     IN       VARCHAR2,
--      piv_operating_unit   IN       VARCHAR2,
      piv_account_type    IN       VARCHAR2,
      pon_error_cnt       OUT      NUMBER
   )
   IS
      l_record_cnt      NUMBER;
      l_err_msg         VARCHAR2 (2000);
      l_log_ret_stats   VARCHAR2 (50);
      l_log_err_msg     VARCHAR2 (2000);
      l_err_code        VARCHAR2 (40)                            := NULL;
      -- Error Table Record Type
      source_rec        xxetn_common_error_pkg.g_source_rec_type;
   BEGIN
      xxetn_debug_pkg.add_debug
                              ('   PROCEDURE : mandatory_value_check_account');
      l_record_cnt := 0;
      l_err_msg := NULL;
      l_log_ret_stats := NULL;
      l_log_err_msg := NULL;
      l_err_code := NULL;
      xxetn_debug_pkg.add_debug ('   Check bank_name');

      IF piv_bank_name IS NULL
      THEN
         l_record_cnt := 2;
         xxetn_debug_pkg.add_debug ('Mandatory Value missing on record.');
         source_rec.source_column_name := 'LEG_BANK_NAME';
         source_rec.source_column_value := piv_bank_name;
         source_rec.ERROR_CODE := 'ETN_AR_MANDATORY_NOT_ENTERED';
         source_rec.error_message :=
                                  'Error: Mandatory Value missing on record.';
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );

         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
               (   'Not able to insert error details in Common Error Table for record: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;
      END IF;

      xxetn_debug_pkg.add_debug ('   Check branch_name');

      IF piv_branch_name IS NULL
      THEN
         l_record_cnt := 2;
         xxetn_debug_pkg.add_debug ('Mandatory Value missing on record.');
         source_rec.source_column_name := 'LEG_BRANCH_NAME';
         source_rec.source_column_value := piv_branch_name;
         source_rec.ERROR_CODE := 'ETN_AR_MANDATORY_NOT_ENTERED';
         source_rec.error_message :=
                                  'Error: Mandatory Value missing on record.';
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );

         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
               (   'Not able to insert error details in Common Error Table for record: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;
      END IF;

      xxetn_debug_pkg.add_debug ('   Check customer_name');

      --Mandatory Column check
      IF piv_customer_name IS NULL
      THEN
         l_record_cnt := 2;
         xxetn_debug_pkg.add_debug ('Mandatory Value missing on record.');
         source_rec.source_column_name := 'LEG_CUSTOMER_NAME';
         source_rec.source_column_value := piv_customer_name;
         source_rec.ERROR_CODE := 'ETN_AR_MANDATORY_NOT_ENTERED';
         source_rec.error_message :=
                                  'Error: Mandatory Value missing on record.';
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );

         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
               (   'Not able to insert error details in Common Error Table for record: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;
      END IF;

      --Mandatory Column check
/*      IF piv_country IS NULL
      THEN
         l_record_cnt := 2;
         xxetn_debug_pkg.add_debug ('Mandatory Value missing on record.');
         source_rec.source_column_name := 'LEG_COUNTRY';
         source_rec.source_column_value := piv_country;
         source_rec.ERROR_CODE := 'ETN_AR_MANDATORY_NOT_ENTERED';
         source_rec.error_message :=
                                  'Error: Mandatory Value missing on record.';
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );

         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
               (   'Not able to insert error details in Common Error Table for record: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;
      END IF;*/
      xxetn_debug_pkg.add_debug ('   Check account_name');

      --Mandatory Column check
      IF piv_account_name IS NULL
      THEN
         l_record_cnt := 2;
         xxetn_debug_pkg.add_debug ('Mandatory Value missing on record.');
         source_rec.source_column_name := 'LEG_ACCOUNT_NAME';
         source_rec.source_column_value := piv_account_name;
         source_rec.ERROR_CODE := 'ETN_AR_MANDATORY_NOT_ENTERED';
         source_rec.error_message :=
                                  'Error: Mandatory Value missing on record.';
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );

         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
               (   'Not able to insert error details in Common Error Table for record: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;
      END IF;

      xxetn_debug_pkg.add_debug ('   Check account_num');

      --Mandatory Column check
      IF piv_account_num IS NULL
      THEN
         l_record_cnt := 2;
         xxetn_debug_pkg.add_debug ('Mandatory Value missing on record.');
         source_rec.source_column_name := 'LEG_ACCOUNT_NUM';
         source_rec.source_column_value := piv_account_num;
         source_rec.ERROR_CODE := 'ETN_AR_MANDATORY_NOT_ENTERED';
         source_rec.error_message :=
                                  'Error: Mandatory Value missing on record.';
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );

         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
               (   'Not able to insert error details in Common Error Table for record: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;
      END IF;

      --Mandatory Column check
/*      IF piv_operating_unit IS NULL
      THEN
         l_record_cnt := 2;
         xxetn_debug_pkg.add_debug ('Mandatory Value missing on record.');
         source_rec.source_column_name := 'LEG_OPERATING_UNIT';
         source_rec.source_column_value := piv_operating_unit;
         source_rec.ERROR_CODE := 'ETN_AR_MANDATORY_NOT_ENTERED';
         source_rec.error_message :=
                                  'Error: Mandatory Value missing on record.';
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );

         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
               (   'Not able to insert error details in Common Error Table for record: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;
      END IF;*/
      xxetn_debug_pkg.add_debug ('   Check account_type');

      --Mandatory Column check
      IF piv_account_type IS NULL
      THEN
         l_record_cnt := 2;
         xxetn_debug_pkg.add_debug ('Mandatory Value missing on record.');
         source_rec.source_column_name := 'LEG_ACCOUNT_TYPE';
         source_rec.source_column_value := piv_account_type;
         source_rec.ERROR_CODE := 'ETN_AR_MANDATORY_NOT_ENTERED';
         source_rec.error_message :=
                                  'Error: Mandatory Value missing on record.';
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );

         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
               (   'Not able to insert error details in Common Error Table for record: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;
      END IF;

      IF l_record_cnt > 1
      THEN
         pon_error_cnt := 2;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
         pon_error_cnt := 2;
         print_log_message_p
                       (   'In Exception mandatory_value_check_account check'
                        || SQLERRM
                       );
         xxetn_debug_pkg.add_debug
                        (   'In Exception mandatory_value_check_account check'
                         || SQLERRM
                        );
   END mandatory_value_check_account;

--
-- ========================
-- Procedure: duplicate_bank
-- =============================================================================
--   This procedure to do duplicate bank record check
-- =============================================================================
--  Input Parameters :
--   piv_bank_name
--   piv_bank_number
--   piv_country

   --  Output Parameters :
--   pon_error_cnt    : Return Error Count
-- -----------------------------------------------------------------------------
--
   PROCEDURE duplicate_bank (
      piv_bank_name     IN       VARCHAR2,
      piv_bank_number   IN       VARCHAR2,
      piv_country       IN       VARCHAR2,
      pon_error_cnt     OUT      NUMBER
   )
   IS
      l_record_cnt       NUMBER;
      l_err_msg          VARCHAR2 (2000);
      l_log_ret_status   VARCHAR2 (50);
      l_log_err_msg      VARCHAR2 (2000);
      l_err_code         VARCHAR2 (40)   := NULL;
   BEGIN
      xxetn_debug_pkg.add_debug (' + PROCEDURE : duplicate_bank +');
      l_record_cnt := 0;
      l_err_msg := NULL;
      l_log_ret_status := NULL;
      l_log_err_msg := NULL;
      l_err_code := NULL;

      --check if the duplicate bank already exists
      BEGIN
         SELECT COUNT (1)
           INTO l_record_cnt
           FROM xxar_customer_banks_stg xsbs
          WHERE xsbs.leg_bank_name = piv_bank_name
            AND xsbs.leg_country = piv_country
            AND NVL (xsbs.leg_bank_number, 'QQRR') =
                                                 NVL (piv_bank_number, 'QQRR')
            AND xsbs.batch_id = g_new_batch_id
            AND xsbs.run_sequence_id = g_new_run_seq_id
            AND xsbs.process_flag = 'V';
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            print_log_message_p
                               (   'In No Data found of duplicate bank check'
                                || SQLERRM
                               );
         WHEN OTHERS
         THEN
            l_record_cnt := 2;
            print_log_message_p (   'In When others of duplicate bank check'
                                 || SQLERRM
                                );
      END;

      IF (l_record_cnt = 1)
      THEN
         l_record_cnt := 2;
      END IF;

      IF l_record_cnt = 2
      THEN
         pon_error_cnt := 2;
      END IF;

      xxetn_debug_pkg.add_debug (' - PROCEDURE : duplicate_bank -');
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
         pon_error_cnt := 2;
         print_log_message_p ('In Exception duplicate_bank check' || SQLERRM);
   END duplicate_bank;

--
-- ========================
-- Procedure: duplicate_branch
-- =============================================================================
--   This procedure to do duplicate branch record check
-- =============================================================================
--  Input Parameters :
--   piv_bank_name
--   piv_bank_number
--   piv_country

   --  Output Parameters :
--   pon_error_cnt    : Return Error Count
-- -----------------------------------------------------------------------------
--
   PROCEDURE duplicate_branch (
      piv_bank_name     IN       VARCHAR2,
      piv_branch_name   IN       VARCHAR2,
      piv_country       IN       VARCHAR2,
      pon_error_cnt     OUT      NUMBER
   )
   IS
      l_record_cnt       NUMBER;
      l_err_msg          VARCHAR2 (2000);
      l_log_ret_status   VARCHAR2 (50);
      l_log_err_msg      VARCHAR2 (2000);
      l_err_code         VARCHAR2 (40)   := NULL;
   BEGIN
      xxetn_debug_pkg.add_debug (' + PROCEDURE : duplicate_branch +');
      l_record_cnt := 0;
      l_err_msg := NULL;
      l_log_ret_status := NULL;
      l_log_err_msg := NULL;
      l_err_code := NULL;

      --check if the duplicate bank already exists
      BEGIN
         SELECT COUNT (1)
           INTO l_record_cnt
           FROM xxar_customer_branches_stg xsbs
          WHERE xsbs.leg_bank_name = piv_bank_name
            AND xsbs.leg_country = piv_country
            AND xsbs.leg_bank_branch_name = piv_branch_name
            AND xsbs.batch_id = g_new_batch_id
            AND xsbs.run_sequence_id = g_new_run_seq_id
            AND xsbs.process_flag = 'V';
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            print_log_message_p
                             (   'In No Data found of duplicate branch check'
                              || SQLERRM
                             );
         WHEN OTHERS
         THEN
            l_record_cnt := 2;
            print_log_message_p
                               (   'In When others of duplicate branch check'
                                || SQLERRM
                               );
      END;

      IF (l_record_cnt = 1)
      THEN
         l_record_cnt := 2;
      END IF;

      IF l_record_cnt = 2
      THEN
         pon_error_cnt := 2;
      END IF;

      xxetn_debug_pkg.add_debug (' - PROCEDURE : duplicate_branch -');
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
         pon_error_cnt := 2;
         print_log_message_p ('In Exception duplicate_branch check' || SQLERRM
                             );
   END duplicate_branch;

   --
-- ========================
-- Procedure: duplicate_account
-- =============================================================================
--   This procedure to do duplicate branch record check
-- =============================================================================
--  Input Parameters :
--   piv_bank_name
--   piv_branch_name
--   piv_account_name
--   piv_country

   --  Output Parameters :
--   pon_error_cnt    : Return Error Count
-- -----------------------------------------------------------------------------
--
   PROCEDURE duplicate_account (
      piv_bank_name     IN       VARCHAR2,
      piv_branch_name   IN       VARCHAR2,
      piv_account_num   IN       VARCHAR2,
      -- piv_branch_num     IN       NUMBER, -- Changed by Ankur
      piv_branch_num    IN       VARCHAR2,                 -- Changed by Ankur
      pon_error_cnt     OUT      NUMBER
   )
   IS
      l_record_cnt       NUMBER;
      l_err_msg          VARCHAR2 (2000);
      l_log_ret_status   VARCHAR2 (50);
      l_log_err_msg      VARCHAR2 (2000);
      l_err_code         VARCHAR2 (40)   := NULL;
   BEGIN
      xxetn_debug_pkg.add_debug (' + PROCEDURE : duplicate_account +');
      l_record_cnt := 0;

      --check if the duplicate bank already exists
      BEGIN
         SELECT COUNT (1)
           INTO l_record_cnt
           FROM xxar_customer_bankaccnts_stg xsbs
          WHERE xsbs.leg_bank_name = piv_bank_name
            AND xsbs.leg_branch_number = piv_branch_num
            AND xsbs.leg_branch_name = piv_branch_name
            AND xsbs.leg_bank_account_num = piv_account_num
            AND xsbs.batch_id = g_new_batch_id
            AND xsbs.run_sequence_id = g_new_run_seq_id;
--            AND xsbs.process_flag = 'V';
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            print_log_message_p
                            (   'In No Data found of duplicate account check'
                             || SQLERRM
                            );
         WHEN OTHERS
         THEN
            l_record_cnt := 2;
            print_log_message_p
                              (   'In When others of duplicate account check'
                               || SQLERRM
                              );
      END;

      IF (l_record_cnt > 1)
      THEN
         l_record_cnt := 2;
      ELSE
         l_record_cnt := 0;
      END IF;

      IF l_record_cnt = 2
      THEN
         pon_error_cnt := 2;
      END IF;

      print_log_message_p (' - PROCEDURE : duplicate_account -');
   EXCEPTION
      WHEN OTHERS
      THEN
         xxetn_debug_pkg.add_debug (   'In Exception duplicate_account check'
                                    || SQLERRM
                                   );
         g_retcode := 2;
         pon_error_cnt := 2;
         print_log_message_p ('In Exception duplicate_account check'
                              || SQLERRM
                             );
   END duplicate_account;

--
  -- ========================
  -- Procedure: validate_country
  -- =============================================================================
  --   This procedure validate_country
  -- =============================================================================
  --  Input Parameters :
  --  piv_country  : Legacy Country Name

   --  Output Parameters :
--  pon_error_cnt    : Return Error Count
-- -----------------------------------------------------------------------------
--
   PROCEDURE validate_country (
      piv_country     IN       VARCHAR2,
      pon_error_cnt   OUT      NUMBER
   )
   IS
      l_record_cnt   NUMBER;
   BEGIN
      xxetn_debug_pkg.add_debug (   ' +  PROCEDURE : validate_country  '
                                 || piv_country
                                 || ' + '
                                );
      l_record_cnt := 0;

      BEGIN
         --check if the Country is valid
         SELECT COUNT (1)
           INTO l_record_cnt
           FROM fnd_territories
          WHERE UPPER (territory_code) = UPPER (piv_country);
      EXCEPTION
         WHEN OTHERS
         THEN
            l_record_cnt := 2;
            print_log_message_p ('In When others of country check' || SQLERRM);
      END;

      IF (l_record_cnt = 0)
      THEN
         l_record_cnt := 2;
      END IF;

      IF l_record_cnt = 2
      THEN
         pon_error_cnt := 2;
      END IF;

      xxetn_debug_pkg.add_debug (   ' -  PROCEDURE : validate_country  '
                                 || piv_country
                                 || ' - '
                                );
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
         l_record_cnt := 2;
         print_log_message_p ('In Exception validate country' || SQLERRM);
   END validate_country;

--
-- ========================
-- Procedure: validate_institution_type
-- =============================================================================
--   This procedure validate_institution_type
-- =============================================================================
--  Input Parameters :
--  piv_country  : Legacy Institution Type

   --  Output Parameters :
--  pon_error_cnt    : Return Error Count
-- -----------------------------------------------------------------------------
--
   PROCEDURE validate_institution_type (
      piv_institution_type   IN       VARCHAR2,
      pon_error_cnt          OUT      NUMBER
   )
   IS
      l_record_cnt   NUMBER;
   BEGIN
      xxetn_debug_pkg.add_debug
                            (   ' +  PROCEDURE : validate_institution_type  '
                             || piv_institution_type
                             || ' + '
                            );
      l_record_cnt := 0;

      BEGIN
         --check if the institution type is valid
         SELECT COUNT (1)
           INTO l_record_cnt
           FROM ap_lookup_codes
          WHERE lookup_type = 'INSTITUTION TYPE'
            AND lookup_code = piv_institution_type;
      EXCEPTION
         WHEN OTHERS
         THEN
            l_record_cnt := 2;
            print_log_message_p
                               (   'In When others of institution type check'
                                || SQLERRM
                               );
      END;

      IF (l_record_cnt = 0)
      THEN
         l_record_cnt := 2;
      END IF;

      IF l_record_cnt = 2
      THEN
         pon_error_cnt := 2;
      END IF;

      xxetn_debug_pkg.add_debug
                             (   ' -  PROCEDURE : validate_institution_type  '
                              || ' - '
                             );
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
         l_record_cnt := 2;
         print_log_message_p
                            (   'In Exception validate bank institution type'
                             || SQLERRM
                            );
   END validate_institution_type;

--
-- ========================
-- Procedure: validate_bank_exists
-- =============================================================================
--   This procedure validate_bank_exists
-- =============================================================================
--  Input Parameters :
--  piv_bank_name: Leg bank name
--  piv_country  : leg country

   --  Output Parameters :
--  pon_error_cnt    : Return Error Count
-- -----------------------------------------------------------------------------
--
   PROCEDURE validate_bank_exists (
      piv_bank_name   IN       VARCHAR2,
      piv_bank_num    IN       VARCHAR2,
      piv_country     IN       VARCHAR2,
      pon_error_cnt   OUT      NUMBER
   )
   IS
      l_record_cnt   NUMBER;
   BEGIN
      xxetn_debug_pkg.add_debug (   ' +  PROCEDURE : validate_bank_exists  '
                                 || piv_bank_name
                                 || 'in country '
                                 || piv_country
                                 || ' + '
                                );
      l_record_cnt := 0;

      BEGIN
         --check if the bank already exists
         SELECT COUNT (1)
           INTO l_record_cnt
           FROM iby_ext_banks_v
          WHERE (    UPPER (bank_name) = UPPER (piv_bank_name)
                 AND UPPER (NVL (bank_number, 'QQRR')) =
                                            UPPER (NVL (piv_bank_num, 'QQRR'))
                )
            AND home_country = piv_country;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            print_log_message_p
                          (   'In No Data found of bank already exists check'
                           || SQLERRM
                          );
         WHEN OTHERS
         THEN
            l_record_cnt := 2;
            print_log_message_p
                            (   'In When others of bank already exists check'
                             || SQLERRM
                            );
      END;

      IF (l_record_cnt > 0)
      THEN
         l_record_cnt := 2;
      END IF;

      IF l_record_cnt = 2
      THEN
         pon_error_cnt := 2;
      END IF;

      xxetn_debug_pkg.add_debug (   ' -  PROCEDURE : validate_bank_exists  '
                                 || piv_country
                                 || ' - '
                                );
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
         l_record_cnt := 2;
         print_log_message_p ('In Exception validate bank exists' || SQLERRM);
   END validate_bank_exists;

--
-- ========================
-- Procedure: validate_branch_type
-- =============================================================================
--   This procedure validate_branch_type
-- =============================================================================
--  Input Parameters :
--  piv_branch_type  : Legacy bank branch Type

   --  Output Parameters :
--  pon_error_cnt    : Return Error Count
-- -----------------------------------------------------------------------------
--
   PROCEDURE validate_branch_type (
      piv_branch_type   IN       VARCHAR2,
      pon_error_cnt     OUT      NUMBER
   )
   IS
      l_record_cnt   NUMBER;
   BEGIN
      xxetn_debug_pkg.add_debug (   ' +  PROCEDURE : validate_branch_type  '
                                 || piv_branch_type
                                 || ' + '
                                );
      l_record_cnt := 0;

      BEGIN
         --check if the branch type is valid
         SELECT COUNT (1)
           INTO l_record_cnt
           FROM ap_lookup_codes
          WHERE lookup_type = 'BANK BRANCH TYPE'
            AND UPPER (lookup_code) = UPPER (piv_branch_type);
      EXCEPTION
         WHEN OTHERS
         THEN
            l_record_cnt := 2;
            print_log_message_p (   'In When others of branch type check'
                                 || SQLERRM
                                );
      END;

      IF (l_record_cnt = 0)
      THEN
         l_record_cnt := 2;
      END IF;

      IF l_record_cnt = 2
      THEN
         pon_error_cnt := 2;
      END IF;

      print_log_message_p (' -  PROCEDURE : validate_branch_type  - ');
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
         l_record_cnt := 2;
         print_log_message_p (   'In Exception validate bank branch type'
                              || SQLERRM
                             );
   END validate_branch_type;

--
-- ========================
-- Procedure: validate_br_bank_exists
-- =============================================================================
--   This procedure validate_br_bank_exists
-- =============================================================================
--  Input Parameters :
--  piv_bank_name: Leg bank name
--  piv_country  : leg country

   --  Output Parameters :
--  pon_error_cnt    : Return Error Count
--  pon_bank_id      : Return Bank ID
-- -----------------------------------------------------------------------------
--
   PROCEDURE validate_br_bank_exists (
      piv_bank_name   IN       VARCHAR2,
      piv_bank_num    IN       VARCHAR2,
      piv_country     IN       VARCHAR2,
      pon_bank_id     OUT      NUMBER,
      pon_error_cnt   OUT      NUMBER
   )
   IS
      l_record_cnt   NUMBER;
      l_bank_id      NUMBER;
   BEGIN
      xxetn_debug_pkg.add_debug
                              (   ' +  PROCEDURE : validate_br_bank_exists  '
                               || piv_bank_name
                               || ' Bank Number '
                               || piv_bank_num
                               || ' + '
                              );
      l_record_cnt := 0;
      l_bank_id := NULL;

      BEGIN
         --check if the bank for a branch exists and derive party ID
         IF piv_bank_num IS NOT NULL
         THEN
            SELECT bank_party_id
              INTO l_bank_id
              FROM iby_ext_banks_v
             WHERE (    UPPER (bank_name) = UPPER (piv_bank_name)
                    AND UPPER (NVL (bank_number, '-1')) =
                                              UPPER (NVL (piv_bank_num, '-1'))
                   )
              -- AND home_country = piv_country -- Added for v1.80
               AND ROWNUM = 1;
         ELSE
            SELECT bank_party_id
              INTO l_bank_id
              FROM iby_ext_banks_v
             WHERE (UPPER (bank_name) = UPPER (piv_bank_name))
            --   AND home_country = piv_country -- Added for v1.80
               AND ROWNUM = 1;
         END IF;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            l_record_cnt := 2;
            print_log_message_p
                           (   'In No Data found of branch bank exists check'
                            || SQLERRM
                           );
         WHEN OTHERS
         THEN
            l_record_cnt := 2;
            print_log_message_p
                             (   'In When others of branch bank exists check'
                              || SQLERRM
                             );
      END;

      IF (l_bank_id IS NULL)
      THEN
         l_record_cnt := 2;
         pon_error_cnt := 0;
      ELSE
         pon_bank_id := l_bank_id;
      END IF;

      IF l_record_cnt = 2
      THEN
         pon_error_cnt := 2;
      END IF;

      print_log_message_p (   ' -  PROCEDURE : validate_br_bank_exists  '
                           || piv_country
                           || ' - '
                          );
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
         l_record_cnt := 2;
         print_log_message_p (   'In Exception validate branch bank exists'
                              || SQLERRM
                             );
   END validate_br_bank_exists;

--
-- ========================
-- Procedure: validate_branch_exists
-- =============================================================================
--   This procedure validate_branch_exists
-- =============================================================================
--  Input Parameters :
--  piv_bank_name: Leg bank name
--  piv_country  : leg country

   --  Output Parameters :
--  pon_error_cnt    : Return Error Count
-- -----------------------------------------------------------------------------
--
   PROCEDURE validate_branch_exists (
      piv_bank_name     IN       VARCHAR2,
      piv_branch_name   IN       VARCHAR2,
      piv_country       IN       VARCHAR2,
      piv_bank_num      IN       VARCHAR2, -- Added for version 1.80
      piv_branch_num    IN       VARCHAR2, -- Added for version 1.80
      pon_error_cnt     OUT      NUMBER
   )
   IS
      l_record_cnt   NUMBER;
   BEGIN
      xxetn_debug_pkg.add_debug
                               (   ' +  PROCEDURE : validate_branch_exists  '
                                || piv_bank_name
                                || 'in country '
                                || piv_country
                                || ' + '
                               );
      l_record_cnt := 0;

      BEGIN
         --check if the bank branch already exists
         SELECT COUNT (1)
           INTO l_record_cnt
           FROM iby_ext_bank_branches_v iebb, iby_ext_banks_v cbv
          WHERE iebb.bank_party_id = cbv.bank_party_id
            AND UPPER (cbv.bank_name) = UPPER (piv_bank_name)
            AND UPPER (NVL(cbv.bank_number, 'X')) = UPPER (NVL(piv_bank_num, 'X'))  -- Added for v1.80
            AND cbv.home_country = piv_country
            AND UPPER (NVL(iebb.branch_number, 'X')) = UPPER (NVL(piv_branch_num, 'X'))  -- Added for v1.80
            AND UPPER (iebb.bank_branch_name) = UPPER (piv_branch_name);

      EXCEPTION
         WHEN OTHERS
         THEN
            pon_error_cnt := 2;
            print_log_message_p
                          (   'In When others of branch already exists check'
                           || SQLERRM
                          );
      END;

      IF (l_record_cnt > 0)
      THEN
         pon_error_cnt := 2;
      ELSE
         pon_error_cnt := 0;
      END IF;

      print_log_message_p (   ' -  PROCEDURE : validate_branch_exists  '
                           || piv_country
                           || ' - '
                          );
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
         l_record_cnt := 2;
         print_log_message_p (   'In Exception validate bank branch exists'
                              || SQLERRM
                             );
   END validate_branch_exists;

--
-- ========================
-- Procedure: validate_acc_br_exists
-- =============================================================================
--   This procedure validate_acc_br__exists
-- =============================================================================
--  Input Parameters :
--  piv_bank_name: Leg bank name
--  piv_branch_number :leg_branch_number
--  piv_country  : leg country

   --  Output Parameters :
--  pon_error_cnt    : Return Error Count
-- -----------------------------------------------------------------------------
--
   PROCEDURE validate_acc_br_exists (
      piv_bank_name      IN       VARCHAR2,
      piv_bank_num       IN       VARCHAR2, -- Added for version 1.80
      piv_branch_name    IN       VARCHAR2,
      piv_branch_num     IN       VARCHAR2,                           -- Ankur
      pon_branch_id      OUT      NUMBER,
      pon_error_cnt      OUT      NUMBER,
      pon_country_code   OUT      VARCHAR2
   )
   IS
      l_record_cnt   NUMBER;
      l_branch_id    NUMBER;
   BEGIN
      xxetn_debug_pkg.add_debug
                               (   ' +  PROCEDURE : validate_acc_br_exists  '
                                || piv_branch_name
                                || ' + '
                               );
      l_record_cnt := 0;

      BEGIN
         --check if the bank branch already exists
         SELECT iebb.branch_party_id, cbv.home_country
           INTO l_branch_id, pon_country_code
           FROM iby_ext_bank_branches_v iebb, iby_ext_banks_v cbv
          WHERE iebb.bank_party_id = cbv.bank_party_id
            AND UPPER (cbv.bank_name) = UPPER (piv_bank_name)
            AND UPPER (NVL(cbv.bank_number, 'X')) = UPPER (NVL(piv_bank_num, 'X'))  -- Added for v1.80
           -- AND UPPER (iebb.branch_number) = UPPER (piv_branch_num) -- Commented for v1.68
            AND UPPER (NVL(iebb.branch_number, 'X')) = UPPER (NVL(piv_branch_num, 'X'))  -- Added for v1.68
            AND UPPER (iebb.bank_branch_name) = UPPER (piv_branch_name);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            pon_error_cnt := 2;
            print_log_message_p
                (   'In No Data found of account branch already exists check'
                 || SQLERRM
                );
         WHEN OTHERS
         THEN
            pon_error_cnt := 2;
            print_log_message_p
                  (   'In When others of account branch already exists check'
                   || SQLERRM
                  );
      END;

      IF (l_branch_id IS NULL)
      THEN
         pon_error_cnt := 2;
      ELSE
         pon_error_cnt := 0;
      END IF;

      pon_branch_id := l_branch_id;
      print_log_message_p (' -  PROCEDURE : validate_acc_br_exists  - ');
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
         l_record_cnt := 2;
         print_log_message_p
                            (   'In Exception validate account branch exists'
                             || SQLERRM
                            );
   END validate_acc_br_exists;

      --
-- ========================
-- Procedure: validate_account_exists
-- =============================================================================
--   This procedure validate_account_exists
-- =============================================================================

   --
   PROCEDURE validate_account_exists (
      piv_bank_acct_num        IN       VARCHAR2,
      piv_bank_name            IN       VARCHAR2,
      piv_branch_num           IN       VARCHAR2,                    --- Ankur
      piv_branch_name          IN       VARCHAR2,
      piv_customer_num         IN       VARCHAR2,
      piv_customer_site_code   IN       VARCHAR2,
      pin_org_id               IN       NUMBER,
      pon_error_cnt            OUT      NUMBER
   )
   IS
      l_record_cnt   NUMBER;
      l_account_id   NUMBER;
   BEGIN
      xxetn_debug_pkg.add_debug
                              (   ' +  PROCEDURE : validate_account_exists  '
                               || piv_bank_name
                               || ' + '
                              );
      l_record_cnt := 0;
      l_account_id := NULL;

      BEGIN
         SELECT COUNT (eb.bank_account_num)
           INTO l_record_cnt
           FROM iby_external_payers_all ie,
                iby_pmt_instr_uses_all ip,
                iby_ext_bank_accounts eb,
                hz_parties hp,
                hz_cust_accounts hca,
                hz_cust_site_uses_all hcu,
                hz_cust_acct_sites_all hcas,
                hz_party_sites hps,
                iby_ext_banks_v cbv,
                iby_ext_bank_branches_v iebb
          WHERE 1 = 1
            AND ip.ext_pmt_party_id = ie.ext_payer_id
            AND eb.ext_bank_account_id = ip.instrument_id
            AND hp.party_id = ie.party_id
            AND hca.cust_account_id = hcas.cust_account_id
            AND hcu.site_use_code = 'BILL_TO'
            AND hcu.cust_acct_site_id = hcas.cust_acct_site_id
            AND hp.orig_system_reference = piv_customer_num
            AND ip.instrument_type = 'BANKACCOUNT'
            AND ie.acct_site_use_id = hcu.site_use_id
            AND ie.org_id = pin_org_id
            AND eb.bank_account_num = piv_bank_acct_num
            AND hcas.party_site_id = hps.party_site_id
            AND eb.bank_id = cbv.bank_party_id
            AND eb.branch_id = iebb.branch_party_id
            AND hps.party_site_number = piv_customer_site_code
            AND cbv.bank_name = piv_bank_name
            AND iebb.branch_number = piv_branch_num
            AND iebb.bank_branch_name = piv_branch_name;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            print_log_message_p
                               (   'In No Data found of account exists check'
                                || SQLERRM
                               );
         WHEN OTHERS
         THEN
            l_record_cnt := 2;
            print_log_message_p (   'In When others of account exists check'
                                 || SQLERRM
                                );
      END;

      IF l_record_cnt = 2
      THEN
         pon_error_cnt := 2;
      ELSE
         pon_error_cnt := 0;
      END IF;

      print_log_message_p (' -  PROCEDURE : validate_account_exists  - ');
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
         l_record_cnt := 2;
         print_log_message_p ('In Exception validate account exists'
                              || SQLERRM
                             );
   END validate_account_exists;

--
   -- ========================
   -- Procedure: validate_customer
   -- =============================================================================
   --   This procedure validate_customer
   -- =============================================================================
   --
   PROCEDURE validate_customer
		(
      piv_cust_acct_num   IN       VARCHAR2,
      --piv_cust_site_ref   IN       VARCHAR2,
      pon_cust_acct_id    OUT      NUMBER,
      pon_party_id        OUT      NUMBER,
      pon_error_cnt       OUT      NUMBER
   )
   IS
      l_record_cnt   NUMBER;
   BEGIN
      xxetn_debug_pkg.add_debug (   ' +  PROCEDURE : validate_customer: '
                                 || piv_cust_acct_num
                                 || ' + '
                                );
      l_record_cnt := 0;

      BEGIN
         --validate customer and derive cust account id
         SELECT cust_account_id, party_id
           INTO pon_cust_acct_id, pon_party_id
           FROM xxar_customer_site_stg
          WHERE leg_orig_sys_cust_ref = piv_cust_acct_num
            -- AND leg_orig_sys_add_ref = piv_cust_site_ref
            AND process_flag = 'C'
            AND ROWNUM = 1;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            l_record_cnt := 2;
            print_log_message_p
                          (   'In No Data found of validate customer check: '
                           || SQLERRM
                          );
         WHEN OTHERS
         THEN
            l_record_cnt := 2;
            print_log_message_p
                            (   'In When others of validate customer check: '
                             || SQLERRM
                            );
      END;

      IF l_record_cnt = 2
      THEN
         pon_error_cnt := 2;
      ELSE
         pon_error_cnt := 0;
      END IF;

      print_log_message_p (' -  PROCEDURE : validate_customer   - ');
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
         pon_error_cnt := 2;
         print_log_message_p ('In Exception validate customer: ' || SQLERRM);
   END validate_customer;

--
-- ========================
-- Procedure: validate_customer_site
-- =============================================================================
--
   PROCEDURE validate_customer_site (
      piv_cust_acct_num   IN       VARCHAR2,
      piv_cust_site_ref   IN       VARCHAR2,
      pon_org_id          OUT      NUMBER,
      pon_cust_site_id    OUT      NUMBER,
      pon_error_cnt       OUT      NUMBER
   )
   IS
      l_record_cnt     NUMBER;
      l_cust_site_id   NUMBER;
      l_org_id         NUMBER;
   BEGIN
      xxetn_debug_pkg.add_debug
                               (   ' +  PROCEDURE : validate_customer_site  '
                                || piv_cust_site_ref
                                || ' + '
                               );
      l_record_cnt := 0;

      BEGIN
          --validate customer site and derive customer site ID
         /* SELECT site_use_id, hcsu.org_id
            INTO l_cust_site_use_id, l_org_id
            FROM hz_cust_accounts hca,
                 hz_cust_acct_sites_all hcas,
                 hz_party_sites hps,
                 hz_cust_site_uses_all hcsu
           WHERE hca.cust_account_id = hcas.cust_account_id
             AND hca.orig_system_reference = piv_cust_acct_num
             AND hps.party_site_id = hcas.party_site_id
             AND hcsu.cust_acct_site_id = hcas.cust_acct_site_id
             AND site_use_code = 'BILL_TO'
             AND hcas.orig_system_reference = piv_cust_site_ref;*/
         SELECT hca.cust_acct_site_use_id, hca.org_id
           INTO l_cust_site_id, l_org_id
           FROM xxar_customer_site_stg hca     --, hz_cust_acct_sites_all hcsu
          WHERE leg_orig_sys_cust_ref = piv_cust_acct_num
            AND leg_orig_sys_add_ref =
                                 NVL (piv_cust_site_ref, leg_orig_sys_add_ref)
            AND leg_site_use_code = 'BILL_TO'
            -- AND hca.cust_acct_site_id = hcsu.cust_acct_site_id
            AND hca.process_flag = 'C'
            AND ROWNUM = 1;

         --AND a.org_id = pin_org_id;
         pon_cust_site_id := l_cust_site_id;
         pon_org_id := l_org_id;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            l_record_cnt := 2;
            pon_cust_site_id := NULL;
            print_log_message_p
                       (   'In No Data found of validate customer site check'
                        || SQLERRM
                       );
         WHEN OTHERS
         THEN
            l_record_cnt := 2;
            pon_cust_site_id := NULL;
            print_log_message_p
                         (   'In When others of validate customer site check'
                          || SQLERRM
                         );
      END;

      IF l_record_cnt = 2
      THEN
         pon_error_cnt := 2;
      ELSE
         pon_error_cnt := 0;
      END IF;

      print_log_message_p (' -  PROCEDURE : validate_customer_site  - ');
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
         pon_error_cnt := 2;
         pon_cust_site_id := NULL;
         print_log_message_p ('In Exception validate_customer_site' || SQLERRM
                             );
   END validate_customer_site;

--
-- =============================
-- Procedure: validate_banks_p
-- =============================================================================
--   This procedure is used to run generic validations for all mandatory columns
--   checks
-- =============================================================================
--  Input Parameters :
--    None
--  Output Parameters :
--    pov_retcode          :
-- -----------------------------------------------------------------------------
--
   PROCEDURE validate_banks_p
   IS
      l_bank_id           NUMBER;
      l_bank_end_date     DATE;
      l_bank_ret_status   VARCHAR2 (50);
      l_upd_ret_status    VARCHAR2 (50);
      l_value_out         VARCHAR2 (50);
      l_log_ret_stats     VARCHAR2 (50);
      l_log_err_msg       VARCHAR2 (2000);
      l_msg_count         NUMBER;
      l_error_cnt         NUMBER;
      l_error_flag        VARCHAR2 (10);
      l_msg_data          VARCHAR2 (2000);
      l_return_status     VARCHAR2 (200);
      l_party_exists      VARCHAR2 (1);
      l_status            xxce_bank_stg.process_flag%TYPE;
      l_err_code          VARCHAR2 (40);
      l_err_msg           VARCHAR2 (2000);
      -- Error Table Record Type
      source_rec          xxetn_common_error_pkg.g_source_rec_type;

      --cursor to select new records from customer bank staging table
      CURSOR validate_customerbank_cur
      IS
         SELECT interface_txn_id, batch_id, run_sequence_id, leg_bank_name,
                leg_bank_number, leg_bank_institution_type,
                leg_bank_name_alt, leg_description, leg_end_date,
                leg_address1, leg_address2, leg_address3, leg_address4,
                leg_city, leg_state, leg_postal_code, leg_county,
                leg_country, leg_multi_currency_flag, bank_party_id,
                site_location_id, creation_date, created_by,
                last_updated_date, last_updated_by, last_update_login,
                program_application_id, program_id, program_update_date,
                request_id, process_flag, ERROR_TYPE, attribute_category,
                attribute1, attribute2, attribute3, attribute4, attribute5,
                attribute6, attribute7, attribute8, attribute9, attribute10,
                attribute11, attribute12, attribute13, attribute14,
                attribute15, leg_source_system, leg_request_id, leg_seq_num,
                leg_process_flag
           FROM xxar_customer_banks_stg xsbs
          WHERE xsbs.process_flag IN (g_new_rec, g_err_rec, g_val_rec)
            AND xsbs.batch_id = g_new_batch_id;
   BEGIN
      -- Initialize global variables for log_errors
      g_total_count := 0;
      g_failed_count := 0;
      -- Assign Batch Id and Run Sequence Id for Current Run
      g_new_run_seq_id :=
                        NVL (g_new_run_seq_id, xxetn_run_sequences_s.NEXTVAL);
      g_new_batch_id := NVL (g_new_batch_id, g_batch_id);
      -- Intialize Batch Id and Run Sequence Id for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_new_batch_id;        -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;

      FOR validate_customerbank_rec IN validate_customerbank_cur
      LOOP
         BEGIN
            -- Initialize loop variables
            l_error_cnt := 0;
            l_err_code := NULL;
            l_err_msg := NULL;
            l_upd_ret_status := NULL;
            l_log_ret_stats := NULL;
            l_log_err_msg := NULL;
            l_status := g_validated;
            -- total record count
            g_total_count := g_total_count + 1;
            -- Intialize Common variables for Record Type
            source_rec.interface_staging_id :=
                                   validate_customerbank_rec.interface_txn_id;
            source_rec.ERROR_TYPE := g_val_err_type;
            xxetn_debug_pkg.add_debug
                                  (   'validate Bank Record : '
                                   || validate_customerbank_rec.leg_bank_name
                                   || ', '
                                   || validate_customerbank_rec.leg_country
                                   || ', '
                                   || validate_customerbank_rec.interface_txn_id
                                  );
            --procedure to check mandatory values are not missing
            mandatory_value_check_bank
                         (validate_customerbank_rec.leg_bank_name,
                          validate_customerbank_rec.leg_bank_number,
                          validate_customerbank_rec.leg_country,
                          validate_customerbank_rec.leg_bank_institution_type,
                                                                              -- Ankur
                          --validate_customerbank_rec.interface_txn_id,
                          source_rec,
                          l_error_cnt
                         );

            IF l_error_cnt > 0
            THEN
               l_status := g_error;
            END IF;

            print_log_message_p ('1 - l_status : ' || l_status);
            l_error_cnt := 0;
            duplicate_bank (validate_customerbank_rec.leg_bank_name,
                            validate_customerbank_rec.leg_bank_number,
                            validate_customerbank_rec.leg_country,
                            l_error_cnt
                           );

            IF l_error_cnt > 0
            THEN
               l_status := g_error;
               source_rec.interface_staging_id :=
                                   validate_customerbank_rec.interface_txn_id;
               source_rec.source_column_name := 'LEG_BANK_NAME';
               source_rec.source_column_value :=
                                      validate_customerbank_rec.leg_bank_name;
               source_rec.ERROR_CODE := 'ETN_AR_DUPLICATE_BANK';
               source_rec.error_message := 'Error: duplicate bank record';
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_customerbank_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            END IF;

            print_log_message_p ('2 - l_status : ' || l_status);

            IF validate_customerbank_rec.leg_country IS NOT NULL
            THEN
               l_error_cnt := 0;
               validate_country (validate_customerbank_rec.leg_country,
                                 l_error_cnt
                                );

               IF (   l_error_cnt > 0
                   OR validate_customerbank_rec.leg_country IS NULL
                  )                                        -- Changed by Ankur
               THEN
                  l_status := g_error;
                  source_rec.interface_staging_id :=
                                   validate_customerbank_rec.interface_txn_id;
                  source_rec.source_column_name := 'LEG_COUNTRY';
                  source_rec.source_column_value :=
                                        validate_customerbank_rec.leg_country;
                  source_rec.ERROR_CODE := 'ETN_AR_INVALID_COUNTRY';
                  source_rec.error_message :=
                                           'Error: Country Code is not Valid';
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                        (   'Not able to insert error details in Common Error Table for record: '
                         || validate_customerbank_rec.interface_txn_id
                         || 'Error: '
                         || l_log_err_msg
                        );
                  END IF;
               END IF;
            END IF;

            print_log_message_p ('3 - l_status : ' || l_status);
            l_error_cnt := 0;
            validate_institution_type
                         (validate_customerbank_rec.leg_bank_institution_type,
                          l_error_cnt
                         );

            IF l_error_cnt > 0
            THEN
               l_status := g_error;
               source_rec.interface_staging_id :=
                                   validate_customerbank_rec.interface_txn_id;
               source_rec.source_column_name := 'LEG_BANK_INSTITUTION_TYPE';
               source_rec.source_column_value :=
                          validate_customerbank_rec.leg_bank_institution_type;
               source_rec.ERROR_CODE := 'ETN_AR_INVALID_INSTITUION_TYPE';
               source_rec.error_message :=
                                  'Error: Bank Institution Type is not Valid';
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_customerbank_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            END IF;

            print_log_message_p ('4 - l_status : ' || l_status);

            IF     validate_customerbank_rec.leg_bank_name IS NOT NULL
               AND validate_customerbank_rec.leg_country IS NOT NULL
            THEN
               l_error_cnt := 0;
               validate_bank_exists
                                  (validate_customerbank_rec.leg_bank_name,
                                   validate_customerbank_rec.leg_bank_number,
                                   validate_customerbank_rec.leg_country,
                                   l_error_cnt
                                  );

               IF l_error_cnt > 0
               THEN
                  l_status := g_error;
                  source_rec.interface_staging_id :=
                                   validate_customerbank_rec.interface_txn_id;
                  source_rec.source_column_name := 'LEG_BANK_NAME';
                  source_rec.source_column_value :=
                                      validate_customerbank_rec.leg_bank_name;
                  source_rec.ERROR_CODE := 'ETN_AR_INVALID_BANK_EXISTS';
                  source_rec.error_message :=
                                  'Error: Invalid bank. Bank already exists.';
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                        (   'Not able to insert error details in Common Error Table for record: '
                         || validate_customerbank_rec.interface_txn_id
                         || 'Error: '
                         || l_log_err_msg
                        );
                  END IF;
               END IF;
            END IF;

            print_log_message_p ('5 - l_status : ' || l_status);

            --Update staging table with the validation status as 'V' or 'E'
            UPDATE xxar_customer_banks_stg
               SET process_flag =
                              DECODE (l_status,
                                      g_error, g_error,
                                      g_validated
                                     ),
                   ERROR_TYPE =
                              DECODE (l_status,
                                      g_error, g_val_err_type,
                                      NULL
                                     ),
                   last_updated_date = SYSDATE,
                   last_updated_by = g_last_updated_by,
                   last_update_login = g_last_update_login,
                   program_application_id = g_prog_appl_id,
                   program_id = g_conc_program_id,
                   program_update_date = SYSDATE,
                   request_id = g_request_id,
                   run_sequence_id = g_new_run_seq_id
             WHERE interface_txn_id =
                                    validate_customerbank_rec.interface_txn_id;

            IF (l_status = g_error)
            THEN
               g_failed_count := g_failed_count + 1;
               g_retcode := 1;
            END IF;

            COMMIT;
         END;
      END LOOP;

      xxetn_debug_pkg.add_debug
                          (   '-   PROCEDURE : validate_banks for batch id = '
                           || g_new_batch_id
                           || ' - '
                          );
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
   /* g_errbuff := 'Failed while vaildating bank' ;
    print_log_message ( 'In Validate bank when others'||SQLERRM );*/
   END validate_banks_p;

--
-- ========================
-- Procedure: validate_branches_p
-- =============================================================================
--   This procedure is used to run generic validations for all mandatory columns
--   checks
-- =============================================================================
--  Input Parameters :
--    None
--  Output Parameters :
--    pov_retcode          :
-- -----------------------------------------------------------------------------
--
   PROCEDURE validate_branches_p
   IS
      l_log_ret_status   VARCHAR2 (50);
      l_log_err_msg      VARCHAR2 (2000);
      l_msg_count        NUMBER;
      l_error_cnt        NUMBER;
      l_error_flag       VARCHAR2 (10);
      l_msg_data         VARCHAR2 (2000);
      l_log_ret_stats    VARCHAR2 (200);
      l_party_exists     VARCHAR2 (1);
      l_process_flag     xxar_customer_branches_stg.process_flag%TYPE;
      l_err_code         VARCHAR2 (40);
      l_bank_id          NUMBER;
      l_err_msg          VARCHAR2 (2000);
      l_status           VARCHAR2 (50);
      -- Error Table Record Type
      source_rec         xxetn_common_error_pkg.g_source_rec_type;

      --cursor to select new records from customer branch staging table
      CURSOR validate_customerbranch_cur
      IS
         SELECT interface_txn_id, batch_id, run_sequence_id, leg_bank_name,
                leg_bank_number, leg_bank_branch_name, leg_branch_number,
                leg_bank_branch_name_alt, leg_bank_branch_type,
                leg_description, leg_rfc_identifier, leg_start_date,
                leg_end_date, leg_address_line1, leg_address_line2,
                leg_address_line3, leg_address_line4, leg_city, leg_state,
                leg_province, leg_county, leg_zip, leg_country,
                leg_area_code, leg_phone, branch_party_id, bank_party_id,
                branch_location_id, branch_site_use_id, creation_date,
                created_by, last_updated_date, last_updated_by,
                last_update_login, program_application_id, program_id,
                program_update_date, request_id, process_flag, ERROR_TYPE,
                attribute_category, attribute1, attribute2, attribute3,
                attribute4, attribute5, attribute6, attribute7, attribute8,
                attribute9, attribute10, attribute11, attribute12,
                attribute13, attribute14, attribute15, leg_source_system,
                leg_request_id, leg_seq_num, leg_process_flag
           FROM xxar_customer_branches_stg xsbs
          WHERE xsbs.process_flag IN (g_new_rec, g_err_rec, g_val_rec)
            AND xsbs.batch_id = g_new_batch_id;
   BEGIN
      -- Initialize global variables for log_errors
      g_total_count := 0;
      g_failed_count := 0;
      -- Assign Batch Id and Run Sequence Id for Current Run
      g_new_run_seq_id :=
                        NVL (g_new_run_seq_id, xxetn_run_sequences_s.NEXTVAL);
      g_new_batch_id := NVL (g_new_batch_id, g_batch_id);
      -- Intialize Batch Id and Run Sequence Id for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_new_batch_id;        -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;

      FOR validate_customerbranch_rec IN validate_customerbranch_cur
      LOOP
         BEGIN
            -- Initialize loop variables
            l_error_cnt := 0;
            l_err_code := NULL;
            l_err_msg := NULL;
            l_log_ret_stats := NULL;
            l_log_err_msg := NULL;
            g_total_count := g_total_count + 1;
            l_status := g_val_rec;
            source_rec.interface_staging_id :=
                                 validate_customerbranch_rec.interface_txn_id;
            source_rec.ERROR_TYPE := g_val_err_type;
            xxetn_debug_pkg.add_debug
                         (   'Validate branch Record : '
                          || validate_customerbranch_rec.leg_bank_branch_name
                          || ', '
                          || validate_customerbranch_rec.leg_country
                          || ', '
                          || validate_customerbranch_rec.interface_txn_id
                         );
            --procedure to check mandatory values are not missing
            mandatory_value_check_branch
                            (validate_customerbranch_rec.leg_bank_branch_name,
                             validate_customerbranch_rec.leg_bank_name,
                             validate_customerbranch_rec.leg_branch_number,
                             validate_customerbranch_rec.leg_country,
                             validate_customerbranch_rec.leg_bank_branch_type,
                             validate_customerbranch_rec.interface_txn_id,
                             -- Added by Ankur
                             l_error_cnt
                            );

            IF l_error_cnt > 0
            THEN
               l_status := g_error;
            END IF;

            l_error_cnt := 0;
            duplicate_branch
                            (validate_customerbranch_rec.leg_bank_name,
                             validate_customerbranch_rec.leg_bank_branch_name,
                             validate_customerbranch_rec.leg_country,
                             l_error_cnt
                            );

            IF l_error_cnt > 0
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'LEG_BANK_BRANCH_NAME';
               source_rec.source_column_value :=
                             validate_customerbranch_rec.leg_bank_branch_name;
               source_rec.ERROR_CODE := 'ETN_AR_DUPLICATE_BRANCH';
               source_rec.error_message := 'Error: duplicate branch record';
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_customerbranch_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            END IF;

            l_error_cnt := 0;
            validate_country (validate_customerbranch_rec.leg_country,
                              l_error_cnt
                             );

            IF (   l_error_cnt > 0
                OR validate_customerbranch_rec.leg_country IS NULL
               )                                           -- Changed by Ankur
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'LEG_COUNTRY';
               source_rec.source_column_value :=
                                      validate_customerbranch_rec.leg_country;
               source_rec.ERROR_CODE := 'ETN_AR_INVALID_COUNTRY';
               source_rec.error_message :=
                                    'Error: Branch Country Code is not Valid';
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_customerbranch_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            END IF;

            l_error_cnt := 0;
            validate_branch_type
                            (validate_customerbranch_rec.leg_bank_branch_type,
                             l_error_cnt
                            );

            IF l_error_cnt > 0
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'LEG_BANK_BRANCH_TYPE';
               source_rec.source_column_value :=
                             validate_customerbranch_rec.leg_bank_branch_type;
               source_rec.ERROR_CODE := 'ETN_AR_INVALID_BRANCH_TYPE';
               source_rec.error_message :=
                                       'Error: bank branch Type is not Valid';
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_customerbranch_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            END IF;

            l_error_cnt := 0;
            validate_br_bank_exists
                                 (validate_customerbranch_rec.leg_bank_name,
                                  validate_customerbranch_rec.leg_bank_number,
                                  validate_customerbranch_rec.leg_country,
                                  l_bank_id,
                                  l_error_cnt
                                 );

            IF l_error_cnt > 0
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'LEG_BANK_NAME';
               source_rec.source_column_value :=
                                    validate_customerbranch_rec.leg_bank_name;
               source_rec.ERROR_CODE := 'ETN_AR_BANK_DOESNOT_EXISTS';
               source_rec.error_message :=
                       'Error: Invalid bank. Bank does not exist for branch.';
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_customerbranch_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            END IF;

            l_error_cnt := 0;
            validate_branch_exists
                            (validate_customerbranch_rec.leg_bank_name,
                             validate_customerbranch_rec.leg_bank_branch_name,
                             validate_customerbranch_rec.leg_country,
                             validate_customerbranch_rec.leg_bank_number, -- Added for version 1.80
                             validate_customerbranch_rec.leg_branch_number, -- Added for version 1.80
                             l_error_cnt
                            );

            IF l_error_cnt > 0
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'leg_bank_branch_name';
               source_rec.source_column_value :=
                             validate_customerbranch_rec.leg_bank_branch_name;
               source_rec.ERROR_CODE := 'ETN_AR_INVALID_BRANCH_EXISTS';
               source_rec.error_message :=
                              'Error: Invalid branch. Branch already exists.';
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_customerbranch_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            END IF;

            --Update staging table with the validation status as 'V' or 'E'
            UPDATE xxar_customer_branches_stg
               SET bank_party_id = l_bank_id,
                   process_flag =
                              DECODE (l_status,
                                      g_error, g_error,
                                      g_validated
                                     ),
                   ERROR_TYPE =
                              DECODE (l_status,
                                      g_error, g_val_err_type, --g_imp_err_type, -- Changed for version v1.60 the error type to Val for defect 5297
                                      NULL
                                     ),
                   last_updated_date = SYSDATE,
                   last_updated_by = g_last_updated_by,
                   last_update_login = g_last_update_login,
                   program_application_id = g_prog_appl_id,
                   program_id = g_conc_program_id,
                   program_update_date = SYSDATE,
                   request_id = g_request_id,
                   run_sequence_id = g_new_run_seq_id
             WHERE interface_txn_id =
                                  validate_customerbranch_rec.interface_txn_id;

            IF (l_error_flag = g_error)
            THEN
               g_failed_count := g_failed_count + 1;
               g_retcode := 1;
            END IF;

            COMMIT;
         END;
      END LOOP;

      xxetn_debug_pkg.add_debug
                       (   '-   PROCEDURE : validate_branches for batch id = '
                        || g_new_batch_id
                        || ' - '
                       );
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
         print_log_message_p ('In Validate branches when others' || SQLERRM);
   END validate_branches_p;

--
-- ========================
-- Procedure: validate_operating_unit
-- =============================================================================
--   This procedure validate_operating_unit
-- =============================================================================
--  Input Parameters :
--   piv_operating_unit - 11i operating unit name

   --  Output Parameters :
--  pov_operating_unit - R12 operating unit name
--  pon_org_id - R12 organization id
--  pon_error_cnt    : Return Status
-- -----------------------------------------------------------------------------
--
   PROCEDURE validate_operating_unit (
      piv_operating_unit   IN       VARCHAR2,
      pov_operating_unit   OUT      VARCHAR2,
      pon_org_id           OUT      NUMBER,
      pon_error_cnt        OUT      NUMBER
   )
   IS
      l_record_cnt        NUMBER;
      l_operating_unit    hr_operating_units.NAME%TYPE;
      l_org_id            hr_operating_units.organization_id%TYPE;
      l_ou_lkp   CONSTANT VARCHAR2 (50)                := 'ETN_COMMON_OU_MAP';
   BEGIN
      xxetn_debug_pkg.add_debug
                              (   ' + PROCEDURE : validate_operating_unit = '
                               || piv_operating_unit
                               || ' + '
                              );
      l_record_cnt := 0;
      l_operating_unit := NULL;
      l_org_id := NULL;

      BEGIN
         --Derive R12 value for the given operating unit
         SELECT description
           INTO l_operating_unit
           FROM fnd_lookup_values flv
          WHERE flv.lookup_type = l_ou_lkp
            AND flv.meaning = piv_operating_unit
            AND flv.LANGUAGE = USERENV ('LANG')
            AND TRUNC (SYSDATE) BETWEEN NVL (flv.start_date_active,
                                             TRUNC (SYSDATE)
                                            )
                                    AND NVL (flv.end_date_active,
                                             TRUNC (SYSDATE)
                                            );
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            l_record_cnt := 2;
            l_operating_unit := NULL;
            print_log_message_p
                        (   'In No Data found of operating unit lookup check'
                         || SQLERRM
                        );
         WHEN OTHERS
         THEN
            l_record_cnt := 2;
            l_operating_unit := NULL;
            print_log_message_p
                          (   'In When others of operating unit lookup check'
                           || SQLERRM
                          );
      END;

      --if operating_unit is not null
      IF l_operating_unit IS NOT NULL
      THEN
         BEGIN
            xxetn_debug_pkg.add_debug
               (' + PROCEDURE : validate_operating_unit...derivation of org_id + '
               );

            --Fetch org_id  for the R12 value of the operating unit derived
            SELECT hou.organization_id
              INTO l_org_id
              FROM hr_operating_units hou
             WHERE hou.NAME = l_operating_unit
               AND TRUNC (SYSDATE) BETWEEN NVL (hou.date_from,
                                                TRUNC (SYSDATE))
                                       AND NVL (hou.date_to, TRUNC (SYSDATE));

            xxetn_debug_pkg.add_debug
               (' + PROCEDURE : validate_operating_unit...derivation of org_id + '
               );
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               l_record_cnt := 2;
               l_org_id := NULL;
               print_log_message_p
                               (   'In No Data found of operating unit check'
                                || SQLERRM
                               );
            WHEN OTHERS
            THEN
               l_record_cnt := 2;
               l_org_id := NULL;
               print_log_message_p
                                 (   'In When others of operating unit check'
                                  || SQLERRM
                                 );
         END;
      END IF;

      xxetn_debug_pkg.add_debug ('Operating Unit = ' || l_operating_unit);
      xxetn_debug_pkg.add_debug ('Org Id = ' || l_org_id);
      pon_org_id := l_org_id;
      pov_operating_unit := l_operating_unit;

      IF l_record_cnt > 1
      THEN
         pon_error_cnt := 2;
      END IF;

      xxetn_debug_pkg.add_debug
                               (   ' - PROCEDURE : validate_operating_unit = '
                                || piv_operating_unit
                                || ' - '
                               );
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
         l_record_cnt := 2;
         print_log_message_p (   'In Exception Opertaing Unit Validation'
                              || SQLERRM
                             );
   END validate_operating_unit;

--
-- ========================
-- Procedure: validate_bank_accounts_p
-- =============================================================================
--   This procedure is used to run generic validations for all mandatory columns
--   checks for bank accounts
-- =============================================================================
--  Input Parameters :
--    None
--  Output Parameters :
--    pov_retcode          :
-- -----------------------------------------------------------------------------
--
   PROCEDURE validate_bank_accounts_p
   IS
      l_log_ret_status     VARCHAR2 (50);
      l_log_err_msg        VARCHAR2 (2000);
      l_branch_id          NUMBER;
      l_customer_id        NUMBER;
      l_customer_site_id   NUMBER;
      l_party_id           NUMBER;
      l_party_site_id      NUMBER;
      l_org_id             NUMBER;
      l_operating_unit     VARCHAR2 (100);
      l_msg_count          NUMBER;
      l_error_cnt          NUMBER;
      l_error_flag         VARCHAR2 (10);
      l_msg_data           VARCHAR2 (2000);
      l_log_ret_stats      VARCHAR2 (200);
      l_party_exists       VARCHAR2 (1);
      l_process_flag       xxar_customer_bankaccnts_stg.process_flag%TYPE;
      l_err_code           VARCHAR2 (40);
      l_bank_id            NUMBER;
      l_err_msg            VARCHAR2 (2000);
      l_status             VARCHAR2 (50);
      l_country            VARCHAR2 (30);

      --cursor to select new records from supplier bank accounts staging table
      CURSOR validate_customeraccounts_cur
      IS
         SELECT *
           FROM xxar_customer_bankaccnts_stg xsbs
          WHERE xsbs.process_flag IN (g_new_rec, g_err_rec, g_val_rec)
            AND xsbs.batch_id = g_new_batch_id;

      -- Error Table Record Type
      source_rec           xxetn_common_error_pkg.g_source_rec_type;
   BEGIN
      xxetn_debug_pkg.add_debug ('+ PROCEDURE:  Validate_bank_accounts +');
      -- Initialize global variables for log_errors
      g_total_count := 0;
      g_failed_count := 0;
      -- Assign Batch Id and Run Sequence Id for Current Run
      g_new_run_seq_id :=
                        NVL (g_new_run_seq_id, xxetn_run_sequences_s.NEXTVAL);
      g_new_batch_id := NVL (g_new_batch_id, g_batch_id);
      -- Intialize Batch Id and Run Sequence Id for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_new_batch_id;        -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;

      FOR validate_customeraccounts_rec IN validate_customeraccounts_cur
      LOOP
         BEGIN
            -- Initialize loop variables
            l_error_cnt := 0;
            l_err_code := NULL;
            l_err_msg := NULL;
            l_log_ret_status := NULL;
            l_log_err_msg := NULL;
            l_status := g_validated;
            g_total_count := g_total_count + 1;
            xxetn_debug_pkg.add_debug
                      (   'Validate account Record : '
                       || validate_customeraccounts_rec.leg_bank_account_name
--                       || ', '
--                       || validate_customeraccounts_rec.leg_country
                       || ', '
                       || validate_customeraccounts_rec.interface_txn_id
                      );
            source_rec.interface_staging_id :=
                                validate_customeraccounts_rec.interface_txn_id;
            source_rec.source_keyname1 := 'LEG_ACCOUNT_NAME';
            source_rec.source_keyvalue1 :=
                           validate_customeraccounts_rec.leg_bank_account_name;
            source_rec.source_keyname3 := 'LEG_BANK_NAME';
            source_rec.source_keyvalue3 :=
                                   validate_customeraccounts_rec.leg_bank_name;
            source_rec.source_keyname2 := 'LEG_BRANCH_NAME';
            source_rec.source_keyvalue2 :=
                                 validate_customeraccounts_rec.leg_branch_name;
            --procedure to check mandatory values are not missing
            mandatory_value_check_account
                         (validate_customeraccounts_rec.leg_bank_name,
                          validate_customeraccounts_rec.leg_branch_name,
                          validate_customeraccounts_rec.leg_orig_sys_cust_ref,
--                   validate_customeraccounts_rec.leg_country,
                          validate_customeraccounts_rec.leg_bank_account_name,
                          validate_customeraccounts_rec.leg_bank_account_num,
--                          validate_customeraccounts_rec.leg_operating_unit,
                          validate_customeraccounts_rec.leg_bank_account_type,
                          l_error_cnt
                         );
            xxetn_debug_pkg.add_debug ('After mandatory_value_check_account');

            IF l_error_cnt > 0
            THEN
               l_status := g_error;
            END IF;
           -- Start Commented for Version v1.59
           /*
            l_error_cnt := 0;
            xxetn_debug_pkg.add_debug ('before duplicate_account');
            duplicate_account
                          (validate_customeraccounts_rec.leg_bank_name,
                           validate_customeraccounts_rec.leg_branch_name,
                           validate_customeraccounts_rec.leg_bank_account_num,
                           validate_customeraccounts_rec.leg_branch_number,
                           l_error_cnt
                          );

            IF l_error_cnt > 0
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'LEG_ACCOUNT_NAME';
               source_rec.source_column_value :=
                          validate_customeraccounts_rec.leg_bank_account_name;
               source_rec.ERROR_CODE := 'ETN_AR_DUPLICATE_ACCOUNT';
               source_rec.error_message := 'Error: duplicate account record';
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_customeraccounts_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            END IF;

            xxetn_debug_pkg.add_debug ('After duplicate_account'); */
            -- End Commented for v1.59 --
            l_error_cnt := 0;
            print_log_message_p
                     (   'validate_customeraccounts_rec.leg_orig_sys_cust_ref'
                      || validate_customeraccounts_rec.leg_orig_sys_cust_ref
                     );
            print_log_message_p
                      (   'validate_customeraccounts_rec.leg_orig_sys_loc_ref'
                       || validate_customeraccounts_rec.leg_orig_sys_loc_ref
                      );

            -- Start Commented by Ankur for Version 1.57
           /*
            validate_customer
                         (validate_customeraccounts_rec.leg_orig_sys_cust_ref,
                          --validate_customeraccounts_rec.leg_orig_sys_loc_ref, --commented by Ankur
                          l_customer_id,
                          l_party_id,
                          l_error_cnt
                         );

            IF l_error_cnt > 0
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'LEG_CUSTOMER_NAME';
               source_rec.source_column_value :=
                          validate_customeraccounts_rec.leg_orig_sys_cust_ref;
               source_rec.ERROR_CODE := 'ETN_AR_INVALID_CUSTOMER';
               source_rec.error_message := 'Error: Customer is not Valid';
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_customeraccounts_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            END IF;

            l_error_cnt := 0;

            -- Start V1.30
            l_org_id            :=    null;
            l_customer_site_id    :=    null;
            -- End V1.30

            IF (validate_customeraccounts_rec.leg_orig_sys_loc_ref IS NOT NULL
               )
            THEN
               validate_customer_site
                        (validate_customeraccounts_rec.leg_orig_sys_cust_ref,
                         validate_customeraccounts_rec.leg_orig_sys_loc_ref,
                         l_org_id,
                         l_customer_site_id,
                         l_error_cnt
                        );

               IF l_error_cnt > 0
               THEN
                  l_status := g_error;
                  source_rec.source_column_name := 'LEG_CUSTOMER_SITE_CODE';
                  source_rec.source_column_value :=
                           validate_customeraccounts_rec.leg_orig_sys_loc_ref;
                  source_rec.ERROR_CODE := 'ETN_AR_INVALID_CUSTOMER_SITE';
                  source_rec.error_message :=
                                    'Error: customer site name is not valid.';
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                        (   'Not able to insert error details in Common Error Table for record: '
                         || validate_customeraccounts_rec.interface_txn_id
                         || 'Error: '
                         || l_log_err_msg
                        );
                  END IF;
               END IF;
            END IF;

            */
            -- End Commented by Ankur for Version 1.57

            -- Start Added by Ankur for Version 1.57

            IF (validate_customeraccounts_rec.LEG_CUST_ACCOUNT_SITE_ID IS NOT NULL
               ) THEN


            l_org_id := NULL;
            l_customer_id := NULL;
            l_customer_site_id := NULL;
            l_party_id := NULL;
            l_error_cnt := 0;

              BEGIN

                -- Commented by Ankur because this query was using old version of temp table
                /*
                SELECT xcss.org_id, xcss.CUST_ACCOUNT_ID, xcss.cust_acct_site_use_id, xcss.party_id
                  INTO l_org_id, l_customer_id, l_customer_site_id, l_party_id
                  FROM xxconv.xxar_cust_bankacnt_temp xcbt,
                       xxconv.xxar_customer_site_stg xcss
                 WHERE xcbt.interface_txn_id = validate_customeraccounts_rec.interface_txn_id
                   AND xcbt.leg_cust_account_site_id = validate_customeraccounts_rec.leg_cust_account_site_id
                   and xcbt.leg_cust_site_orig_sys_ref = xcss.leg_orig_sys_cust_site_ref
                   AND xcss.process_flag = 'C'
                   AND rownum = 1;
                */
                -- Added by Ankur because this query will use New version of temp table

                SELECT xcss.org_id, xcss.CUST_ACCOUNT_ID, xcss.cust_acct_site_use_id, xcss.party_id
                  INTO l_org_id, l_customer_id, l_customer_site_id, l_party_id
                  FROM --xxconv.xxar_customer_bankaccnts_stg  xcbs,     --xxar_cust_bankacnt_temp xcbt,  -- Changed for V1.74 5880
                       xxconv.xxar_customer_site_stg xcss
                 WHERE xcss.leg_cust_acct_site_id = validate_customeraccounts_rec.leg_cust_account_site_id
                  -- AND xcbs.leg_cust_account_site_id = xcss.leg_cust_acct_site_id -- Added for V1.74 5880
                   --and xcss.leg_orig_sys_cust_site_ref = xcbt.leg_cust_site_orig_sys_ref
                   --and xcss.interface_txn_id = xcbs.interface_txn_id -- Commented for V1.79
                   AND xcss.leg_site_use_code = 'BILL_TO'   -- Added for V1.79
                   AND DECODE(xcss.leg_source_system,'SASC','FSC', xcss.leg_source_system)  = validate_customeraccounts_rec.leg_source_system -- Added for V1.79
                   AND xcss.process_flag = 'C'; 
                  -- AND rownum = 1;

              EXCEPTION
                 WHEN OTHERS
                 THEN
                    l_error_cnt := 2;
                    print_log_message_p
                                 (   'In When others of validate customer site check'
                                  || SQLERRM
                                 );
              END;


              IF l_error_cnt > 0
               THEN
                  l_status := g_error;
                  source_rec.source_column_name := 'LEG_CUST_ACCOUNT_SITE_ID';
                  source_rec.source_column_value := validate_customeraccounts_rec.leg_cust_account_site_id;
                  source_rec.ERROR_CODE := 'ETN_AR_INVALID_CUSTOMER_SITE';
                  source_rec.error_message :=
                                    'Error: customer site name is not valid.';
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                        (   'Not able to insert error details in Common Error Table for record: '
                         || validate_customeraccounts_rec.interface_txn_id
                         || 'Error: '
                         || l_log_err_msg
                        );
                  END IF;
              END IF;
            END IF;


             -- End Added by Ankur for Version 1.57

            l_error_cnt := 0;
            --passing NULL for bank_number since the field is not present in Account stg table
            validate_br_bank_exists
                               (validate_customeraccounts_rec.leg_bank_name,
                                validate_customeraccounts_rec.leg_bank_number,
                                validate_customeraccounts_rec.leg_country,
                                l_bank_id,
                                l_error_cnt
                               );

            IF l_error_cnt > 0
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'LEG_BANK_NAME';
               source_rec.source_column_value :=
                                  validate_customeraccounts_rec.leg_bank_name;
               source_rec.ERROR_CODE := 'ETN_AR_BANK_DOESNOT_EXISTS';
               source_rec.error_message :=
                      'Error: Invalid bank. Bank does not exist for account.';
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_customeraccounts_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            END IF;

            l_error_cnt := 0;
            validate_acc_br_exists
                             (validate_customeraccounts_rec.leg_bank_name,
                              validate_customeraccounts_rec.leg_bank_number, -- added for version v1.80
                              validate_customeraccounts_rec.leg_branch_name,
                              validate_customeraccounts_rec.leg_branch_number,
                              l_branch_id,
                              l_error_cnt,
                              l_country
                             );

            IF l_error_cnt > 0
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'LEG_BRANCH_NAME';
               source_rec.source_column_value :=
                                validate_customeraccounts_rec.leg_branch_name;
               source_rec.ERROR_CODE := 'ETN_AR_BRANCH_DOESNOT_EXISTS';
               source_rec.error_message :=
                  'Error: Invalid Branch. Branch does not exist for account.';
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_customeraccounts_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            END IF;

            l_error_cnt := 0;
            validate_account_exists
                         (validate_customeraccounts_rec.leg_bank_account_num,
                          validate_customeraccounts_rec.leg_bank_name,
                          validate_customeraccounts_rec.leg_branch_number,
                          validate_customeraccounts_rec.leg_branch_name,
                          validate_customeraccounts_rec.leg_orig_sys_cust_ref,
                          validate_customeraccounts_rec.customer_site_number,
                          l_org_id,
                          l_error_cnt
                         );

            IF l_error_cnt > 0
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'LEG_ACCOUNT_NUM';
               source_rec.source_column_value :=
                           validate_customeraccounts_rec.leg_bank_account_num;
               source_rec.ERROR_CODE := 'ETN_AR_INVALID_BANK_ACCOUNT';
               source_rec.error_message :=
                        'Error: Invalid Account.BAnk Account already exists.';
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_customeraccounts_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            END IF;

            --Update staging table with the validation status as 'V' or 'E'
            UPDATE xxar_customer_bankaccnts_stg
               SET bank_id = l_bank_id,
                   branch_id = l_branch_id,
                   cust_account_id = l_customer_id         -- <AP> Verify this
                                                  ,
                   customer_acct_site_id = l_customer_site_id
                                                             -- <AP> Verify this
            ,
                   acc_owning_party_id = l_party_id,
                   org_id = l_org_id,
                   country_code = l_country,
                   process_flag = l_status,
                   ERROR_TYPE =
                              DECODE (l_status,
                                      g_error, g_val_err_type,
                                      NULL
                                     ),
                   last_updated_date = SYSDATE,
                   last_updated_by = g_last_updated_by,
                   last_update_login = g_last_update_login,
                   program_application_id = g_prog_appl_id,
                   program_id = g_conc_program_id,
                   program_update_date = SYSDATE,
                   request_id = g_request_id,
                   batch_id = g_new_batch_id,
                   run_sequence_id = g_new_run_seq_id
             WHERE interface_txn_id =
                                validate_customeraccounts_rec.interface_txn_id;

            IF (l_status = g_error)
            THEN
               g_failed_count := g_failed_count + 1;
               g_retcode := 1;
            END IF;

            COMMIT;
         END;
      END LOOP;

      xxetn_debug_pkg.add_debug
                  (   '-   PROCEDURE : validate_bank_accounts for batch id = '
                   || g_new_batch_id
                   || ' - '
                  );
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 2;
         print_log_message_p ('In Validate accounts when others' || SQLERRM);
   END validate_bank_accounts_p;

--
-- ========================
-- Procedure: create_banks
-- =============================================================================
--   This procedure create_banks
-- =============================================================================
--  Input Parameters :
--    None
--  Output Parameters :
--    None
-- -----------------------------------------------------------------------------
--
   PROCEDURE create_banks_p
   IS
      l_status_flag             VARCHAR2 (1);
      l_error_message           VARCHAR2 (500);
      l_return_status_out       VARCHAR2 (1);
      l_msg_count_out           NUMBER;
      l_msg_data_out            VARCHAR2 (1000);
      l_msg_index_out           NUMBER;
      l_bank_id                 NUMBER;
      l_location_id             NUMBER;
      l_party_site_id           NUMBER;
      l_party_site_number       NUMBER;
      l_org_contact_id          NUMBER;
      l_org_party_id            NUMBER;
      l_email_cont_point_id     NUMBER;
      l_phone_cont_point_id     NUMBER;
      l_bank_msg_data           VARCHAR2 (2000);
      l_loc_msg_data            VARCHAR2 (2000);
      l_party_site_msg_data     VARCHAR2 (2000);
      l_org_cont_msg_data       VARCHAR2 (2000);
      l_phone_cont_msg_data     VARCHAR2 (2000);
      l_email_cont_msg_data     VARCHAR2 (2000);
      l_bank_ret_status         VARCHAR2 (50);
      l_loc_ret_status          VARCHAR2 (50);
      l_site_ret_status         VARCHAR2 (50);
      l_state_ret_status        VARCHAR2 (50);
      l_upd_ret_status          VARCHAR2 (50);
      l_org_cont_ret_status     VARCHAR2 (50);
      l_phone_cont_ret_status   VARCHAR2 (50);
      l_email_cont_ret_status   VARCHAR2 (50);
      l_log_ret_stats           VARCHAR2 (50);
      l_log_err_msg             VARCHAR2 (2000);
      l_retcode                 VARCHAR2 (1);
      l_err_code                VARCHAR2 (40);
      l_err_msg                 VARCHAR2 (2000);
      l_msg_count               NUMBER;
      l_extbank_rec_type        iby_ext_bankacct_pub.extbank_rec_type;
      l_result_rec              iby_fndcpt_common_pub.result_rec_type;
-- Error Table Record Type
      source_rec                xxetn_common_error_pkg.g_source_rec_type;

      CURSOR create_banks_cur
      IS
         SELECT interface_txn_id, batch_id, run_sequence_id, leg_bank_name,
                leg_bank_number, leg_bank_institution_type,
                leg_bank_name_alt, leg_description, leg_end_date,
                leg_address1, leg_address2, leg_address3, leg_address4,
                leg_city, leg_state, leg_postal_code, leg_county,
                leg_country, leg_multi_currency_flag, bank_party_id,
                site_location_id, creation_date, created_by,
                last_updated_date, last_updated_by, last_update_login,
                program_application_id, program_id, program_update_date,
                request_id, process_flag, ERROR_TYPE, attribute_category,
                attribute1, attribute2, attribute3, attribute4, attribute5,
                attribute6, attribute7, attribute8, attribute9, attribute10,
                attribute11, attribute12, attribute13, attribute14,
                attribute15, leg_source_system, leg_request_id, leg_seq_num,
                leg_process_flag
           FROM xxar_customer_banks_stg xsbs
          WHERE xsbs.process_flag = g_validated
            AND xsbs.batch_id = g_new_batch_id;
   BEGIN
      -- Initialize global variables for log_errors
      g_total_count := 0;
      g_failed_count := 0;
      -- Assign Batch Id and Run Sequence Id for Current Run
      g_new_run_seq_id :=
                        NVL (g_new_run_seq_id, xxetn_run_sequences_s.NEXTVAL);
      g_new_batch_id := NVL (g_new_batch_id, g_batch_id);
      -- Intialize Batch Id and Run Sequence Id for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_new_batch_id;        -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;

      FOR create_banks_rec IN create_banks_cur
      LOOP
         BEGIN
            --SAVEPOINT start_bank;
            source_rec.interface_staging_id :=
                                            create_banks_rec.interface_txn_id;
            l_bank_id := NULL;
            l_location_id := NULL;
            l_party_site_id := NULL;
            l_party_site_number := NULL;
            l_org_contact_id := NULL;
            l_org_party_id := NULL;
            l_bank_msg_data := NULL;
            l_loc_msg_data := NULL;
            l_party_site_msg_data := NULL;
            l_org_cont_msg_data := NULL;
            l_bank_ret_status := NULL;
            l_loc_ret_status := NULL;
            l_site_ret_status := NULL;
            l_state_ret_status := NULL;
            l_upd_ret_status := NULL;
            l_org_cont_ret_status := NULL;
            l_log_ret_stats := NULL;
            l_retcode := NULL;
            l_msg_count := NULL;
            xxetn_debug_pkg.add_debug (   'Import bank record : '
                                       || create_banks_rec.leg_bank_name
                                       || ', '
                                       || create_banks_rec.leg_country
                                       || ', '
                                       || create_banks_rec.interface_txn_id
                                      );
            --Assign staging table values to the bank record type to be passed in the API
            l_extbank_rec_type.object_version_number := 1.0;
            l_extbank_rec_type.bank_name := create_banks_rec.leg_bank_name;
            l_extbank_rec_type.bank_number := create_banks_rec.leg_bank_number;
--            l_extbank_rec_type.bank_number :=
--               SUBSTR (NVL (create_banks_rec.leg_bank_number,
--                            create_banks_rec.leg_bank_name
--                           ),
--                       1,
--                       30
--                      );
--            l_extbank_rec_type.bank_number :=
--               SUBSTR (NVL (create_banks_rec.leg_bank_number,
--                            create_banks_rec.leg_bank_name
--                           ),
--                       1,
--                       30
--                      );
            l_extbank_rec_type.institution_type :=
                                    create_banks_rec.leg_bank_institution_type;
            l_extbank_rec_type.country_code := create_banks_rec.leg_country;
            l_extbank_rec_type.description := create_banks_rec.leg_description;

          -- Start Changes v1.80  if Country is JAPAN alt name is required

--            l_extbank_rec_type.bank_alt_name :=
--                                            create_banks_rec.leg_bank_name_alt;
            IF create_banks_rec.leg_country = 'JP' THEN

             l_extbank_rec_type.bank_alt_name :=
                                            NVL(create_banks_rec.leg_bank_name_alt, create_banks_rec.leg_bank_name);
            ELSE
             l_extbank_rec_type.bank_alt_name :=
                                            create_banks_rec.leg_bank_name_alt;
            END IF;

          -- End Changes v1.80

            --Call API to create external banks
            iby_ext_bankacct_pub.create_ext_bank
                                        (p_api_version        => 1.0,
                                         p_init_msg_list      => fnd_api.g_true,
                                         p_ext_bank_rec       => l_extbank_rec_type,
                                         x_bank_id            => l_bank_id,
                                         x_return_status      => l_bank_ret_status,
                                         x_msg_count          => l_msg_count,
                                         x_msg_data           => l_bank_msg_data,
                                         x_response           => l_result_rec
                                        );

            --if API return status is not 'S'
            IF l_bank_ret_status <> fnd_api.g_ret_sts_success
            THEN
               l_retcode := g_error;

               IF l_msg_count > 0
               THEN
                  FOR i IN 1 .. l_msg_count
                  LOOP
                     l_bank_msg_data :=
                        fnd_msg_pub.get (p_msg_index      => i,
                                         p_encoded        => fnd_api.g_false
                                        );
                  END LOOP;
               END IF;

               source_rec.interface_staging_id :=
                                             create_banks_rec.interface_txn_id;
               source_rec.source_column_name := 'LEG_BANK_NAME';
               source_rec.source_column_value :=
                                                create_banks_rec.leg_bank_name;
               source_rec.ERROR_CODE := 'ETN_AR_BANK_IMPORT_ERROR';
               source_rec.error_message :=
                  'Error : Customer Bank creation failed. ' || l_bank_msg_data;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || create_banks_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            ELSE
               COMMIT;
               l_retcode := g_success;
            END IF;        -- IF l_bank_ret_status = fnd_api.g_ret_sts_success

            IF l_retcode = g_success
            THEN
               --Update process_flag to 'C' in case of API Success
               UPDATE xxar_customer_banks_stg
                  SET bank_party_id = l_bank_id,
                      process_flag = g_converted,
                      run_sequence_id = g_new_run_seq_id,
                      last_updated_date = SYSDATE,
                      last_updated_by = g_last_updated_by,
                      last_update_login = g_last_update_login,
                      program_application_id = g_prog_appl_id,
                      program_id = g_conc_program_id,
                      program_update_date = SYSDATE,
                      request_id = g_request_id
                WHERE interface_txn_id = create_banks_rec.interface_txn_id;
            ELSE
               --Update process_flag to 'E' in case of API Failure
               UPDATE xxar_customer_banks_stg
                  SET process_flag = g_error,
                      run_sequence_id = g_new_run_seq_id,
                      ERROR_TYPE = g_imp_err_type,
                      last_updated_date = SYSDATE,
                      last_updated_by = g_last_updated_by,
                      last_update_login = g_last_update_login,
                      program_application_id = g_prog_appl_id,
                      program_id = g_conc_program_id,
                      program_update_date = SYSDATE,
                      request_id = g_request_id
                WHERE interface_txn_id = create_banks_rec.interface_txn_id;
            END IF;

            COMMIT;
         EXCEPTION
            WHEN OTHERS
            THEN
               --ROLLBACK TO start_bank;
               g_retcode := 1;
               source_rec.ERROR_CODE := 'ETN_AR_BANK_IMPORT_ERROR';
               source_rec.error_message :=
                     'Error : Exception in Customer Bank Import Loop. '
                  || SUBSTR (SQLERRM, 1, 240);
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );
         END;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 1;
         source_rec.ERROR_CODE := 'ETN_AR_BANK_IMPORT_ERROR';
         source_rec.error_message :=
               'Error : Exception in Customer Bank Import Loop. '
            || SUBSTR (SQLERRM, 1, 240);
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );
   END create_banks_p;

--
-- ========================
-- Procedure: create_branches
-- =============================================================================
--   This procedure create_branches
-- =============================================================================
--  Input Parameters :
--    None
--  Output Parameters :
--    None
-- -----------------------------------------------------------------------------
--
   PROCEDURE create_branches
   IS
      l_status_flag             VARCHAR2 (1);
      l_error_message           VARCHAR2 (500);
      l_return_status_out       VARCHAR2 (1);
      l_msg_count_out           NUMBER;
      l_msg_data_out            VARCHAR2 (1000);
      l_msg_index_out           NUMBER;
      l_bank_id                 NUMBER;
      l_branch_id               NUMBER;
      l_location_id             NUMBER;
      l_party_site_id           NUMBER;
      l_party_site_number       NUMBER;
      l_org_contact_id          NUMBER;
      l_org_party_id            NUMBER;
      l_email_cont_point_id     NUMBER;
      l_phone_cont_point_id     NUMBER;
      l_branch_msg_data         VARCHAR2 (2000);
      l_loc_msg_data            VARCHAR2 (2000);
      l_party_site_msg_data     VARCHAR2 (2000);
      l_org_cont_msg_data       VARCHAR2 (2000);
      l_phone_cont_msg_data     VARCHAR2 (2000);
      l_email_cont_msg_data     VARCHAR2 (2000);
      l_branch_ret_status       VARCHAR2 (50);
      l_loc_ret_status          VARCHAR2 (50);
      l_site_ret_status         VARCHAR2 (50);
      l_state_ret_status        VARCHAR2 (50);
      l_upd_ret_status          VARCHAR2 (50);
      l_org_cont_ret_status     VARCHAR2 (50);
      l_phone_cont_ret_status   VARCHAR2 (50);
      l_email_cont_ret_status   VARCHAR2 (50);
      l_log_ret_stats           VARCHAR2 (50);
      l_log_err_msg             VARCHAR2 (2000);
      l_loc_msg_count           NUMBER;
      l_retcode                 VARCHAR2 (1);
      l_err_code                VARCHAR2 (40);
      l_err_msg                 VARCHAR2 (2000);
      l_msg_count               NUMBER;
	  l_branch_cnt              NUMBER DEFAULT 0;
      l_extbranch_rec           iby_ext_bankacct_pub.extbankbranch_rec_type;
      l_result_rec              iby_fndcpt_common_pub.result_rec_type;
      l_br_location_rec         hz_location_v2pub.location_rec_type;
      l_br_party_site_rec       hz_party_site_v2pub.party_site_rec_type;
	  
	  l_br_ret_status           VARCHAR2 (50);
	  l_br_msg_data             VARCHAR2 (2000);
	  
-- Error Table Record Type
      source_rec                xxetn_common_error_pkg.g_source_rec_type;
	  

      CURSOR create_branches_cur
      IS
         SELECT interface_txn_id, batch_id, run_sequence_id, leg_bank_name,
                leg_bank_number, leg_bank_branch_name, leg_branch_number,
                leg_bank_branch_name_alt, leg_bank_branch_type,
                leg_description, leg_rfc_identifier, leg_start_date,
                leg_end_date, leg_address_line1, leg_address_line2,
                leg_address_line3, leg_address_line4, leg_city, leg_state,
                leg_province, leg_county, leg_zip, leg_country,
                leg_area_code, leg_phone, branch_party_id, bank_party_id,
                branch_location_id, branch_site_use_id, creation_date,
                created_by, last_updated_date, last_updated_by,
                last_update_login, program_application_id, program_id,
                program_update_date, request_id, process_flag, ERROR_TYPE,
                attribute_category, attribute1, attribute2, attribute3,
                attribute4, attribute5, attribute6, attribute7, attribute8,
                attribute9, attribute10, attribute11, attribute12,
                attribute13, attribute14, attribute15, leg_source_system,
                leg_request_id, leg_seq_num, leg_process_flag
           FROM xxar_customer_branches_stg xsbs
          WHERE xsbs.process_flag = g_validated
            AND xsbs.batch_id = g_new_batch_id;
			
	  -- Below Cursors added for v1.87
	  CURSOR bank_branch_cnt_cur (piv_bank_branch_name IN VARCHAR2,
	                              piv_bank_name        IN VARCHAR2,
								  piv_branch_number    IN VARCHAR2,
								  piv_bank_number      IN VARCHAR2)
	  IS 
	    SELECT count(1)
           FROM xxar_customer_site_stg conv_site,
                xxar_customer_bankaccnts_stg xsbs,
                apps.hz_cust_acct_sites_all a,
                apps.hz_cust_site_uses_all b,
                xxar_cust_bank_accnt_sepa_stg xsep
          WHERE a.cust_account_id        = conv_site.cust_account_id
            AND b.cust_acct_site_id      = a.cust_acct_site_id 
            AND conv_site.party_site_id  = a.party_site_id 
            AND conv_site.process_flag   = 'C' 
            AND b.site_use_code = 'BILL_TO'
            AND a.org_id        = b.org_id 
            AND conv_site.leg_source_system = 'ISSC' 
            AND xsbs.leg_source_system      = 'ISSC' 
	        AND xsbs.leg_branch_name = piv_bank_branch_name
            AND xsbs.leg_bank_name   = piv_bank_name
	        AND NVL(xsbs.leg_branch_number, 'XX') = NVL(piv_branch_number, 'XX')
            AND NVL(xsbs.leg_bank_number, 'XX')   = NVL(piv_bank_number, 'XX') 
            AND xsep.bank_account_number = xsbs.leg_bank_account_num
            AND xsep.plant_number        = conv_site.hcsu_attribute6
            AND xsbs.leg_cust_account_site_id = conv_site.leg_cust_acct_site_id;
			
	  CURSOR bic_num_cur (piv_bank_branch_name IN VARCHAR2,
	                      piv_bank_name        IN VARCHAR2,
						  piv_branch_number    IN VARCHAR2,
						  piv_bank_number      IN VARCHAR2)
	  IS 
	    SELECT xsep.bank_bic 
          FROM xxar_customer_site_stg conv_site,
               xxar_customer_bankaccnts_stg xsbs,
               apps.hz_cust_acct_sites_all a,
               apps.hz_cust_site_uses_all b,
               xxar_cust_bank_accnt_sepa_stg xsep
         WHERE a.cust_account_id        = conv_site.cust_account_id
           AND b.cust_acct_site_id      = a.cust_acct_site_id 
           AND conv_site.party_site_id  = a.party_site_id 
           AND conv_site.process_flag   = 'C' 
           AND b.site_use_code = 'BILL_TO'
           AND a.org_id        = b.org_id 
           AND conv_site.leg_source_system = 'ISSC' 
           AND xsbs.leg_source_system      = 'ISSC' 
	       AND xsbs.leg_branch_name = piv_bank_branch_name
           AND xsbs.leg_bank_name   = piv_bank_name
	       AND NVL(xsbs.leg_branch_number, 'XX') = NVL(piv_branch_number, 'XX')
           AND NVL(xsbs.leg_bank_number, 'XX')   = NVL(piv_bank_number, 'XX') 
           AND xsep.bank_account_number = xsbs.leg_bank_account_num
           AND xsep.plant_number        = conv_site.hcsu_attribute6
           AND xsbs.leg_cust_account_site_id = conv_site.leg_cust_acct_site_id;
			
	  -- Cursor to pick up Bank branches created by PTP team and which BIC number has to be updated
	  CURSOR update_bic_cur
	  IS 
	    SELECT stg.interface_txn_id,stg.batch_id,stg.leg_bank_name,stg.leg_bank_number,stg.leg_bank_branch_name,
		       stg.leg_branch_number,stg.bank_party_id,stg.leg_country,stg.leg_bank_branch_type
          FROM apps.xxetn_common_error xe,
               xxconv.xxar_customer_branches_stg stg
         WHERE xe.interface_staging_id = stg.interface_txn_id
           AND xe.request_id = stg.request_id
		   AND stg.leg_source_system = 'ISSC'
           AND stg.process_flag = 'E'
           AND stg.leg_process_flag <> 'C'
           AND xe.error_message like 'Error: Invalid branch. Branch already exists.'
		   AND stg.batch_id = g_new_batch_id;
		   
	  -- Changes end for v1.87
	  
   BEGIN
      -- Initialize global variables for log_errors
      g_total_count := 0;
      g_failed_count := 0;
      -- Assign Batch Id and Run Sequence Id for Current Run
      g_new_run_seq_id :=
                        NVL (g_new_run_seq_id, xxetn_run_sequences_s.NEXTVAL);
      g_new_batch_id := NVL (g_new_batch_id, g_batch_id);
      -- Intialize Batch Id and Run Sequence Id for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_new_batch_id;        -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;

      FOR create_branches_rec IN create_branches_cur
      LOOP
         BEGIN
           -- SAVEPOINT start_branch;
           -- Start Changes for v1.58
            source_rec.interface_staging_id := create_branches_rec.interface_txn_id;
            source_rec.ERROR_TYPE := g_imp_err_type;
            l_bank_id := NULL;
            l_location_id := NULL;
            l_party_site_id := NULL;
            l_party_site_number := NULL;
            l_org_contact_id := NULL;
            l_org_party_id := NULL;
            l_branch_msg_data := NULL;
            l_loc_msg_data := NULL;
            l_party_site_msg_data := NULL;
            l_org_cont_msg_data := NULL;
            l_branch_ret_status := NULL;
            l_loc_ret_status := NULL;
            l_site_ret_status := NULL;
            l_state_ret_status := NULL;
            l_upd_ret_status := NULL;
            l_org_cont_ret_status := NULL;
            l_log_ret_stats := NULL;
            l_retcode := NULL;
            l_msg_count := NULL;
            l_err_code := NULL;
            l_err_msg := NULL;
            xxetn_debug_pkg.add_debug
                                 (   'Import branch record : '
                                  || create_branches_rec.leg_bank_branch_name
                                  || ', '
                                  || create_branches_rec.leg_country
                                  || ', '
                                  || create_branches_rec.interface_txn_id
                                 );
            print_log_message_p (   'Import branch record : '
                                 || create_branches_rec.leg_bank_branch_name
                                 || ', '
                                 || create_branches_rec.leg_country
                                 || ', '
                                 || create_branches_rec.interface_txn_id
                                );

            --derive bank ID from the bank name
            BEGIN
               SELECT bank_party_id
                 INTO l_bank_id
                 FROM iby_ext_banks_v
                WHERE UPPER (bank_name) =
                                     UPPER (create_branches_rec.leg_bank_name)
                  AND home_country = create_branches_rec.leg_country
                  AND ROWNUM = 1;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  l_branch_ret_status := 'E';
                  xxetn_debug_pkg.add_debug
                                        (   'Given bank_name does not exist'
                                         || 'in the system : '
                                         || create_branches_rec.leg_bank_name
                                         || ' and country '
                                         || create_branches_rec.leg_country
                                        );
                  l_err_msg :=
                        l_err_msg
                     || 'Given bank does not exist'
                     || 'in the system : '
                     || create_branches_rec.leg_bank_name
                     || ' and country '
                     || create_branches_rec.leg_country;
                  print_log_message_p (l_err_msg);
                  source_rec.source_column_name := 'LEG_BANK_NAME';
                  source_rec.source_column_value :=
                                             create_branches_rec.leg_bank_name;
                  source_rec.ERROR_CODE := 'ETN_AR_BANK_IMPORT_ERROR';
                  source_rec.error_message := l_err_msg;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );
               WHEN OTHERS
               THEN
                  l_branch_ret_status := 'E';
                  xxetn_debug_pkg.add_debug
                         (   'Error Occurred while deriving Bank_party_id : '
                          || create_branches_rec.bank_party_id
                          || SQLCODE
                          || ','
                          || ' and error message is : '
                          || SQLERRM
                         );
                  l_err_msg := l_err_msg || 'Oracle Error  ' || SQLERRM;
                  print_log_message_p (l_err_msg);
                  source_rec.source_column_name := 'LEG_BANK_NAME';
                  source_rec.source_column_value :=
                                             create_branches_rec.leg_bank_name;
                  source_rec.ERROR_CODE := 'ETN_AR_BANK_IMPORT_ERROR';
                  source_rec.error_message := l_err_msg;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );
            END;

            print_log_message_p ('After bank party ID derivation');
         -- Assign global variables for log_errors
/*         g_intf_staging_id  :=   create_branches_rec.interface_txn_id;
         g_src_keyname1     :=   'LEG_BANK_BRANCH_NAME';
         g_src_keyvalue1    :=   create_branches_rec.leg_bank_branch_name;
         g_src_keyname2     :=   'LEG_COUNTRY';
         g_src_keyvalue2    :=   create_branches_rec.leg_country;*/

            --Assign staging table values to the branch record type to be passed in the API
            l_extbranch_rec.bch_object_version_number := 1.0;
            l_extbranch_rec.branch_name :=
                                      create_branches_rec.leg_bank_branch_name;
            l_extbranch_rec.bank_party_id := create_branches_rec.bank_party_id;
            l_extbranch_rec.branch_number :=
                                         create_branches_rec.leg_branch_number;
            l_extbranch_rec.branch_type :=
                                      create_branches_rec.leg_bank_branch_type;

          -- Start Changes v1.80 if Country is JAPAN alt name is required

--            l_extbranch_rec.alternate_branch_name :=
--                                  create_branches_rec.leg_bank_branch_name_alt;
            IF create_branches_rec.leg_country = 'JP' THEN

             l_extbranch_rec.alternate_branch_name :=
               NVL( create_branches_rec.leg_bank_branch_name_alt, create_branches_rec.leg_bank_branch_name);
            ELSE
             l_extbranch_rec.alternate_branch_name :=
                                             create_branches_rec.leg_bank_branch_name_alt;
            END IF;

            -- End Changes v1.80
		  
		    -- Below changes added for v1.87
			IF create_branches_rec.leg_source_system = 'ISSC' THEN
			
			    OPEN  bank_branch_cnt_cur(create_branches_rec.leg_bank_branch_name,
				                          create_branches_rec.leg_bank_name,
										  create_branches_rec.leg_branch_number,
										  create_branches_rec.leg_bank_number);
				FETCH bank_branch_cnt_cur INTO l_branch_cnt;
				CLOSE bank_branch_cnt_cur;
				   
				IF l_branch_cnt > 0 THEN
				   BEGIN
				      
					   OPEN  bic_num_cur (create_branches_rec.leg_bank_branch_name,
				                          create_branches_rec.leg_bank_name,
										  create_branches_rec.leg_branch_number,
										  create_branches_rec.leg_bank_number);
					   FETCH bic_num_cur INTO l_extbranch_rec.bic;
					   CLOSE bic_num_cur;
						  
						print_log_message_p('BIC Number: '||l_extbranch_rec.bic 
						                      ||' Bank Branch Number: '|| create_branches_rec.leg_branch_number ||' Bank Branch Name: '|| create_branches_rec.leg_bank_branch_name);
						EXCEPTION
						  WHEN OTHERS THEN
						      l_extbranch_rec.bic := NULL;
				   END;
				
				END IF;
				   
	        END IF;
            -- End changes for v1.87
			
            print_log_message_p ('l_branch_ret_status:' || l_branch_ret_status);

            IF l_bank_id IS NOT NULL
            THEN
               print_log_message_p ('Inside branch creation API');
               --Call API to create external branches
               iby_ext_bankacct_pub.create_ext_bank_branch
                                   (p_api_version              => 1.0,
                                    p_init_msg_list            => fnd_api.g_true,
                                    p_ext_bank_branch_rec      => l_extbranch_rec,
                                    x_branch_id                => l_branch_id,
                                    x_return_status            => l_branch_ret_status,
                                    x_msg_count                => l_msg_count,
                                    x_msg_data                 => l_branch_msg_data,
                                    x_response                 => l_result_rec
                                   );
               xxetn_debug_pkg.add_debug (   'l_branch_ret_status:'
                                          || l_branch_ret_status
                                         );
               print_log_message_p (   'l_branch_ret_status:'
                                    || l_branch_ret_status
                                   );

               -- If branch record was successfully created
               IF l_branch_ret_status = fnd_api.g_ret_sts_success
               THEN
                  IF     create_branches_rec.leg_country IS NOT NULL
                     AND create_branches_rec.leg_address_line1 IS NOT NULL
                  THEN
                     l_br_location_rec.orig_system_reference := l_branch_id;
                     l_br_location_rec.country :=
                                              create_branches_rec.leg_country;
                     l_br_location_rec.address1 :=
                                        create_branches_rec.leg_address_line1;
                     l_br_location_rec.address2 :=
                                        create_branches_rec.leg_address_line2;
                     l_br_location_rec.address3 :=
                                        create_branches_rec.leg_address_line3;
                     l_br_location_rec.address4 :=
                                        create_branches_rec.leg_address_line4;
                     l_br_location_rec.city := create_branches_rec.leg_city;
                     l_br_location_rec.postal_code :=
                                                  create_branches_rec.leg_zip;
                     l_br_location_rec.state := create_branches_rec.leg_state;
                     l_br_location_rec.province :=
                                             create_branches_rec.leg_province;
                     l_br_location_rec.created_by_module := 'CE';
                     -- l_br_location_rec.county              :=
                      --  create_branches_rec.county;
                     hz_location_v2pub.create_location
                                        (p_init_msg_list      => fnd_api.g_false,
                                         p_location_rec       => l_br_location_rec,
                                         x_location_id        => l_location_id,
                                         x_return_status      => l_loc_ret_status,
                                         x_msg_count          => l_msg_count,
                                         x_msg_data           => l_loc_msg_data
                                        );
                     xxetn_debug_pkg.add_debug (   '   API create_location : '
                                                || l_loc_ret_status
                                                || ','
                                                || l_location_id
                                                || ','
                                                || l_loc_msg_data
                                               );
                     print_log_message_p (   '   API create_location : '
                                          || l_loc_ret_status
                                          || ','
                                          || l_location_id
                                          || ','
                                          || l_loc_msg_data
                                         );

                     -- If location record was successfully created
                     IF l_loc_ret_status = fnd_api.g_ret_sts_success
                     THEN
                        -- Assign location to bank record in form of a party site
                        l_br_party_site_rec.location_id := l_location_id;
                        l_br_party_site_rec.party_id := l_branch_id;
                        l_br_party_site_rec.identifying_address_flag := 'Y';
                        l_br_party_site_rec.orig_system_reference :=
                                                                  l_branch_id;
                        l_br_party_site_rec.identifying_address_flag := 'Y';
                        l_br_party_site_rec.status := 'A';
                        l_br_party_site_rec.party_site_name :=
                           create_branches_rec.leg_bank_branch_name
                           || '_Site';
                        l_br_party_site_rec.created_by_module := 'CE';
                        hz_bank_pub.create_bank_site
                                 (p_init_msg_list          => fnd_api.g_false,
                                  p_party_site_rec         => l_br_party_site_rec,
                                  x_party_site_id          => l_party_site_id,
                                  x_party_site_number      => l_party_site_number,
                                  x_return_status          => l_site_ret_status,
                                  x_msg_count              => l_msg_count,
                                  x_msg_data               => l_party_site_msg_data
                                 );
                        xxetn_debug_pkg.add_debug
                                             (   '   API create_party_site : '
                                              || l_site_ret_status
                                              || ','
                                              || l_party_site_id
                                              || ','
                                              || l_party_site_msg_data
                                             );
                        print_log_message_p (   '   API create_party_site : '
                                             || l_site_ret_status
                                             || ','
                                             || l_party_site_id
                                             || ','
                                             || l_party_site_msg_data
                                            );

                        -- if api error
                        IF l_site_ret_status <> fnd_api.g_ret_sts_success
                        THEN
                           l_retcode := g_error;
                           l_err_code := 'ETN_CE_BRANCH_IMPORT_ERROR';
                           l_err_msg :=
                              'Error : Party site creation for branch address failed. ';
                           print_log_message_p (l_err_msg);

                           IF l_msg_count = 1
                           THEN
                              source_rec.source_column_name := NULL;
                              source_rec.source_column_value := NULL;
                              source_rec.ERROR_CODE :=
                                                 'ETN_AR_BRANCH_IMPORT_ERROR';
                              source_rec.error_message :=
                                           l_err_msg || l_party_site_msg_data;
                              log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                            pov_err_msg        => l_log_err_msg,
                                            pi_err_rec         => source_rec
                                           );
                           --extract API errors
                           ELSIF l_msg_count > 1
                           THEN
                              FOR i IN 1 .. l_msg_count
                              LOOP
                                 l_party_site_msg_data :=
                                    fnd_msg_pub.get
                                                (p_msg_index      => i,
                                                 p_encoded        => fnd_api.g_false
                                                );
                                 source_rec.source_column_name := NULL;
                                 source_rec.source_column_value := NULL;
                                 source_rec.ERROR_CODE :=
                                                  'ETN_AR_BRANCH_IMPORT_ERROR';
                                 source_rec.error_message :=
                                            l_err_msg || l_party_site_msg_data;
                                 log_errors_p
                                            (pov_ret_stats      => l_log_ret_stats,
                                             pov_err_msg        => l_log_err_msg,
                                             pi_err_rec         => source_rec
                                            );
                              END LOOP;
                           END IF;
                        END IF;

                        -- Entire data set for branch record created successfully
                        IF l_retcode IS NULL
                        THEN
                           l_retcode := 'S';
                        END IF;
                     -- if api error
                     ELSIF l_loc_ret_status <> fnd_api.g_ret_sts_success
                     THEN
                        l_retcode := g_error;
                        l_err_code := 'ETN_CE_BRANCH_IMPORT_ERROR';
                        l_err_msg :=
                           'Error : Location creation for branch address failed.';
                        print_log_message_p (l_err_msg);

                        IF l_msg_count = 1
                        THEN
                           source_rec.source_column_name := NULL;
                           source_rec.source_column_value := NULL;
                           source_rec.ERROR_CODE :=
                                                 'ETN_AR_BRANCH_IMPORT_ERROR';
                           source_rec.error_message :=
                                                  l_err_msg || l_loc_msg_data;
                           log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                         pov_err_msg        => l_log_err_msg,
                                         pi_err_rec         => source_rec
                                        );
                        --extract API errors
                        ELSIF l_msg_count > 1
                        THEN
                           FOR i IN 1 .. l_msg_count
                           LOOP
                              l_loc_msg_data :=
                                 fnd_msg_pub.get
                                                (p_msg_index      => i,
                                                 p_encoded        => fnd_api.g_false
                                                );
                              source_rec.source_column_name := NULL;
                              source_rec.source_column_value := NULL;
                              source_rec.ERROR_CODE :=
                                                  'ETN_AR_BRANCH_IMPORT_ERROR';
                              source_rec.error_message :=
                                                   l_err_msg || l_loc_msg_data;
                              log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                            pov_err_msg        => l_log_err_msg,
                                            pi_err_rec         => source_rec
                                           );
                           END LOOP;
                        END IF;
                     END IF;
                  -- IF l_loc_ret_status = fnd_api.g_ret_sts_success
                  END IF;                       -- IF home country is not NULL
               --if branch creation API return status is not 'S'
               ELSIF l_branch_ret_status <> fnd_api.g_ret_sts_success
               THEN
                  l_retcode := g_error;
                  l_err_code := 'ETN_AP_BRANCH_IMPORT_ERROR';
                  l_err_msg := 'Error : Customer Branch creation failed.';
                  print_log_message_p (l_err_msg);

                  IF l_msg_count > 0
                  THEN
                     FOR i IN 1 .. l_msg_count
                     LOOP
                        l_branch_msg_data :=
                           fnd_msg_pub.get (p_msg_index      => i,
                                            p_encoded        => fnd_api.g_false
                                           );
                        source_rec.source_column_name := NULL;
                        source_rec.source_column_value := NULL;
                        source_rec.ERROR_CODE := 'ETN_AR_BRANCH_IMPORT_ERROR';
                        source_rec.error_message :=
                                                l_err_msg || l_branch_msg_data;
                        log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                      pov_err_msg        => l_log_err_msg,
                                      pi_err_rec         => source_rec
                                     );
                     END LOOP;
                  END IF;
               ELSE
                  COMMIT;
                  l_retcode := g_success;
               END IF;     -- IF l_bank_ret_status = fnd_api.g_ret_sts_success

               IF NVL(l_retcode,g_success) = g_success THEN
-- added for v1.48
                  --Update process_flag to 'C' in case of API Success
                  UPDATE xxar_customer_branches_stg
                     SET bank_party_id = l_bank_id,
                         branch_party_id = l_branch_id,
                         process_flag = g_converted,
                         run_sequence_id = g_new_run_seq_id,
                         last_updated_date = SYSDATE,
                         last_updated_by = g_last_updated_by,
                         last_update_login = g_last_update_login,
                         program_application_id = g_prog_appl_id,
                         program_id = g_conc_program_id,
                         program_update_date = SYSDATE,
                         request_id = g_request_id
                   WHERE interface_txn_id =
                                          create_branches_rec.interface_txn_id;
               ELSE
                  print_log_message_p ('Enside Else 1');

                  --Update process_flag to 'E' in case of API Failure
                  UPDATE xxar_customer_branches_stg
                     SET process_flag = g_error,
                         run_sequence_id = g_new_run_seq_id,
                         ERROR_TYPE = g_imp_err_type,
                         last_updated_date = SYSDATE,
                         last_updated_by = g_last_updated_by,
                         last_update_login = g_last_update_login,
                         program_application_id = g_prog_appl_id,
                         program_id = g_conc_program_id,
                         program_update_date = SYSDATE,
                         request_id = g_request_id
                   WHERE interface_txn_id =
                                          create_branches_rec.interface_txn_id;
               END IF;

               COMMIT;
            ELSE
               print_log_message_p ('Enside Else 2');

               --Update process_flag to 'E' in case of API Failure
               UPDATE xxar_customer_branches_stg
                  SET process_flag = g_error,
                      run_sequence_id = g_new_run_seq_id,
                      ERROR_TYPE = g_imp_err_type,
                      last_updated_date = SYSDATE,
                      last_updated_by = g_last_updated_by,
                      last_update_login = g_last_update_login,
                      program_application_id = g_prog_appl_id,
                      program_id = g_conc_program_id,
                      program_update_date = SYSDATE,
                      request_id = g_request_id
                WHERE interface_txn_id = create_branches_rec.interface_txn_id;
            END IF;                               -- if bank id does not exist

            COMMIT;
         EXCEPTION
            WHEN OTHERS
            THEN
               g_retcode := 1;
               l_err_code := 'ETN_AP_BRANCH_IMPORT_ERROR';
               l_err_msg :=
                     'Error : Exception in Customer Branch Import Loop. '
                  || SUBSTR (SQLERRM, 1, 240);
               print_log_message_p (l_err_msg);
               source_rec.source_column_name := NULL;
               source_rec.source_column_value := NULL;
               source_rec.ERROR_CODE := 'ETN_AR_BRANCH_IMPORT_ERROR';
               source_rec.error_message := l_err_msg;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );
              -- ROLLBACK TO start_bank; -- Commented for v1.58
         END;
      END LOOP;
	  
	 -- Below changes added for v1.87
	 FOR update_bic_rec IN update_bic_cur
	 LOOP
	     
		 l_extbranch_rec := NULL;
		 l_br_ret_status := NULL;
		 l_result_rec    := NULL;
		 l_br_msg_data   := NULL;
		 
		 OPEN  bank_branch_cnt_cur(update_bic_rec.leg_bank_branch_name,
				                   update_bic_rec.leg_bank_name,
								   update_bic_rec.leg_branch_number,
								   update_bic_rec.leg_bank_number);
		 FETCH bank_branch_cnt_cur INTO l_branch_cnt;
		 CLOSE bank_branch_cnt_cur;
				   
		 IF l_branch_cnt > 0 
		 THEN
		    BEGIN
			   
		       fnd_file.put_line(fnd_file.log,'Bank Branch exists');
		 	   OPEN  bic_num_cur (update_bic_rec.leg_bank_branch_name,
				                  update_bic_rec.leg_bank_name,
								  update_bic_rec.leg_branch_number,
								  update_bic_rec.leg_bank_number);
			   FETCH bic_num_cur INTO l_extbranch_rec.bic;
			   CLOSE bic_num_cur;
		 		  
		 	   print_log_message_p('BIC Number: '||l_extbranch_rec.bic 
		 	                         ||' Bank Branch Number: '|| update_bic_rec.leg_branch_number ||' Bank Branch Name: '|| update_bic_rec.leg_bank_branch_name);
			   fnd_file.put_line(fnd_file.log,'BIC Number: '||l_extbranch_rec.bic 
		 	                         ||' Bank Branch Number: '|| update_bic_rec.leg_branch_number ||' Bank Branch Name: '|| update_bic_rec.leg_bank_branch_name);
		 	   EXCEPTION
		 	     WHEN OTHERS THEN
		 	         l_extbranch_rec.bic := NULL;
		    END;
			
			BEGIN
			
		        SELECT branch_party_id
		          INTO l_extbranch_rec.branch_party_id
		          FROM iby_ext_bank_branches_v br
		         WHERE br.bank_branch_name = update_bic_rec.leg_bank_branch_name
		           AND br.bank_party_id = update_bic_rec.bank_party_id
			       AND NVL(br.branch_number, 'XX') = NVL(update_bic_rec.leg_branch_number, 'XX');
				   
				fnd_file.put_line(fnd_file.log,'Bank Party ID: '||l_extbranch_rec.branch_party_id);
				EXCEPTION 
				   WHEN OTHERS THEN
				    l_extbranch_rec.branch_party_id := NULL;
					
			END;
			
			IF l_extbranch_rec.branch_party_id IS NOT NULL
			THEN
		    
		        l_extbranch_rec.branch_name := update_bic_rec.leg_bank_branch_name;
		        l_extbranch_rec.branch_type := update_bic_rec.leg_bank_branch_type;
		        l_extbranch_rec.bch_object_version_number := 1;
		        l_extbranch_rec.typ_object_version_number := 1;
		        
		        iby_ext_bankacct_pub.update_ext_bank_branch (
                                            p_api_version   => 1,
                                            p_init_msg_list => fnd_api.g_false,
                                            p_ext_bank_branch_rec => l_extbranch_rec,
                                            x_return_status => l_br_ret_status,
                                            x_msg_count     => l_msg_count,
                                            x_msg_data      => l_br_msg_data,
                                            x_response      => l_result_rec
			    						);
			    						
                xxetn_debug_pkg.add_debug ( 'l_br_ret_status:'
                                                 || l_br_ret_status );
                print_log_message_p ( 'l_br_ret_status:'
                                           || l_br_ret_status );
                
                -- If branch BIC record was successfully created
                IF l_br_ret_status = fnd_api.g_ret_sts_success
                THEN
				    UPDATE xxar_customer_branches_stg
					   SET leg_process_flag = 'C'
					 WHERE interface_txn_id = update_bic_rec.interface_txn_id;
					 
					 print_log_message_p('Branch BIC Number update successfull for Branch Name: '|| update_bic_rec.leg_bank_branch_name );
					 fnd_file.put_line(fnd_file.log,'Branch BIC Number update successfull for Branch Name: '|| update_bic_rec.leg_bank_branch_name );
					 
				ELSE  
                    UPDATE xxar_customer_branches_stg
					   SET leg_process_flag = 'E'
					 WHERE interface_txn_id = update_bic_rec.interface_txn_id;
					
					l_retcode := g_error;
                    l_err_code := 'ETN_AR_BRANCH_BIC_UPDATE_ERROR';
                    l_err_msg := 'Error: Branch BIC Updation failed.';
                    print_log_message_p (l_err_msg);
                    
                    IF l_msg_count > 0
                    THEN
                       FOR i IN 1 .. l_msg_count
                       LOOP
                          l_br_msg_data := fnd_msg_pub.get (p_msg_index => i,
                                                            p_encoded   => fnd_api.g_false
                                                           );
														   
                          source_rec.source_column_name := NULL;
                          source_rec.source_column_value := NULL;
                          source_rec.ERROR_CODE := 'ETN_AR_BRANCH_BIC_UPDATE_ERROR';
                          source_rec.error_message := l_err_msg || l_br_msg_data;
						  
                          log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                        pov_err_msg        => l_log_err_msg,
                                        pi_err_rec         => source_rec
                                       );
                       END LOOP;
                    END IF;
					fnd_file.put_line(fnd_file.log,'BIC Update Failed, Error: '|| l_br_msg_data);
		        
		        END IF;
				
			ELSE
			    print_log_message_p (' Branch Party ID not exists for Branch: '||update_bic_rec.leg_bank_branch_name );
				fnd_file.put_line(fnd_file.log,' Branch Party ID not exists for Branch: '||update_bic_rec.leg_bank_branch_name );
			   
			END IF;  -- END IF l_extbranch_rec.branch_party_id IS NOT NULL
	     
		 END IF;   -- END IF l_branch_cnt > 0
	 END LOOP;
	 -- Changes end for v1.87
	 
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 1;
         l_err_code := 'ETN_AP_BRANCH_IMPORT_ERROR';
         l_err_msg :=
               'Error : Exception in Customer Branch Import Procedure. '
            || SUBSTR (SQLERRM, 1, 240);
         print_log_message_p (l_err_msg);
   END create_branches;

--
-- ========================
-- Procedure: create_bank_accounts
-- =============================================================================
--   This procedure create_bank_accounts
-- =============================================================================
--  Input Parameters :
--    None
--  Output Parameters :
--    None
-- -----------------------------------------------------------------------------
--
   PROCEDURE create_bank_accounts
   IS
      l_status_flag                VARCHAR2 (1);
      l_error_message              VARCHAR2 (500);
      l_return_status_out          VARCHAR2 (1);
      l_msg_count_out              NUMBER;
      l_msg_data_out               VARCHAR2 (1000);
      l_msg_index_out              NUMBER;
      l_bank_id                    NUMBER;
      l_branch_id                  NUMBER;
      l_account_id                 NUMBER;
      l_account_msg_data           VARCHAR2 (2000);
      l_loc_msg_data               VARCHAR2 (2000);
      l_party_site_msg_data        VARCHAR2 (2000);
      l_account_ret_status         VARCHAR2 (50);
      l_loc_ret_status             VARCHAR2 (50);
      l_site_ret_status            VARCHAR2 (50);
      l_state_ret_status           VARCHAR2 (50);
      l_upd_ret_status             VARCHAR2 (50);
      l_log_ret_stats              VARCHAR2 (50);
      l_log_err_msg                VARCHAR2 (2000);
      l_loc_msg_count              NUMBER;
      l_retcode                    VARCHAR2 (1);
      l_err_code                   VARCHAR2 (40);
      l_err_msg                    VARCHAR2 (2000);
      l_payee_err_msg              VARCHAR2 (2000);
      l_msg_count                  NUMBER;
      l_payee_msg_count            NUMBER;
      l_start_date                 DATE;
      l_end_date                   DATE;
      l_ext_bank_acct_rec          iby_ext_bankacct_pub.extbankacct_rec_type;
      l_instrument_rec             iby_fndcpt_setup_pub.pmtinstrument_rec_type;
      l_payee_rec                  iby_fndcpt_common_pub.payercontext_rec_type;
      l_assignment_attribs_rec     iby_fndcpt_setup_pub.pmtinstrassignment_rec_type;
      l_bank_acct_id               iby_ext_bank_accounts.ext_bank_account_id%TYPE;
      l_temp_ext_bank_acct_id      iby_ext_bank_accounts.ext_bank_account_id%TYPE;
      l_temp_ext_bank_acct_count   NUMBER;
      l_bank_acct_count            NUMBER;
      l_ext_payee_id               NUMBER;
      l_assign_id                  NUMBER;
      l_result_rec                 iby_fndcpt_common_pub.result_rec_type;
      l_payee_result_rec           iby_fndcpt_common_pub.result_rec_type;
      l_priority                   NUMBER;
      l_bank_acct_priority         NUMBER;
      l_bank_acct_priority_count   NUMBER;
      l_joint_acct_owner_id        NUMBER;
      l_payee_ret_status           VARCHAR2 (50);
      l_owner_check                NUMBER;
	  
	  l_val_error                  VARCHAR2(1);   -- V1.85, Defect#9031
	  l_joint_acct_id              NUMBER;        -- V1.85, Defect#9031
-- Error Table Record Type
      source_rec                   xxetn_common_error_pkg.g_source_rec_type;
	  
	  l_accnt_cnt                  NUMBER DEFAULT 0;
	  l_auth_count                 NUMBER DEFAULT 0;
	  x_result                     NUMBER DEFAULT 0;
	  l_debt_auth_rec              iby_fndcpt_setup_pub.DebitAuth_rec_type;
	  l_debt_ret_status            VARCHAR2 (50);
      l_debt_msg_count             NUMBER;
      l_debt_err_msg               VARCHAR2 (2000);
      l_debit_auth_id              NUMBER;
      l_debt_result_rec            iby_fndcpt_common_pub.result_rec_type;
      l_debt_payer_rec             iby_fndcpt_common_pub.payercontext_rec_type;

      --Modified as on 24-MAY-2015 for Bank account creation at customer site level if bank account exist only at customer level.
      -- START
      CURSOR fetch_orig_sys_cust_ref
      IS
         SELECT DISTINCT leg_orig_sys_cust_ref
                    --FROM xxconv.xxar_customer_bankaccnts_stg WHERE process_flag = 'V' and leg_orig_sys_cust_ref='24731309';        -- Off v1.21
                    FROM xxconv.xxar_customer_bankaccnts_stg WHERE process_flag = 'V'
                    and batch_id = g_new_batch_id;                                                -- Added v1.21

      CURSOR create_accounts_cur(p_leg_orig_sys_cust_ref IN VARCHAR2)
      IS
         SELECT xsbs.*, a.org_id ou_id, b.site_use_id
                ,b.cust_acct_site_id
                ,conv_site.cust_account_id cust_account_id_NEW        --    Added V1.17   deriving from Site Staging table
                ,party_id acc_owning_party_id_NEW                     --    Added V1.17   getting it from base table, instead of staging table
				,(SELECT name FROM hr_operating_units WHERE organization_id = a.org_id) r12_ou_name   -- Added for v1.86
				--,SUBSTR(conv_site.leg_location,(INSTR (conv_site.leg_location, '-')) + 1) c_office               -- Added for v1.86
				,DECODE(conv_site.leg_source_system,'FSC', SUBSTR(conv_site.leg_location,(INSTR (conv_site.leg_location, '-')) + 1)
                                                   ,'ISSC', conv_site.hcsu_attribute6)   	c_office  -- Added for v1.87
                ,conv_site.leg_operating_unit source_operating_unit                                   -- Added for v1.86
           FROM
             xxconv.xxar_customer_site_stg conv_site,
             xxconv.xxar_customer_bankaccnts_stg xsbs,
             apps.hz_cust_acct_sites_all a,
             apps.hz_cust_site_uses_all b
            -- , xxconv.xxar_cust_bankacnt_temp xcbt -- Added by Ankur for v1.57  -- Commented by Ram 5880 V1.74
           WHERE 1                             =1
           -- AND xsbs.leg_orig_sys_cust_ref      = conv_site.leg_orig_sys_cust_ref -- Commenting this for version v1.57
           AND a.cust_account_id               = conv_site.cust_account_id
           AND b.cust_acct_site_id             = a.cust_acct_site_id
           --AND conv_site.cust_acct_site_id     = a.cust_acct_site_id -- v1.61
           AND conv_site.party_site_id     = a.party_site_id --v1.61
           AND conv_site.process_flag          = 'C'
           AND xsbs.process_flag          = 'V'-- v1.64
           AND xsbs.leg_orig_sys_cust_ref      = p_leg_orig_sys_cust_ref
           AND b.site_use_code = 'BILL_TO'
           AND a.org_id = b.org_id
           -- Start Added by Ankur for v1.57
           --AND xcbt.interface_txn_id = conv_site.interface_txn_id             -- Commented by Ram 5880 V1.74
           AND xsbs.leg_cust_account_site_id = conv_site.leg_cust_acct_site_id  -- Added by Ram 5880 V1.74
          -- AND xcbt.leg_cust_account_site_id = xsbs.leg_cust_account_site_id   -- Commented by Ram 5880 V1.74
          -- AND xcbt.leg_cust_site_orig_sys_ref = conv_site.leg_orig_sys_cust_site_ref
           -- END  Added by Ankur for v1.57
		   --AND xsbs.leg_orig_sys_cust_ref  =  conv_site.leg_orig_sys_cust_ref  -- Added for V1.85, 9031 TUT
           ORDER BY NVL (xsbs.leg_primary_flag, 'A') DESC;
        -- END
		
	-- Added below cursor for v1.87
	CURSOR sepa_bank_accnt_cur
	IS
	SELECT xsbs.interface_txn_id, 
	       xsbs.external_bank_account_id,
		   xsbs.acc_owning_party_id,
		   b.site_use_id,
           b.cust_acct_site_id,
		   xsep.*
      FROM xxconv.xxar_customer_site_stg conv_site,
           xxconv.xxar_customer_bankaccnts_stg xsbs,
           apps.hz_cust_acct_sites_all a,
           apps.hz_cust_site_uses_all b ,
           xxconv.xxar_cust_bank_accnt_sepa_stg xsep
     WHERE a.cust_account_id        = conv_site.cust_account_id
       AND b.cust_acct_site_id      = a.cust_acct_site_id 
       AND conv_site.party_site_id  = a.party_site_id 
       AND conv_site.process_flag   = 'C'
       AND xsbs.process_flag        = 'C'
       AND xsbs.leg_process_flag    <> 'C'
       AND b.site_use_code = 'BILL_TO'
       AND a.org_id = b.org_id 
       AND conv_site.leg_source_system = 'ISSC' 
       AND xsbs.leg_source_system      = 'ISSC'
       AND xsep.bank_account_number = xsbs.leg_bank_account_num
       AND xsep.plant_number = conv_site.hcsu_attribute6
       AND xsbs.leg_cust_account_site_id = conv_site.leg_cust_acct_site_id;

      --commented as on 24-MAY-2015 for Bank account creation at customer site level if bank account exist only at customer level.
    /*
      CURSOR create_accounts_cur
      IS
         SELECT DISTINCT xsbs.*, a.org_id ou_id, b.site_use_id,
                         b.cust_acct_site_id
                    FROM xxar_customer_bankaccnts_stg xsbs,
                         hz_cust_acct_sites_all a,
                         hz_cust_site_uses_all b
                   WHERE xsbs.process_flag = g_validated
                     AND xsbs.batch_id = g_new_batch_id
                     AND xsbs.cust_account_id = a.cust_account_id
                     AND a.cust_acct_site_id = b.cust_acct_site_id
                     AND b.site_use_code = 'BILL_TO'
                     AND a.org_id = b.org_id
                ORDER BY NVL (leg_primary_flag, 'A') DESC;*/
   BEGIN
      -- Initialize global variables for log_errors
      g_total_count := 0;
      g_failed_count := 0;
      -- Assign Batch Id and Run Sequence Id for Current Run
      g_new_run_seq_id :=
                        NVL (g_new_run_seq_id, xxetn_run_sequences_s.NEXTVAL);
      g_new_batch_id := NVL (g_new_batch_id, g_batch_id);
      -- Intialize Batch Id and Run Sequence Id for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_new_batch_id;        -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;

      --Start Added by Ankur for v1.58
      -- Intialize Common variables for Record Type
      source_rec.ERROR_TYPE := g_imp_err_type;
      --End Added by Ankur for v1.58

      -- Added the loop for fetching distinct leg_orig_sys_cust_ref as on 24-MAY-2015
      FOR fetch_orig_sys_cust_ref_rec IN fetch_orig_sys_cust_ref ()
      LOOP
      print_log_message_p('LOOP...1');
      FOR create_accounts_rec IN create_accounts_cur(fetch_orig_sys_cust_ref_rec.leg_orig_sys_cust_ref)
      LOOP
         print_log_message_p('LOOP...2');
         BEGIN
            --  SAVEPOINT start_account;
            source_rec.interface_staging_id :=
                                        create_accounts_rec.interface_txn_id;       -- Added by Ankur for v1.58
            l_bank_id := NULL;
            l_assign_id := NULL;
            l_account_msg_data := NULL;
            l_loc_msg_data := NULL;
            l_party_site_msg_data := NULL;
            l_ext_bank_acct_rec := NULL;
            l_ext_payee_id := NULL;
            l_temp_ext_bank_acct_id := NULL;
            l_bank_acct_id := NULL;
            l_temp_ext_bank_acct_count := NULL;
            l_bank_acct_count := NULL;
            l_result_rec := NULL;
            l_instrument_rec := NULL;
            l_priority := NULL;
            l_bank_acct_priority := NULL;
            l_bank_acct_priority_count := NULL;
            l_joint_acct_owner_id := NULL;
            l_account_ret_status := NULL;
            l_payee_ret_status := NULL;
            l_site_ret_status := NULL;
            l_state_ret_status := NULL;
            l_upd_ret_status := NULL;
            l_log_ret_stats := NULL;
            l_retcode := NULL;
            l_msg_count := NULL;
            l_payee_msg_count := NULL;
            l_err_code := NULL;
            l_err_msg := NULL;
            l_payee_err_msg := NULL;
			
			l_payee_rec := NULL;
			
			l_val_error := 'N';  --V1.85, 9031
			
            print_log_message_p (   '..........................................................................');
            print_log_message_p (   'Import Account record (Bank Ac/Leg Bank Name/interface_txn_id): '        --    V1.17 added print log
                                 || create_accounts_rec.leg_bank_account_num
                                 || ', '
                                 || create_accounts_rec.leg_bank_name
                                 || ', '
                                 || create_accounts_rec.interface_txn_id
                                 || ' for Account Owning PartyID: ' || create_accounts_rec.acc_owning_party_id_NEW    --    V1.17
                                 || ' and CustAccountID: ' || create_accounts_rec.cust_account_id_NEW                --    V1.17
                                );
            source_rec.interface_staging_id :=
                                          create_accounts_rec.interface_txn_id;
            source_rec.source_keyname1 := 'LEG_ACCOUNT_NUM';
            source_rec.source_keyvalue1 :=
                                      create_accounts_rec.leg_bank_account_num;
            source_rec.source_keyname3 := 'LEG_BANK_NAME';
            source_rec.source_keyvalue3 := create_accounts_rec.leg_bank_name;
            source_rec.source_keyname2 := 'LEG_BRANCH_NAME';
            source_rec.source_keyvalue2 := create_accounts_rec.leg_branch_name;
            --Assign staging table values to the account record type to be passed in the API
            l_ext_bank_acct_rec.object_version_number := 1.0;
            l_ext_bank_acct_rec.acct_owner_party_id :=
                                       --create_accounts_rec.acc_owning_party_id;        --    Off    V1.17
                                       create_accounts_rec.acc_owning_party_id_NEW;        --    Added V1.17
            l_ext_bank_acct_rec.bank_account_num :=
                                      create_accounts_rec.leg_bank_account_num;
            l_ext_bank_acct_rec.bank_account_name :=
                                     create_accounts_rec.leg_bank_account_name;
            l_ext_bank_acct_rec.bank_id := create_accounts_rec.bank_id;
            l_ext_bank_acct_rec.branch_id := create_accounts_rec.branch_id;
            l_ext_bank_acct_rec.iban := create_accounts_rec.leg_iban_number;
            -- l_ext_bank_acct_rec.start_date := SYSDATE;
            l_ext_bank_acct_rec.start_date :=
                                            create_accounts_rec.leg_start_date;
            l_ext_bank_acct_rec.currency :=
                                         create_accounts_rec.leg_currency_code;
            l_ext_bank_acct_rec.country_code :=
                                              create_accounts_rec.country_code;
            l_ext_bank_acct_rec.alternate_acct_name :=
                                 create_accounts_rec.leg_bank_account_name_alt;
            l_ext_bank_acct_rec.acct_type :=
                             UPPER (create_accounts_rec.leg_bank_account_type);
            l_ext_bank_acct_rec.check_digits :=
                                          create_accounts_rec.leg_check_digits;
            l_ext_bank_acct_rec.attribute11 := g_request_id;             -- added for v1.22
            --    l_ext_bank_acct_rec.agency_location_code :=
            --                     create_accounts_rec.hl_orig_system_customer_ref;
			
			-- below changes added for v1.87
			IF create_accounts_rec.leg_source_system = 'ISSC'
			THEN
			    SELECT COUNT(*)
			      INTO l_accnt_cnt
			      FROM xxconv.xxar_cust_bank_accnt_sepa_stg xcbs
			     WHERE xcbs.plant_number = create_accounts_rec.c_office
			       AND xcbs.bank_account_number = create_accounts_rec.leg_bank_account_num;
			  
			    IF l_accnt_cnt > 0 THEN
			      BEGIN
			        SELECT xcbs.iban
			          INTO l_ext_bank_acct_rec.iban
			          FROM xxconv.xxar_cust_bank_accnt_sepa_stg xcbs
			         WHERE xcbs.plant_number = create_accounts_rec.c_office
			           AND xcbs.bank_account_number = create_accounts_rec.leg_bank_account_num;
				   
				    print_log_message_p ('Bank account Num: '|| create_accounts_rec.leg_bank_account_num||' IBAN Num: '|| l_ext_bank_acct_rec.iban);
					fnd_file.put_line(fnd_file.log,'Bank account Num: '|| create_accounts_rec.leg_bank_account_num||' IBAN Num: '|| l_ext_bank_acct_rec.iban);
					EXCEPTION
				     WHEN OTHERS THEN
				          l_ext_bank_acct_rec.iban := NULL; 
			      END;
			    END IF;
			
			END IF;
			-- end changes for v1.87
					  
            print_log_message_p ('Check existance of Bank Account API ');
            print_log_message_p ('Bank Account Id ' || l_bank_acct_id);
			
            l_bank_acct_id := NULL;
            -- check if branch exists
            iby_ext_bankacct_pub.check_ext_acct_exist
                                  (p_api_version            => 1.0,
                                   p_init_msg_list          => fnd_api.g_true,
                                   p_ext_bank_acct_rec      => l_ext_bank_acct_rec,
                                   x_acct_id                => l_bank_acct_id,
                                   x_start_date             => l_start_date,
                                   x_end_date               => l_end_date,
                                   x_return_status          => l_account_ret_status,
                                   x_msg_count              => l_msg_count,
                                   x_msg_data               => l_account_msg_data,
                                   x_response               => l_result_rec
                                  );
            print_log_message_p ('Derived Bank Account Id ' || l_bank_acct_id);            --    V1.17 added log
			fnd_file.put_line(fnd_file.log,'Derived Bank Account Id: ' || l_bank_acct_id);

            IF l_bank_acct_id IS NOT NULL
            THEN
				
                SELECT COUNT (1)
                  INTO l_owner_check
                  FROM iby_account_owners
                 WHERE ext_bank_account_id = l_bank_acct_id
                   AND account_owner_party_id = create_accounts_rec.acc_owning_party_id_NEW;        --    Added V1.17 
                                       --create_accounts_rec.acc_owning_party_id;        --    Off V1.17                                       

               IF l_owner_check = 0
               THEN
				 --V1.85, 9031 , Comment start
                  /* -- l_bank_acct_id := NULL;   
                  print_log_message_p('Ext_Bank_Account_ID: ' || l_bank_acct_id || ' is not attached with Account_Owner_PartyID: ' || create_accounts_rec.acc_owning_party_id_NEW);    -- Added V1.17
                 -- Added by Ankur for v1.64
                        source_rec.interface_staging_id :=
                                        create_accounts_rec.interface_txn_id;
                        source_rec.source_column_name := 'LEG_BANK_ACCOUNT_NUM';
                        source_rec.source_column_value := create_accounts_rec.leg_bank_account_num;
                        source_rec.ERROR_CODE := 'ETN_AR_DUP_ACCOUNT_ERROR';
                        source_rec.error_message :=
                                                  'Bank Account Number is Associated with multiple Customers';
                        log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                      pov_err_msg        => l_log_err_msg,
                                      pi_err_rec         => source_rec
                                     );
					
                -- Added by Ankur for v1,64 */
				--V1.85, 9031 , Comments end
				
				-- Added below code for v1.85, defect#9031
				-- Bank Account can be added to multiple customers, for this first add customer as joint account owner
				print_log_message_p('Calling API to add joint account owner');
				fnd_file.put_line(fnd_file.log,'Calling API to add joint account owner');
				
				iby_ext_bankacct_pub.add_joint_account_owner
									(
									 p_api_version           => 1.0,
									 p_init_msg_list         => fnd_api.g_false,
									 p_bank_account_id       => l_bank_acct_id,
									 p_acct_owner_party_id   => create_accounts_rec.acc_owning_party_id_NEW,
									 x_joint_acct_owner_id   => l_joint_acct_id,
									 x_return_status         => l_account_ret_status,
									 x_msg_count             => l_msg_count,
									 x_msg_data              => l_account_msg_data,
									 x_response              => l_result_rec
									);
									
				xxetn_debug_pkg.add_debug ( 'l_account_ret_status:'       
                                            || l_account_ret_status
                                           );
                print_log_message_p ( 'Bank add_joint_account_owner Creation API status: '
                                      || l_account_ret_status
                                      || ': '
                                      || l_account_msg_data
                                     );
				fnd_file.put_line(fnd_file.log,'Bank add_joint_account_owner Creation API status: '
                                      || l_account_ret_status || ': '|| l_account_msg_data);
				
			   ELSE --V1.85, 9031 , Added else part 
				    -- Query to check if Bank Account exists more than once for same customer site
					SELECT COUNT (1)
					  INTO l_owner_check
					  FROM iby_external_payers_all ie,
						   iby_pmt_instr_uses_all ip,
						   iby_ext_bank_accounts eb,
						   hz_parties hp,
						   hz_cust_accounts hca,
						   hz_cust_site_uses_all hcu,
						   hz_cust_acct_sites_all hcas,
						   hz_party_sites hps
					 WHERE 1 = 1
					   AND ip.ext_pmt_party_id = ie.ext_payer_id
					   AND eb.ext_bank_account_id = ip.instrument_id
					   AND hp.party_id = ie.party_id
					   AND hca.cust_account_id = hcas.cust_account_id
					   AND hcu.site_use_code = 'BILL_TO'
					   AND hcu.cust_acct_site_id = hcas.cust_acct_site_id
					   AND ip.instrument_type = 'BANKACCOUNT'
					   AND ie.acct_site_use_id = hcu.site_use_id
					   AND eb.currency_code = create_accounts_rec.leg_currency_code
					   AND hcas.party_site_id = hps.party_site_id
					   AND eb.ext_bank_account_id = l_bank_acct_id
					   AND hcu.cust_acct_site_id = create_accounts_rec.cust_acct_site_id;
					   
					IF l_owner_check > 0 THEN
					   -- Error message for suplicate bank account for same customer site
					   print_log_message_p('Ext_Bank_Account_ID: ' || l_bank_acct_id || ' is not attached with Account_Owner_PartyID: ' || create_accounts_rec.acc_owning_party_id_NEW);    -- Added V1.17
               
                       fnd_file.put_line(fnd_file.log,'Ext_Bank_Account_ID: ' || l_bank_acct_id || ' is not attached with Account_Owner_PartyID: ' || create_accounts_rec.acc_owning_party_id_NEW);
					   source_rec.interface_staging_id := create_accounts_rec.interface_txn_id;
                       source_rec.source_column_name := 'LEG_BANK_ACCOUNT_NUM';
                       source_rec.source_column_value := create_accounts_rec.leg_bank_account_num;
                       source_rec.ERROR_CODE := 'ETN_AR_DUP_ACCOUNT_ERROR';
                       source_rec.error_message := 'Bank Account Number is Duplicate for Same Customer/Customer Site';
                       log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                     pov_err_msg        => l_log_err_msg,
                                     pi_err_rec         => source_rec
                                    );
					   l_val_error := 'Y';
					   
					END IF;
                   -- v1.85 end
               END IF;
            END IF;

            -- if bank account does not exist then create it
            IF l_bank_acct_id IS NULL
            THEN
               --Call API to create external bank accounts
               xxetn_debug_pkg.add_debug ('Calling Bank Account Creation API ');
			   fnd_file.put_line(fnd_file.log,'Calling Bank Account Creation API');
			   
               iby_ext_bankacct_pub.create_ext_bank_acct
                                 (p_api_version            => 1.0,
                                  p_init_msg_list          => fnd_api.g_true,
                                  p_ext_bank_acct_rec      => l_ext_bank_acct_rec,
                                  x_acct_id                => l_bank_acct_id,
                                  x_return_status          => l_account_ret_status,
                                  x_msg_count              => l_msg_count,
                                  x_msg_data               => l_account_msg_data,
                                  x_response               => l_result_rec
                                 );
               xxetn_debug_pkg.add_debug (   'l_account_ret_status:'        --    Added V1.17 log
                                          || l_account_ret_status
                                         );
               print_log_message_p (   'Bank Ac Creation API status: '
                                    || l_account_ret_status
                                    || ': '
                                    || l_account_msg_data
                                   );
			   
			   -- If account record was successfully created				   
			   IF l_account_ret_status = fnd_api.g_ret_sts_success THEN
		       
                  fnd_file.put_line(fnd_file.log,'Bank Account Created: '|| create_accounts_rec.leg_bank_account_num ||' Bank acct ID: '||l_bank_acct_id);
				  print_log_message_p ('Setting up Priority');    -- Added V1.17 log
                  xxetn_debug_pkg.add_debug
                         ('Creating Customer Bank Payer Assignment using API');
                  xxetn_debug_pkg.add_debug ('Setting Bank Account priority ');

                  --fetch the count of the bank account number to set the priority
                  BEGIN
                     l_bank_acct_priority_count := 0;
                     /*   SELECT COUNT (eb.bank_account_num)
                                INTO l_bank_acct_priority_count
                                FROM iby_external_payers_all ie,
                                     iby_pmt_instr_uses_all ip,
                                     iby_ext_bank_accounts eb,
                                     hz_parties hp,
                                     hz_cust_accounts hca,
                                     hz_cust_site_uses_all hcu,
                                     hz_cust_acct_sites_all hcas,
                                     hz_party_sites hps,
                                     iby_ext_banks_v cbv,
                                     iby_ext_bank_branches_v iebb
                               WHERE 1 = 1
                                 AND ip.ext_pmt_party_id = ie.ext_payer_id
                                 AND eb.ext_bank_account_id = ip.instrument_id
                                 AND hp.party_id = ie.party_id
                                 AND hca.cust_account_id = hcas.cust_account_id
                                 AND hcu.site_use_code = 'BILL_TO'
                                 AND hcu.cust_acct_site_id = hcas.cust_acct_site_id
                                 AND hp.orig_system_reference = piv_customer_num
                                 AND ip.instrument_type = 'BANKACCOUNT'
                                 AND ie.acct_site_use_id = hcu.site_use_id
                                 AND ie.org_id = pin_org_id
                                 AND eb.bank_account_num = piv_bank_acct_num
                                 AND hcas.party_site_id = hps.party_site_id
                                 AND eb.bank_id = cbv.bank_party_id
                                 AND eb.branch_id = iebb.branch_party_id
                                 AND hps.party_site_number = piv_customer_site_code
                                 AND cbv.bank_name = piv_bank_name
                                 AND iebb.branch_number = piv_branch_num
                                 AND iebb.bank_branch_name = piv_branch_name;*/
                     xxetn_debug_pkg.add_debug
                                            (   'l_bank_acct_priority_count '
                                             || l_bank_acct_priority_count
                                            );
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        xxetn_debug_pkg.add_debug
                           (   'Error in deriving bank acct priority count. Error is: '
                            || SUBSTR (SQLERRM, 1, 2000)
                           );
                  END;

                  IF l_bank_acct_priority_count = 0
                  THEN
                     l_assignment_attribs_rec.priority := 1;
                     xxetn_debug_pkg.add_debug
                                           (   'priority '
                                            || l_assignment_attribs_rec.priority
                                           );
                  ELSE
                     BEGIN
                        l_assignment_attribs_rec.priority :=
                                        l_assignment_attribs_rec.priority + 1;
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           print_log_message_p
                              (   'Error while derivation of priority for bank account NUM '
                               || create_accounts_rec.leg_bank_account_num
                               || 'customer number '
                               || create_accounts_rec.customer_number
                               || 'customer site'
                               || create_accounts_rec.customer_site_number
                               || '. Error is:'
                               || SUBSTR (SQLERRM, 1, 2000)
                              );
                     END;

                     xxetn_debug_pkg.add_debug (   'l_bank_acct_priority '
                                                || l_bank_acct_priority
                                               );
                     l_assignment_attribs_rec.priority :=
                                                      l_bank_acct_priority + 1;
                  END IF;
               
			   
			   -- Below changes Added for v1.86
			   IF create_accounts_rec.c_office = '3PP' AND create_accounts_rec.source_operating_unit IN ('OU US AR','OU CA AR') THEN
			      
				  IF create_accounts_rec.source_operating_unit = 'OU US AR' AND create_accounts_rec.r12_ou_name <> 'OU ETN IND CAN 0120 CAD' THEN

					  l_payee_rec.payment_function := 'CUSTOMER_PAYMENT';
                      l_payee_rec.cust_account_id :=
                                                  --create_accounts_rec.cust_account_id;        --    Off V1.17
                                                  create_accounts_rec.cust_account_id_NEW ;    --    Added V1.17 from Site Staging table
                      --l_payee_rec.party_id := create_accounts_rec.acc_owning_party_id;        --    Off V1.17
                      l_payee_rec.party_id := create_accounts_rec.acc_owning_party_id_NEW;        --    Added V1.17
                      print_log_message_p (   '...create_accounts_rec.cust_account_id '
                                           --|| create_accounts_rec.cust_account_id            --    Off V1.17
                                           || create_accounts_rec.cust_account_id_new            --    Added V1.17 from Site Staging table
                                          );
                      l_payee_rec.account_site_id := create_accounts_rec.site_use_id;
                      print_log_message_p (   '...create_accounts_rec.site_use_id '            --    V1.17 log
                                           || create_accounts_rec.site_use_id
                                          );
                      l_payee_rec.org_id :=
                          NVL (create_accounts_rec.ou_id, create_accounts_rec.org_id);
                      print_log_message_p (   '...create_accounts_rec.org_id '            --    V1.17 log
                                           || NVL (create_accounts_rec.ou_id,
                                                   create_accounts_rec.org_id
                                                  )
                                          );
                      l_payee_rec.org_type := 'OPERATING_UNIT';
                      l_instrument_rec.instrument_id := l_bank_acct_id;
                      print_log_message_p ('...l_bank_acct_id ' || l_bank_acct_id);    --    V1.17 log
                      l_instrument_rec.instrument_type := 'BANKACCOUNT';
                      --v_assignment_attribs_rec.start_date         := SYSDATE;
                      l_assignment_attribs_rec.start_date :=
                                                   create_accounts_rec.leg_start_date;
                      l_assignment_attribs_rec.instrument := l_instrument_rec;
                      print_log_message_p ('Before set_payer_instr_assignment API');    --    V1.17 log
                      iby_fndcpt_setup_pub.set_payer_instr_assignment
                                   (p_api_version             => 1.0,
                                    p_init_msg_list           => fnd_api.g_true,
                                    p_commit                  => fnd_api.g_false,
                                    x_return_status           => l_payee_ret_status,
                                    x_msg_count               => l_payee_msg_count,
                                    x_msg_data                => l_payee_err_msg,
                                    p_payer                   => l_payee_rec,
                                    p_assignment_attribs      => l_assignment_attribs_rec,
                                    x_assign_id               => l_assign_id,
                                    x_response                => l_payee_result_rec
                                   );
                      print_log_message_p (   'After calling Payee Assignment API: result: '        --    V1.17 log
                                           || l_payee_result_rec.result_message
                                          ); 
										   
                      xxetn_debug_pkg.add_debug
                                           (   '   API set_payee_instr_assignment : '
                                            || l_payee_ret_status
                                            || ','
                                            || l_assign_id
                                            || ','
                                            || l_payee_err_msg
                                           );
                      print_log_message_p (   'API set_payee_instr_assignment Return Status: '        --    V1.17 log
                                           || l_payee_ret_status
                                           || ', x_assign_id='                                        --    V1.17 log
                                           || l_assign_id
                                           || ', x_msg_data='                                        --    V1.17 log
                                           || l_payee_err_msg
                                          );
                 
				  ELSIF create_accounts_rec.source_operating_unit = 'OU CA AR' AND create_accounts_rec.r12_ou_name = 'OU ETN IND CAN 0120 CAD' THEN
				      
					  l_payee_rec.payment_function := 'CUSTOMER_PAYMENT';
                      l_payee_rec.cust_account_id :=
                                                  --create_accounts_rec.cust_account_id;        --    Off V1.17
                                                  create_accounts_rec.cust_account_id_NEW ;    --    Added V1.17 from Site Staging table
                      --l_payee_rec.party_id := create_accounts_rec.acc_owning_party_id;        --    Off V1.17
                      l_payee_rec.party_id := create_accounts_rec.acc_owning_party_id_NEW;        --    Added V1.17
                      print_log_message_p (   '...create_accounts_rec.cust_account_id '
                                           --|| create_accounts_rec.cust_account_id            --    Off V1.17
                                           || create_accounts_rec.cust_account_id_new            --    Added V1.17 from Site Staging table
                                          );
                      l_payee_rec.account_site_id := create_accounts_rec.site_use_id;
                      print_log_message_p (   '...create_accounts_rec.site_use_id '            --    V1.17 log
                                           || create_accounts_rec.site_use_id
                                          );
                      l_payee_rec.org_id :=
                          NVL (create_accounts_rec.ou_id, create_accounts_rec.org_id);
                      print_log_message_p (   '...create_accounts_rec.org_id '            --    V1.17 log
                                           || NVL (create_accounts_rec.ou_id,
                                                   create_accounts_rec.org_id
                                                  )
                                          );
                      l_payee_rec.org_type := 'OPERATING_UNIT';
                      l_instrument_rec.instrument_id := l_bank_acct_id;
                      print_log_message_p ('...l_bank_acct_id ' || l_bank_acct_id);    --    V1.17 log
                      l_instrument_rec.instrument_type := 'BANKACCOUNT';
                      --v_assignment_attribs_rec.start_date         := SYSDATE;
                      l_assignment_attribs_rec.start_date :=
                                                   create_accounts_rec.leg_start_date;
                      l_assignment_attribs_rec.instrument := l_instrument_rec;
                      print_log_message_p ('Before set_payer_instr_assignment API');    --    V1.17 log
                      iby_fndcpt_setup_pub.set_payer_instr_assignment
                                   (p_api_version             => 1.0,
                                    p_init_msg_list           => fnd_api.g_true,
                                    p_commit                  => fnd_api.g_false,
                                    x_return_status           => l_payee_ret_status,
                                    x_msg_count               => l_payee_msg_count,
                                    x_msg_data                => l_payee_err_msg,
                                    p_payer                   => l_payee_rec,
                                    p_assignment_attribs      => l_assignment_attribs_rec,
                                    x_assign_id               => l_assign_id,
                                    x_response                => l_payee_result_rec
                                   );
                      print_log_message_p (   'After calling Payee Assignment API: result: '        --    V1.17 log
                                           || l_payee_result_rec.result_message
                                          ); 
										  
                      xxetn_debug_pkg.add_debug
                                           (   '   API set_payee_instr_assignment : '
                                            || l_payee_ret_status
                                            || ','
                                            || l_assign_id
                                            || ','
                                            || l_payee_err_msg
                                           );
                      print_log_message_p (   'API set_payee_instr_assignment Return Status: '        --    V1.17 log
                                           || l_payee_ret_status
                                           || ', x_assign_id='                                        --    V1.17 log
                                           || l_assign_id
                                           || ', x_msg_data='                                        --    V1.17 log
                                           || l_payee_err_msg
                                          );
				  ELSIF create_accounts_rec.source_operating_unit = 'OU CA AR' AND create_accounts_rec.r12_ou_name <> 'OU ETN IND CAN 0120 CAD' THEN
				      l_payee_ret_status := 'S';
					  fnd_file.put_line(fnd_file.log,'No need to attached CA accounts to US ou');
					   
				  END IF;		-- end IF create_accounts_rec.leg_operating_unit = 'OU US AR' AND			  
			   ELSE  -- attaching bank account for Non-3PP sites
                   
				      l_payee_rec.payment_function := 'CUSTOMER_PAYMENT';
                      l_payee_rec.cust_account_id :=
                                                  --create_accounts_rec.cust_account_id;        --    Off V1.17
                                                  create_accounts_rec.cust_account_id_NEW ;    --    Added V1.17 from Site Staging table
                      --l_payee_rec.party_id := create_accounts_rec.acc_owning_party_id;        --    Off V1.17
                      l_payee_rec.party_id := create_accounts_rec.acc_owning_party_id_NEW;        --    Added V1.17
                      print_log_message_p (   '...create_accounts_rec.cust_account_id '
                                           --|| create_accounts_rec.cust_account_id            --    Off V1.17
                                           || create_accounts_rec.cust_account_id_new            --    Added V1.17 from Site Staging table
                                          );
                      l_payee_rec.account_site_id := create_accounts_rec.site_use_id;
                      print_log_message_p (   '...create_accounts_rec.site_use_id '            --    V1.17 log
                                           || create_accounts_rec.site_use_id
                                          );
                      l_payee_rec.org_id :=
                          NVL (create_accounts_rec.ou_id, create_accounts_rec.org_id);
                      print_log_message_p (   '...create_accounts_rec.org_id '            --    V1.17 log
                                           || NVL (create_accounts_rec.ou_id,
                                                   create_accounts_rec.org_id
                                                  )
                                          );
                      l_payee_rec.org_type := 'OPERATING_UNIT';
                      l_instrument_rec.instrument_id := l_bank_acct_id;
                      print_log_message_p ('...l_bank_acct_id ' || l_bank_acct_id);    --    V1.17 log
                      l_instrument_rec.instrument_type := 'BANKACCOUNT';
                      --v_assignment_attribs_rec.start_date         := SYSDATE;
                      l_assignment_attribs_rec.start_date :=
                                                   create_accounts_rec.leg_start_date;
                      l_assignment_attribs_rec.instrument := l_instrument_rec;
					  
					  -- below changes added for v1.87
					  IF create_accounts_rec.leg_source_system = 'ISSC'
					  THEN
					      SELECT COUNT(*)
						    INTO l_accnt_cnt
						    FROM xxconv.xxar_cust_bank_accnt_sepa_stg xcbs
						   WHERE xcbs.plant_number = create_accounts_rec.c_office
						     AND xcbs.bank_account_number = create_accounts_rec.leg_bank_account_num;
					  
					      IF l_accnt_cnt > 0 THEN
						    BEGIN
						        SELECT delivery_method, email
						          INTO l_payee_rec.debit_advice_delivery_method,
								       l_payee_rec.debit_advice_email
						          FROM xxconv.xxar_cust_bank_accnt_sepa_stg xcbs
						         WHERE xcbs.plant_number = create_accounts_rec.c_office
						           AND xcbs.bank_account_number = create_accounts_rec.leg_bank_account_num;
								   
								print_log_message_p ('Bank Account Num: '||create_accounts_rec.leg_bank_account_num ||' Email: '||l_payee_rec.debit_advice_email);
								fnd_file.put_line(fnd_file.log,'Bank Account Num: '||create_accounts_rec.leg_bank_account_num ||' Email: '||l_payee_rec.debit_advice_email);
								EXCEPTION
								   WHEN OTHERS THEN
										l_payee_rec.debit_advice_delivery_method := NULL;
								        l_payee_rec.debit_advice_email := NULL;
						    END;
						  END IF;
					  
					  END IF;
					  -- end changes for v1.87
					  
                      print_log_message_p ('Before set_payer_instr_assignment API');    --    V1.17 log
                      iby_fndcpt_setup_pub.set_payer_instr_assignment
                                   (p_api_version             => 1.0,
                                    p_init_msg_list           => fnd_api.g_true,
                                    p_commit                  => fnd_api.g_false,
                                    x_return_status           => l_payee_ret_status,
                                    x_msg_count               => l_payee_msg_count,
                                    x_msg_data                => l_payee_err_msg,
                                    p_payer                   => l_payee_rec,
                                    p_assignment_attribs      => l_assignment_attribs_rec,
                                    x_assign_id               => l_assign_id,
                                    x_response                => l_payee_result_rec
                                   );
                      print_log_message_p (   'After calling Payee Assignment API: result: '        --    V1.17 log
                                           || l_payee_result_rec.result_message
                                          );
 
                      xxetn_debug_pkg.add_debug
                                           (   '   API set_payee_instr_assignment : '
                                            || l_payee_ret_status
                                            || ','
                                            || l_assign_id
                                            || ','
                                            || l_payee_err_msg
                                           );
                      print_log_message_p (   'API set_payee_instr_assignment Return Status: '        --    V1.17 log
                                           || l_payee_ret_status
                                           || ', x_assign_id='                                        --    V1.17 log
                                           || l_assign_id
                                           || ', x_msg_data='                                        --    V1.17 log
                                           || l_payee_err_msg
                                          );
			   END IF;			-- end IF create_accounts_rec.c_office = '3PP' AND 			  
             										  
			   -- changes end for v1.86

               -- If payee assignment record was successfully created
               IF l_payee_ret_status = fnd_api.g_ret_sts_success
               THEN
                    print_log_message_p('API return Status is SUCCESS');            --    V1.17 log
					 
                  xxetn_debug_pkg.add_debug
                                         (   'Customer Bank Payee API status'
                                          || l_payee_ret_status
                                         );
                  xxetn_debug_pkg.add_debug
                                           (   'Bank Payee Assignment Created'
                                            || l_assign_id
                                           );
                  -- Entire data set for account record created successfully
                  l_retcode := g_success;
               ELSE
                  -- if payee instrument assignment api error 
                  l_retcode := g_error;
                  l_err_code := 'ETN_AR_ASSIGN_IMPORT_ERROR';
                  l_err_msg :=
                     'Error : Payee instrument assignment for bank account is failed. ';
                  print_log_message_p('API return Status is ERROR');            --    V1.17 log
                  print_log_message_p (   l_err_msg
                                       || ' count '
                                       || l_payee_msg_count
                                      );

                  IF l_payee_msg_count > 0
                  THEN
                     FOR i IN 1 .. l_payee_msg_count
                     LOOP
                        l_payee_err_msg :=
                           fnd_msg_pub.get (p_msg_index      => i,
                                            p_encoded        => fnd_api.g_false
                                           );
                        source_rec.source_column_name := NULL;
                        source_rec.source_column_value := NULL;
                        source_rec.ERROR_CODE := 'ETN_AR_ACCOUNT_IMPORT_ERROR';
                        source_rec.error_message :=
                                                  l_err_msg || l_payee_err_msg;
                        print_log_message_p('ERROR=' || l_payee_err_msg);            --    V1.17 log
                        log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                      pov_err_msg        => l_log_err_msg,
                                      pi_err_rec         => source_rec
                                     );
                     END LOOP;
                  END IF;

                  --print_log_message_p (l_payee_err_msg);            --    Off V1.17
               END IF;
			   
			  ELSIF l_account_ret_status <> fnd_api.g_ret_sts_success  -- Bhaskar
               THEN
                   l_retcode := g_error;
                   l_err_code := 'ETN_AR_ACCOUNT_IMPORT_ERROR';
                   l_err_msg := 'Error :Account creation for the Customer bank failed.';
				   fnd_file.put_line(fnd_file.log,'Bank Account Creation failed for accnt: '|| create_accounts_rec.leg_bank_account_num );
                   print_log_message_p (l_err_msg);
			       fnd_file.put_line(fnd_file.log, l_err_msg);
                   
                   IF l_msg_count = 1
                   THEN
                       print_log_message_p ('l_err_msg=' || l_err_msg);            --    Added V1.17

                       source_rec.source_column_name := NULL;
                       source_rec.source_column_value := NULL;
                       source_rec.ERROR_CODE := 'ETN_AR_ACCOUNT_IMPORT_ERROR';
                       source_rec.error_message := l_err_msg || l_account_msg_data;
                       log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                     pov_err_msg        => l_log_err_msg,
                                     pi_err_rec         => source_rec
                                    );
                   --extract API errors
                   ELSIF l_msg_count > 1
                   THEN
                      FOR i IN 1 .. l_msg_count
                      LOOP
                          l_account_msg_data := fnd_msg_pub.get (p_msg_index => i,
                                                                 p_encoded   => fnd_api.g_false
                                                                 );
                          print_log_message_p ('l_account_msg_data=' || l_account_msg_data);            --    Added V1.17
                          source_rec.source_column_name := NULL;
                          source_rec.source_column_value := NULL;
                          source_rec.ERROR_CODE := 'ETN_AR_ACCOUNT_IMPORT_ERROR';
                          source_rec.error_message := l_err_msg || l_account_msg_data;
					  
                          log_errors_p (pov_ret_stats => l_log_ret_stats,
                                        pov_err_msg   => l_log_err_msg,
                                        pi_err_rec    => source_rec
                                       );
                      END LOOP;
                    END IF; -- bhaskar
			   
			   END IF;  
			   
			   
            -- Added by Ankur --
            ELSIF l_bank_acct_id IS NOT NULL   AND l_val_error = 'N'   -- V1.85,9031, added AND condition
            THEN
                print_log_message_p('Ext_Bank_Account_ID: ' || l_bank_acct_id || ' is ATTACHED with Account_Owner_PartyID: ' || create_accounts_rec.acc_owning_party_id_NEW);    -- Added V1.17
                print_log_message_p (   'l_bank_acct_id is not null:'
                                    || l_bank_acct_id
                                   );

               -- If account record was successfully created
               IF l_bank_acct_id IS NOT NULL
               THEN
                  xxetn_debug_pkg.add_debug
                         ('Creating Customer Bank Payer Assignment using API');
                  xxetn_debug_pkg.add_debug ('Setting Bank Account priority ');

                  --fetch the count of the bank account number to set the priority
                  BEGIN
                     l_bank_acct_priority_count := 0;
                     xxetn_debug_pkg.add_debug
                                            (   'l_bank_acct_priority_count '
                                             || l_bank_acct_priority_count
                                            );
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        xxetn_debug_pkg.add_debug
                           (   'Error in deriving bank acct priority count. Error is: '
                            || SUBSTR (SQLERRM, 1, 2000)
                           );
                  END;

                  IF l_bank_acct_priority_count = 0
                  THEN
                     l_assignment_attribs_rec.priority := 1;
                     xxetn_debug_pkg.add_debug
                                           (   'priority '
                                            || l_assignment_attribs_rec.priority
                                           );
                  ELSE
                     BEGIN
                        l_assignment_attribs_rec.priority :=
                                        l_assignment_attribs_rec.priority + 1;
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           print_log_message_p
                              (   'Error while derivation of priority for bank account NUM '
                               || create_accounts_rec.leg_bank_account_num
                               || 'customer number '
                               || create_accounts_rec.customer_number
                               || 'customer site'
                               || create_accounts_rec.customer_site_number
                               || '. Error is:'
                               || SUBSTR (SQLERRM, 1, 2000)
                              );
                     END;

                     xxetn_debug_pkg.add_debug (   'l_bank_acct_priority '
                                                || l_bank_acct_priority
                                               );
                     l_assignment_attribs_rec.priority :=
                                                      l_bank_acct_priority + 1;
                  END IF;
               END IF;
			   
			   -- Below changes Added for v1.86
			   IF create_accounts_rec.c_office = '3PP' AND create_accounts_rec.source_operating_unit IN ('OU US AR','OU CA AR') THEN
			      
				  IF create_accounts_rec.source_operating_unit = 'OU US AR' AND create_accounts_rec.r12_ou_name <> 'OU ETN IND CAN 0120 CAD' THEN
 
					  l_payee_rec.payment_function := 'CUSTOMER_PAYMENT';
                      l_payee_rec.cust_account_id :=
                                                  --create_accounts_rec.cust_account_id;        --    Off V1.17
                                                  create_accounts_rec.cust_account_id_NEW;        --    Added V1.17
                      --l_payee_rec.party_id := create_accounts_rec.acc_owning_party_id;            --    Off V1.17
                      l_payee_rec.party_id := create_accounts_rec.acc_owning_party_id_NEW;        --  Added V1.17
                      print_log_message_p (   '...create_accounts_rec.cust_account_id '
                                           || --create_accounts_rec.cust_account_id            --    Off V1.17
                                               create_accounts_rec.cust_account_id_NEW            --    Added V1.17
                                          );
                      print_log_message_p
                                       (   '...create_accounts_rec.acc_owning_party_id '
                                        --|| create_accounts_rec.acc_owning_party_id        --    Off V1.17
                                        || create_accounts_rec.acc_owning_party_id_NEW        --    Added V1.17
                                       );
                      l_payee_rec.account_site_id := create_accounts_rec.site_use_id;
                      print_log_message_p (   '...create_accounts_rec.site_use_id '
                                           || create_accounts_rec.site_use_id
                                          );
                      l_payee_rec.org_id :=
                          NVL (create_accounts_rec.ou_id, create_accounts_rec.org_id);
                      print_log_message_p (   '...create_accounts_rec.org_id '
                                           || NVL (create_accounts_rec.ou_id,
                                                   create_accounts_rec.org_id
                                                  )
                                          );
                      l_payee_rec.org_type := 'OPERATING_UNIT';
                      l_instrument_rec.instrument_id := l_bank_acct_id;
                      print_log_message_p ('l_bank_acct_id ' || l_bank_acct_id);
                      l_instrument_rec.instrument_type := 'BANKACCOUNT';
                      --v_assignment_attribs_rec.start_date         := SYSDATE;
                      l_assignment_attribs_rec.start_date :=
                                                   create_accounts_rec.leg_start_date;
                      l_assignment_attribs_rec.instrument := l_instrument_rec;
                      print_log_message_p ('Before calling set_payer_instr_assignment API');        --    Added V1.17
                      iby_fndcpt_setup_pub.set_payer_instr_assignment
                                   (p_api_version             => 1.0,
                                    p_init_msg_list           => fnd_api.g_true,
                                    p_commit                  => fnd_api.g_false,
                                    x_return_status           => l_payee_ret_status,
                                    x_msg_count               => l_payee_msg_count,
                                    x_msg_data                => l_payee_err_msg,
                                    p_payer                   => l_payee_rec,
                                    p_assignment_attribs      => l_assignment_attribs_rec,
                                    x_assign_id               => l_assign_id,
                                    x_response                => l_payee_result_rec
                                   );
                      print_log_message_p (   'Result of Payee Assignment API: '
                                           || 'x_response.result_message=' || l_payee_result_rec.result_message                --    Added V1.17
                                           || ', x_response.result_code=' || l_payee_result_rec.result_code                        --    Added V1.17
                                           || ', x_response.result_category=' || l_payee_result_rec.result_category                --    Added V1.17
                                          );
                      xxetn_debug_pkg.add_debug
                                           (   '   API set_payee_instr_assignment : '
                                            || l_payee_ret_status
                                            || ','
                                            || l_assign_id
                                            || ','
                                            || l_payee_err_msg
                                           );
                      print_log_message_p (   'Result of API set_payee_instr_assignment Status='            --    Added V1.17
                                           || l_payee_ret_status
                                           || ', x_assign_id='                                                --    Added V1.17
                                           || l_assign_id
                                           --|| ',x_msg_data='                                                --    Off V1.17
                                           --|| l_payee_err_msg                                            --    Off V1.17
                                          ); 
										  
				  ELSIF create_accounts_rec.source_operating_unit = 'OU CA AR' AND create_accounts_rec.r12_ou_name = 'OU ETN IND CAN 0120 CAD' THEN
 
					  l_payee_rec.payment_function := 'CUSTOMER_PAYMENT';
                      l_payee_rec.cust_account_id :=
                                                  --create_accounts_rec.cust_account_id;        --    Off V1.17
                                                  create_accounts_rec.cust_account_id_NEW;        --    Added V1.17
                      --l_payee_rec.party_id := create_accounts_rec.acc_owning_party_id;            --    Off V1.17
                      l_payee_rec.party_id := create_accounts_rec.acc_owning_party_id_NEW;        --  Added V1.17
                      print_log_message_p (   '...create_accounts_rec.cust_account_id '
                                           || --create_accounts_rec.cust_account_id            --    Off V1.17
                                               create_accounts_rec.cust_account_id_NEW            --    Added V1.17
                                          );
                      print_log_message_p
                                       (   '...create_accounts_rec.acc_owning_party_id '
                                        --|| create_accounts_rec.acc_owning_party_id        --    Off V1.17
                                        || create_accounts_rec.acc_owning_party_id_NEW        --    Added V1.17
                                       );
                      l_payee_rec.account_site_id := create_accounts_rec.site_use_id;
                      print_log_message_p (   '...create_accounts_rec.site_use_id '
                                           || create_accounts_rec.site_use_id
                                          );
                      l_payee_rec.org_id :=
                          NVL (create_accounts_rec.ou_id, create_accounts_rec.org_id);
                      print_log_message_p (   '...create_accounts_rec.org_id '
                                           || NVL (create_accounts_rec.ou_id,
                                                   create_accounts_rec.org_id
                                                  )
                                          );
                      l_payee_rec.org_type := 'OPERATING_UNIT';
                      l_instrument_rec.instrument_id := l_bank_acct_id;
                      print_log_message_p ('l_bank_acct_id ' || l_bank_acct_id);
                      l_instrument_rec.instrument_type := 'BANKACCOUNT';
                      --v_assignment_attribs_rec.start_date         := SYSDATE;
                      l_assignment_attribs_rec.start_date :=
                                                   create_accounts_rec.leg_start_date;
                      l_assignment_attribs_rec.instrument := l_instrument_rec;
                      print_log_message_p ('Before calling set_payer_instr_assignment API');        --    Added V1.17
                      iby_fndcpt_setup_pub.set_payer_instr_assignment
                                   (p_api_version             => 1.0,
                                    p_init_msg_list           => fnd_api.g_true,
                                    p_commit                  => fnd_api.g_false,
                                    x_return_status           => l_payee_ret_status,
                                    x_msg_count               => l_payee_msg_count,
                                    x_msg_data                => l_payee_err_msg,
                                    p_payer                   => l_payee_rec,
                                    p_assignment_attribs      => l_assignment_attribs_rec,
                                    x_assign_id               => l_assign_id,
                                    x_response                => l_payee_result_rec
                                   );
                      print_log_message_p (   'Result of Payee Assignment API: '
                                           || 'x_response.result_message=' || l_payee_result_rec.result_message                --    Added V1.17
                                           || ', x_response.result_code=' || l_payee_result_rec.result_code                        --    Added V1.17
                                           || ', x_response.result_category=' || l_payee_result_rec.result_category                --    Added V1.17
                                          );
                      xxetn_debug_pkg.add_debug
                                           (   '   API set_payee_instr_assignment : '
                                            || l_payee_ret_status
                                            || ','
                                            || l_assign_id
                                            || ','
                                            || l_payee_err_msg
                                           );
                      print_log_message_p (   'Result of API set_payee_instr_assignment Status='            --    Added V1.17
                                           || l_payee_ret_status
                                           || ', x_assign_id='                                                --    Added V1.17
                                           || l_assign_id
                                           --|| ',x_msg_data='                                                --    Off V1.17
                                           --|| l_payee_err_msg                                            --    Off V1.17
                                          );
										   
					
				  ELSIF create_accounts_rec.source_operating_unit = 'OU CA AR' AND create_accounts_rec.r12_ou_name <> 'OU ETN IND CAN 0120 CAD' THEN
				      l_payee_ret_status := 'S';
					  fnd_file.put_line(fnd_file.log,'No need to attached CA accounts to US ou');
					
					
				  END IF;  -- END IF create_accounts_rec.leg_operating_unit = 'OU US AR' AND
			   ELSE
 
					  l_payee_rec.payment_function := 'CUSTOMER_PAYMENT';
                      l_payee_rec.cust_account_id :=
                                                  --create_accounts_rec.cust_account_id;        --    Off V1.17
                                                  create_accounts_rec.cust_account_id_NEW;        --    Added V1.17
                      --l_payee_rec.party_id := create_accounts_rec.acc_owning_party_id;            --    Off V1.17
                      l_payee_rec.party_id := create_accounts_rec.acc_owning_party_id_NEW;        --  Added V1.17
                      print_log_message_p (   '...create_accounts_rec.cust_account_id '
                                           || --create_accounts_rec.cust_account_id            --    Off V1.17
                                               create_accounts_rec.cust_account_id_NEW            --    Added V1.17
                                          );
                      print_log_message_p
                                       (   '...create_accounts_rec.acc_owning_party_id '
                                        --|| create_accounts_rec.acc_owning_party_id        --    Off V1.17
                                        || create_accounts_rec.acc_owning_party_id_NEW        --    Added V1.17
                                       );
                      l_payee_rec.account_site_id := create_accounts_rec.site_use_id;
                      print_log_message_p (   '...create_accounts_rec.site_use_id '
                                           || create_accounts_rec.site_use_id
                                          );
                      l_payee_rec.org_id :=
                          NVL (create_accounts_rec.ou_id, create_accounts_rec.org_id);
                      print_log_message_p (   '...create_accounts_rec.org_id '
                                           || NVL (create_accounts_rec.ou_id,
                                                   create_accounts_rec.org_id
                                                  )
                                          );
                      l_payee_rec.org_type := 'OPERATING_UNIT';
                      l_instrument_rec.instrument_id := l_bank_acct_id;
                      print_log_message_p ('l_bank_acct_id ' || l_bank_acct_id);
                      l_instrument_rec.instrument_type := 'BANKACCOUNT';
                      --v_assignment_attribs_rec.start_date         := SYSDATE;
                      l_assignment_attribs_rec.start_date :=
                                                   create_accounts_rec.leg_start_date;
                      l_assignment_attribs_rec.instrument := l_instrument_rec;
					  
					  -- below changes added for v1.87
					  IF create_accounts_rec.leg_source_system = 'ISSC'
					  THEN
					      SELECT COUNT(*)
						    INTO l_accnt_cnt
						    FROM xxconv.xxar_cust_bank_accnt_sepa_stg xcbs
						   WHERE xcbs.plant_number = create_accounts_rec.c_office
						     AND xcbs.bank_account_number = create_accounts_rec.leg_bank_account_num;
					  
					      IF l_accnt_cnt > 0 THEN
						    BEGIN
							    SELECT delivery_method, email
						          INTO l_payee_rec.debit_advice_delivery_method,
								       l_payee_rec.debit_advice_email
						          FROM xxconv.xxar_cust_bank_accnt_sepa_stg xcbs
						         WHERE xcbs.plant_number = create_accounts_rec.c_office
						           AND xcbs.bank_account_number = create_accounts_rec.leg_bank_account_num;
								   
								print_log_message_p ('Bank Account Num: '||create_accounts_rec.leg_bank_account_num ||' Email: '||l_payee_rec.debit_advice_email);
								fnd_file.put_line(fnd_file.log,'Bank Account Num: '||create_accounts_rec.leg_bank_account_num ||' Email: '||l_payee_rec.debit_advice_email);
								EXCEPTION
								   WHEN OTHERS THEN
										l_payee_rec.debit_advice_delivery_method := NULL;
								        l_payee_rec.debit_advice_email := NULL;
						    END;
						  END IF;
					  
					  END IF;
					  -- end changes for v1.87
					  
                      print_log_message_p ('Before calling set_payer_instr_assignment API');        --    Added V1.17
                      iby_fndcpt_setup_pub.set_payer_instr_assignment
                                   (p_api_version             => 1.0,
                                    p_init_msg_list           => fnd_api.g_true,
                                    p_commit                  => fnd_api.g_false,
                                    x_return_status           => l_payee_ret_status,
                                    x_msg_count               => l_payee_msg_count,
                                    x_msg_data                => l_payee_err_msg,
                                    p_payer                   => l_payee_rec,
                                    p_assignment_attribs      => l_assignment_attribs_rec,
                                    x_assign_id               => l_assign_id,
                                    x_response                => l_payee_result_rec
                                   );
                      print_log_message_p (   'Result of Payee Assignment API: '
                                           || 'x_response.result_message=' || l_payee_result_rec.result_message                --    Added V1.17
                                           || ', x_response.result_code=' || l_payee_result_rec.result_code                        --    Added V1.17
                                           || ', x_response.result_category=' || l_payee_result_rec.result_category                --    Added V1.17
                                          );
                      xxetn_debug_pkg.add_debug
                                           (   '   API set_payee_instr_assignment : '
                                            || l_payee_ret_status
                                            || ','
                                            || l_assign_id
                                            || ','
                                            || l_payee_err_msg
                                           );
                      print_log_message_p (   'Result of API set_payee_instr_assignment Status='            --    Added V1.17
                                           || l_payee_ret_status
                                           || ', x_assign_id='                                                --    Added V1.17
                                           || l_assign_id
                                           --|| ',x_msg_data='                                                --    Off V1.17
                                           --|| l_payee_err_msg                                            --    Off V1.17
                                          ); 
			   
			   END IF;  -- IF create_accounts_rec.c_office = '3PP' AND
				  
			   -- Changes end for v1.86
			   
                print_log_message_p('here');
               -- If payee assignment record was successfully created
               IF l_payee_ret_status = fnd_api.g_ret_sts_success
               THEN
                  print_log_message_p('API set_payee_instr_assignment - SUCCESS2, interface_txn_id: '||create_accounts_rec.interface_txn_id); 
                  xxetn_debug_pkg.add_debug
                                         (   'Customer Bank Payee API status'
                                          || l_payee_ret_status
                                         );
                  xxetn_debug_pkg.add_debug
                                           (   'Bank Payee Assignment Created'
                                            || l_assign_id
                                           );
                  -- Entire data set for account record created successfully
                  l_retcode := g_success;
               ELSE
                  -- if payee instrument assignment api error 
                  l_retcode := g_error;
                  l_err_code := 'ETN_AR_ASSIGN_IMPORT_ERROR';
                  l_err_msg :=
                     'Error : Payee instrument assignment for bank account is failed. ';
                  print_log_message_p (   l_err_msg
                                       || ' count '
                                       || l_payee_msg_count
                                      );

                  IF l_payee_msg_count > 0
                  THEN
                     FOR i IN 1 .. l_payee_msg_count
                     LOOP
                        l_payee_err_msg :=
                           fnd_msg_pub.get (p_msg_index      => i,
                                            p_encoded        => fnd_api.g_false
                                           );
                        source_rec.interface_staging_id :=
                                        create_accounts_rec.interface_txn_id;
                        source_rec.source_column_name := NULL;
                        source_rec.source_column_value := NULL;
                        source_rec.ERROR_CODE := 'ETN_AR_ACCOUNT_IMPORT_ERROR';
                        source_rec.error_message :=
                                                  l_err_msg || l_payee_err_msg;
                        log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                      pov_err_msg        => l_log_err_msg,
                                      pi_err_rec         => source_rec
                                     );
                        print_log_message_p ('API Err Msg=' || l_payee_err_msg);                                --    Added V1.17 log
                     END LOOP;
                  END IF;

                  --print_log_message_p (l_payee_err_msg);                                    --    Off V1.17
               END IF;
            -- Added by Ankur --

            -- if api error
           /* ELSIF l_account_ret_status <> fnd_api.g_ret_sts_success
            THEN
               l_retcode := g_error;
               l_err_code := 'ETN_AR_ACCOUNT_IMPORT_ERROR';
               l_err_msg :=
                      'Error :Account creation for the Customer bank failed.';
               print_log_message_p (l_err_msg);
			   fnd_file.put_line(fnd_file.log, l_err_msg);

               IF l_msg_count = 1
               THEN
                   print_log_message_p ('l_err_msg=' || l_err_msg);            --    Added V1.17

                   source_rec.source_column_name := NULL;
                   source_rec.source_column_value := NULL;
                   source_rec.ERROR_CODE := 'ETN_AR_ACCOUNT_IMPORT_ERROR';
                   source_rec.error_message := l_err_msg || l_account_msg_data;
                   log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                 pov_err_msg        => l_log_err_msg,
                                 pi_err_rec         => source_rec
                                );
               --extract API errors
               ELSIF l_msg_count > 1
               THEN
                  FOR i IN 1 .. l_msg_count
                  LOOP
                      l_account_msg_data := fnd_msg_pub.get (p_msg_index => i,
                                                             p_encoded   => fnd_api.g_false
                                                             );
                      print_log_message_p ('l_account_msg_data=' || l_account_msg_data);            --    Added V1.17
                      source_rec.source_column_name := NULL;
                      source_rec.source_column_value := NULL;
                      source_rec.ERROR_CODE := 'ETN_AR_ACCOUNT_IMPORT_ERROR';
                      source_rec.error_message := l_err_msg || l_account_msg_data;
					  
                      log_errors_p (pov_ret_stats => l_log_ret_stats,
                                    pov_err_msg   => l_log_err_msg,
                                    pi_err_rec    => source_rec
                                   );
                  END LOOP;
               END IF; */
			ELSIF l_bank_acct_id IS NOT NULL   AND l_val_error = 'Y'  THEN -- V1.85,9031  Added ELSEIF
				l_retcode := g_error;
				fnd_file.put_line(fnd_file.log,'l_bank_acct_id: '|| l_bank_acct_id ||' l_val_error = Y');
				
            ELSE
               COMMIT;
               l_retcode := g_success;
            END IF;

            IF l_retcode = g_success
            THEN
               --Update process_flag to 'C' in case of API Success 
               UPDATE xxar_customer_bankaccnts_stg
                  SET external_bank_account_id = l_bank_acct_id,
                      process_flag = g_converted,
                      run_sequence_id = g_new_run_seq_id,
                      last_updated_date = SYSDATE,
                      last_updated_by = g_last_updated_by,
                      last_update_login = g_last_update_login,
                      program_application_id = g_prog_appl_id,
                      program_id = g_conc_program_id,
                      program_update_date = SYSDATE,
                      request_id = g_request_id
                WHERE interface_txn_id = create_accounts_rec.interface_txn_id;
            ELSE
               print_log_message_p ('Inside Else 1'); 
               --Update process_flag to 'E' in case of API Failure
               UPDATE xxar_customer_bankaccnts_stg
                  SET process_flag = g_error,
                      run_sequence_id = g_new_run_seq_id,
                      ERROR_TYPE = g_imp_err_type,
                      last_updated_date = SYSDATE,
                      last_updated_by = g_last_updated_by,
                      last_update_login = g_last_update_login,
                      program_application_id = g_prog_appl_id,
                      program_id = g_conc_program_id,
                      program_update_date = SYSDATE,
                      request_id = g_request_id
                WHERE interface_txn_id = create_accounts_rec.interface_txn_id;
            END IF;

            COMMIT;
         EXCEPTION
            WHEN OTHERS
            THEN
               g_retcode := 1;
               l_err_code := 'ETN_AR_ACCOUNT_IMPORT_ERROR';
               l_err_msg :=
                     'Error : Exception in Customer Account Import Loop. '
                  || SUBSTR (SQLERRM, 1, 240);
               print_log_message_p (l_err_msg);
               source_rec.source_column_name := NULL;
               source_rec.source_column_value := NULL;
               source_rec.ERROR_CODE := 'ETN_AR_BRANCH_IMPORT_ERROR';
               source_rec.error_message := l_err_msg;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );
              -- ROLLBACK TO start_account;
         END;
      END LOOP;

      END LOOP;
	  
	  -- Below changes added for v1.87
	  FOR sepa_bank_accnt_rec IN sepa_bank_accnt_cur 
	  LOOP
	      
		  l_debt_auth_rec := NULL;
	      
		  SELECT COUNT(*)
		    INTO l_auth_count
		    FROM iby_debit_authorizations
           WHERE external_bank_account_use_id   = sepa_bank_accnt_rec.site_use_id
             AND authorization_reference_number = sepa_bank_accnt_rec.unique_auth_ref_id
             AND payment_type_code        = sepa_bank_accnt_rec.transaction_type
             AND external_bank_account_id = sepa_bank_accnt_rec.external_bank_account_id;
	     
	      IF l_auth_count > 0 THEN
		     print_log_message_p('Debt Authorization already created for Bank Account ID: '||sepa_bank_accnt_rec.external_bank_account_id );
			 fnd_file.put_line(fnd_file.log,'Debt Authorization already created for Bank Account ID: '||sepa_bank_accnt_rec.external_bank_account_id );			 
		  ELSE
		  
		     SELECT legal_entity_id
		       INTO l_debt_auth_rec.creditor_legal_entity_id
			   FROM xle_entity_profiles
		      WHERE UPPER(name) = UPPER(sepa_bank_accnt_rec.payee_legal_entity);
		  
		     l_debt_payer_rec.party_id := sepa_bank_accnt_rec.acc_owning_party_id;
			 
			 l_debt_auth_rec.debit_authorization_id := sepa_bank_accnt_rec.debit_auth_id;
			 l_debt_auth_rec.initial_debit_authorization_id := sepa_bank_accnt_rec.debit_auth_id;
			 l_debt_auth_rec.authorization_reference_number := sepa_bank_accnt_rec.unique_auth_ref_id;
			 l_debt_auth_rec.authorization_revision_number  := 1;
			 l_debt_auth_rec.payment_type_code := sepa_bank_accnt_rec.transaction_type;
			 l_debt_auth_rec.auth_sign_date := sepa_bank_accnt_rec.auth_signing_date;
			 l_debt_auth_rec.pre_notification_required_flag := sepa_bank_accnt_rec.pre_notif_required;
			 l_debt_auth_rec.creditor_identifier := sepa_bank_accnt_rec.payee_identifier;
			 l_debt_auth_rec.debit_auth_begin    := sepa_bank_accnt_rec.auth_signing_date;
			 l_debt_auth_rec.external_bank_account_id := sepa_bank_accnt_rec.external_bank_account_id;
			 l_debt_auth_rec.debtor_party_id := sepa_bank_accnt_rec.acc_owning_party_id;
			 l_debt_auth_rec.direct_debit_count := 0;
			 l_debt_auth_rec.priority := 1;
			 l_debt_auth_rec.debit_auth_frequency := NULL;
			 l_debt_auth_rec.active_status := NULL;
			 l_debt_auth_rec.debit_auth_flag := sepa_bank_accnt_rec.payer_grant_auth_debt_acct;
			 l_debt_auth_rec.debit_auth_reference := NULL;
			 
		     fnd_file.put_line(fnd_file.log,'Creating Debt Authorization for Bank Account ID: '||sepa_bank_accnt_rec.external_bank_account_id );
			 
			 iby_fndcpt_setup_pub.create_debit_authorization
                                            (
                                              p_api_version    => 1.0,
                                              p_init_msg_list  => fnd_api.g_true,
                                              p_commit         => fnd_api.g_false,
	                                          p_debit_auth_rec => l_debt_auth_rec,
	                                          p_payer          => l_debt_payer_rec,
                                              x_debit_auth_id  => l_debit_auth_id,
                                              x_return_status  => l_debt_ret_status,
                                              x_msg_count      => l_debt_msg_count,
                                              x_msg_data       => l_debt_err_msg,
	                                          x_response       => l_debt_result_rec
                                            );
											
			 print_log_message_p ( 'Result of Create Debt Authorization API: '
                                    || 'x_response.result_message= ' || l_debt_result_rec.result_message 
                                    || ', x_response.result_code= ' || l_debt_result_rec.result_code 
                                    || ', x_response.result_category= ' || l_debt_result_rec.result_category 
                                 );
             xxetn_debug_pkg.add_debug ( 'API create_debit_authorization : '
                                          || l_debt_ret_status
                                          || ','
                                          || l_debit_auth_id
                                          || ','
                                          || l_debt_err_msg
                                       );
             print_log_message_p ( 'Result of API create_debit_authorization Status= ' 
                                    || l_debt_ret_status
                                    || ', l_debit_auth_id= '   
                                    || l_debit_auth_id 
                                 );
								 
			 IF l_debt_ret_status = fnd_api.g_ret_sts_success
             THEN
				  print_log_message_p('Debt Authorization successfully created for Bank Account ID: '||sepa_bank_accnt_rec.external_bank_account_id );
				  fnd_file.put_line(fnd_file.log,'Debt Authorization successfully created for Bank Account ID: '||sepa_bank_accnt_rec.external_bank_account_id );
				  
				  UPDATE xxar_customer_bankaccnts_stg
				     SET leg_process_flag = 'C'
				   WHERE external_bank_account_id = sepa_bank_accnt_rec.external_bank_account_id
				     AND interface_txn_id = sepa_bank_accnt_rec.interface_txn_id; 
                  
                  l_retcode := g_success;
             ELSE  -- if debt authorization api error 
                  
				  fnd_file.put_line(fnd_file.log,'Debt Authorization failed for Bank Account ID: '||sepa_bank_accnt_rec.external_bank_account_id );
				  
				  l_retcode  := g_error;
                  l_err_code := 'ETN_AR_BANK_ACCNT_DEPT_AUTH_ERROR';
                  l_err_msg  := 'Error: Debt Authorization failed for Bank Account ID: '||sepa_bank_accnt_rec.external_bank_account_id;
                  print_log_message_p ( l_err_msg
                                        || ' count '
                                        || l_debt_msg_count
                                       );

                  IF l_debt_msg_count > 0
                  THEN
                     FOR i IN 1 .. l_debt_msg_count
                     LOOP
                        l_debt_err_msg := fnd_msg_pub.get (p_msg_index => i,
                                                           p_encoded   => fnd_api.g_false
                                                          );
                        source_rec.interface_staging_id := sepa_bank_accnt_rec.interface_txn_id;
                        source_rec.source_column_name := NULL;
                        source_rec.source_column_value := NULL;
                        source_rec.ERROR_CODE := 'ETN_AR_BANK_ACCNT_DEPT_AUTH_ERROR';
                        source_rec.error_message := l_err_msg || l_debt_err_msg;
						
                        log_errors_p (pov_ret_stats => l_log_ret_stats,
                                      pov_err_msg   => l_log_err_msg,
                                      pi_err_rec    => source_rec
                                     );
                        print_log_message_p ('API iby_fndcpt_setup_pub.create_debit_authorization Err Msg= ' || l_debt_err_msg);
						
                     END LOOP;
                  END IF;
				  
				  UPDATE xxar_customer_bankaccnts_stg
				     SET leg_process_flag = 'E'
				   WHERE external_bank_account_id = sepa_bank_accnt_rec.external_bank_account_id
				     AND interface_txn_id = sepa_bank_accnt_rec.interface_txn_id;
				
				  COMMIT;

               END IF; 

		  END IF;
	  END LOOP;
	  -- Changes end v1.87
   EXCEPTION
      WHEN OTHERS
      THEN
         g_retcode := 1;
         l_err_code := 'ETN_AR_ACCOUNT_IMPORT_ERROR';
         l_err_msg :=
               'Error : Exception in Customer Account Import Procedure. '
            || SUBSTR (SQLERRM, 1, 240);
         print_log_message_p (l_err_msg);
		 fnd_file.put_line(fnd_file.log, l_err_msg|| 'x_result: '|| x_result);
   END create_bank_accounts;

--
-- =============================================================================
-- Procedure: validate_stmt_cycle_p
-- =============================================================================
-- This private procedure will derive R12 Payment Term Details
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: VALIDATE_SITES_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters  :
--  piv_leg_stmt_cycle_name : Legacy Statement Cycle Name
--
--  Output Parameters :

   --  pov_status        : Returns Status of Validation as 'S' or 'E'
--  pov_error_code    : Returns Error Code
--  pov_error_message : Returns Error Message
--
--  Return            : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE validate_stmt_cycle_p (
      pov_status                OUT NOCOPY      VARCHAR2,
      pov_error_code            OUT NOCOPY      VARCHAR2,
      pov_error_message         OUT NOCOPY      VARCHAR2,
      pov_leg_stmt_cycle_name   OUT NOCOPY      VARCHAR2,
      piv_leg_stmt_cycle_name   IN              VARCHAR2
   )
   IS
   BEGIN
      -- Reset Output Parametere
      pov_status := 'S';
      pov_error_code := NULL;
      pov_error_message := NULL;

      -- Derive Term ID
      BEGIN
         SELECT arc.NAME
           INTO pov_leg_stmt_cycle_name
           FROM ar_statement_cycles arc
          WHERE UPPER (arc.NAME) = UPPER (piv_leg_stmt_cycle_name);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            pov_status := g_error;
            pov_leg_stmt_cycle_name := NULL;
            pov_error_code := 'NO_STATEMENT_CYCLE';
            pov_error_message :=
                  'Statement Cycle Not defined in R12: '
               || piv_leg_stmt_cycle_name;
         WHEN TOO_MANY_ROWS
         THEN
            pov_status := g_error;
            pov_leg_stmt_cycle_name := NULL;
            pov_error_code := 'TOO_MANY_STATEMENT_CYCLE';
            pov_error_message :=
                  'Too Many Statement Cycle defined in R12: '
               || piv_leg_stmt_cycle_name;
         WHEN OTHERS
         THEN
            pov_status := g_error;
            pov_leg_stmt_cycle_name := NULL;
            pov_error_code := 'SQL_STATEMENT_CYCLE';
            pov_error_message :=
                  'SQL Error occured while fetching Payment term: '
               || piv_leg_stmt_cycle_name
               || '. Error:'
               || SQLERRM;
      END;
   EXCEPTION
      WHEN OTHERS
      THEN
         print_log_message_p
            (   'ERROR : XXAR_CUSTOMERS_PKG.VALIDATE_STMT_CYCLE_P->WHEN_OTHERS->'
             || SQLERRM
            );
   END validate_stmt_cycle_p;

--
-- =============================================================================
-- Procedure: validate_contacts_p
-- =============================================================================
-- This private procedure will perform custom validations on Contacts
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: MAIN_PROC_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters  : NONE
--
--  Output Parameters :
--  pov_ret_stats     : Return Status of Procedure as 'S' or 'E'
--  pov_err_msg       : Returns Error Message
--
--  Return            : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE validate_contacts_p (
      pov_ret_stats   OUT NOCOPY   VARCHAR2,
      pov_err_msg     OUT NOCOPY   VARCHAR2
   )
   IS
      l_status                  VARCHAR2 (20);
      l_count                   NUMBER                                   := 0;
      l_return_status           VARCHAR2 (20);
      l_error_msg               VARCHAR2 (2000);
      l_log_ret_stats           VARCHAR2 (10);
      l_log_err_msg             VARCHAR2 (2000);
      l_api_stats               VARCHAR2 (10);
      l_err_cnt                 NUMBER                                   := 0;
      l_party_id                NUMBER;
      l_party_site_id           NUMBER;
      l_customer_acct_site_id   NUMBER;
      l_cust_account_id         NUMBER;
      -- Error Table Record Type
      source_rec                xxetn_common_error_pkg.g_source_rec_type;

      -- Staging Table Cursor to Process Records
      CURSOR validate_contact_cur
      IS
         SELECT   *
             FROM xxar_customer_contact_stg xcs
            WHERE xcs.process_flag IN (g_new_rec, g_err_rec, g_val_rec)
              AND xcs.batch_id = NVL (g_new_batch_id, g_batch_id)
              AND leg_source_system = NVL (g_leg_src_sys, leg_source_system)
              AND NVL(leg_operating_unit,'XXX') = NVL(NVL (g_leg_ou, leg_operating_unit),'XXX')
         ORDER BY xcs.interface_txn_id;
   BEGIN
      pov_ret_stats := 'S';
      pov_err_msg := NULL;
      g_total_count := 0;
      l_count := 0;
      g_failed_count := 0;
      debug_msg_p ('STEP:6.1',
                   'VALIDATE_CONTACTS_P',
                   'In Begin of Prc: VALIDATE_CONTACTS_P'
                  );
      -- Assign Batch Id and Run Sequence Id for Current Run
      g_new_run_seq_id :=
                         NVL (g_new_run_seq_id, xxetn_run_sequences_s.NEXTVAL);
      g_new_batch_id := NVL (g_new_batch_id, g_batch_id);
      -- Intialize Batch Id and Run Sequence Id for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_new_batch_id;         -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;
      -- run sequence id
      debug_msg_p ('STEP:6.2',
                   'VALIDATE_CONTACTS_P',
                      'Batch Id to Update: '
                   || g_new_batch_id
                   || ' and Run Sequence Id: '
                   || g_new_run_seq_id
                  );

      -- Open Customer Cursor to Validate the data
      FOR validate_contact_rec IN validate_contact_cur
      LOOP
         l_status := g_validated;
         l_return_status := 'S';
         l_error_msg := NULL;
         l_party_id := NULL;
         l_party_site_id := NULL;
         l_customer_acct_site_id := NULL;
         l_cust_account_id := NULL;
         -- total record count
         g_total_count := g_total_count + 1;
         debug_msg_p ('STEP:6.3',
                      'VALIDATE_CONTACTS_P',
                         'Inside Cursor Loop for Record Id: '
                      || validate_contact_rec.interface_txn_id
                     );
         source_rec.interface_staging_id :=
                                         validate_contact_rec.interface_txn_id;

         IF validate_contact_rec.leg_site_number IS NOT NULL
         AND validate_contact_rec.leg_operating_unit IS NOT NULL -- Added for v1.64
         THEN
         -- Commented for Version v1.29
         /*
            BEGIN
               l_party_id := NULL;

               SELECT party_id
                 INTO l_party_id
                 FROM xxar_customer_stg xcss
                WHERE xcss.leg_orig_sys_cust_ref =
                                validate_contact_rec.leg_orig_sys_customer_ref
                  AND xcss.leg_customer_number =
                                      validate_contact_rec.leg_customer_number
                  AND ROWNUM = 1;
            EXCEPTION
               WHEN OTHERS
               THEN
                  source_rec.source_column_name := 'PARTY_NUMBER';
                  source_rec.source_column_value := NULL;
                  source_rec.ERROR_CODE := 'PARTY_NUMBER_NOT_FOUND';
                  source_rec.error_message := 'Party Not Found';
                  l_status := g_error;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                        (   'Not able to insert error details in Common Error Table for record: '
                         || validate_contact_rec.interface_txn_id
                         || 'Error: '
                         || l_log_err_msg
                        );
                  END IF;
            END;

            debug_msg_p ('STEP:6.4',
                         'VALIDATE_CONTACTS_P',
                         'Inside Cursor Loop Party ID: ' || l_party_id
                        );
             */
            -- Commented for Version v1.29
            BEGIN
               SELECT party_site_id, cust_acct_site_id,
                      cust_account_id
                      , party_id   -- Added by Ankur for Version v1.29
                 INTO l_party_site_id, l_customer_acct_site_id,
                      l_cust_account_id
                      , l_party_id -- Added by Ankur for Version v1.29
                 FROM xxar_customer_site_stg xcss
                WHERE xcss.leg_orig_sys_cust_ref =
                                validate_contact_rec.leg_orig_sys_customer_ref
                  AND xcss.leg_party_site_number =
                                          validate_contact_rec.leg_site_number
                  AND xcss.leg_source_system =
                                        validate_contact_rec.leg_source_system
                  -- Start Added by Ankur for Version v1.29  for defect#2614
                  -- Added so that if same site is present in two OU then Different cust_acct_site_id is fetched
                  -- Depending on the leg_operating_unit
                  AND xcss.leg_operating_unit = validate_contact_rec.leg_operating_unit
                  AND xcss.process_flag = 'C'
                  -- End Added by Ankur for Version v1.29  for defect#2614
                  AND ROWNUM = 1;

               IF l_party_site_id IS NULL
               THEN
                  source_rec.source_column_name := 'LEG_SITE_NUMBER';
                  source_rec.source_column_value := NULL;
                  source_rec.ERROR_CODE := 'PARTY_SITE_NOT_FOUND';
                  source_rec.error_message := 'Party Site Not Found';
                  l_status := g_error;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                        (   'Not able to insert error details in Common Error Table for record: '
                         || validate_contact_rec.interface_txn_id
                         || 'Error: '
                         || l_log_err_msg
                        );
                  END IF;
               END IF;
            EXCEPTION
               WHEN OTHERS
               THEN
                  source_rec.source_column_name := 'LEG_SITE_NUMBER';
                  source_rec.source_column_value := NULL;
                  source_rec.ERROR_CODE := 'PARTY_SITE_NOT_FOUND';
                  source_rec.error_message := 'Party Site Not Found';
                  l_status := g_error;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                        (   'Not able to insert error details in Common Error Table for record: '
                         || validate_contact_rec.interface_txn_id
                         || 'Error: '
                         || l_log_err_msg
                        );
                  END IF;
            END;

            debug_msg_p ('STEP:6.5',
                         'VALIDATE_CONTACTS_P',
                            'Inside Cursor Loop l_party_site_id: '
                         || l_party_site_id
                        );
         ELSE
            l_status := g_error;
            debug_msg_p ('STEP:6.6',
                         'VALIDATE_CONTACTS_P',
                         'Site number is missing'
                        );
                  --- Start Added by Ankur for Version 1.64
                  source_rec.source_column_name := 'LEG_SITE_NUMBER';
                  source_rec.source_column_value := NULL;
                  source_rec.ERROR_CODE := 'LEG_SITE_NUMBER_NULL';
                  source_rec.error_message := 'LEG_SITE_NUMBER and LEG_OPERATING_UNIT is null';
                  l_status := g_error;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                        (   'Not able to insert error details in Common Error Table for record: '
                         || validate_contact_rec.interface_txn_id
                         || 'Error: '
                         || l_log_err_msg
                        );
                  END IF;
                  --- End Added by Ankur for Version 1.64
         END IF;

         -- If any Validation Fails, increment failed record count --
         IF l_status = g_error
         THEN
            g_failed_count := g_failed_count + 1;
         END IF;

         BEGIN
            UPDATE xxar_customer_contact_stg xcs
               SET xcs.process_flag = l_status,
                   xcs.customer_site_id = l_party_site_id,
                   xcs.contact_party_id = l_party_id,
                   customer_acct_site_id = l_customer_acct_site_id,
                   cust_account_id = l_cust_account_id,
                   xcs.run_sequence_id = g_new_run_seq_id,
                   xcs.ERROR_TYPE =
                              DECODE (l_status,
                                      g_error, g_val_err_type,
                                      NULL
                                     ),
                   xcs.last_updated_date = SYSDATE,
                   xcs.last_update_login = g_last_update_login,
                   xcs.last_updated_by = g_last_updated_by,
                   xcs.request_id = g_request_id
             WHERE xcs.interface_txn_id =
                                         validate_contact_rec.interface_txn_id;
         EXCEPTION
            WHEN OTHERS
            THEN
               debug_msg_p ('STEP:6.8',
                            'VALIDATE_CONTACTS_P',
                            'SQL Error in updating Staging table: ' || SQLERRM
                           );
         END;

         -- If Batch Commit Limit is reached
         IF l_count >= g_limit
         THEN
            l_count := 0;
            debug_msg_p ('STEP:6.9',
                         'VALIDATE_CONTACTS_P',
                         'Performing Batch Commit'
                        );
            COMMIT;
         ELSE
            l_count := l_count + 1;
         END IF;
      END LOOP;

      -- Insert remaining errors into Error Table
      IF g_source_tab.COUNT > 0
      THEN
         debug_msg_p ('STEP:6.10',
                      'VALIDATE_CONTACTS_P',
                      'Error Table Type Count: ' || g_source_tab.COUNT
                     );
         debug_msg_p ('STEP:6.11',
                      'VALIDATE_CONTACTS_P',
                      'Logging Remaining Errors in Error table'
                     );
         g_err_cnt := 1;
         xxetn_common_error_pkg.add_error
                                        (pov_return_status      => l_log_ret_stats,
                                         pov_error_msg          => l_log_err_msg,
                                         pi_source_tab          => g_source_tab
                                        );

         IF l_log_ret_stats <> 'S'
         THEN
            pov_ret_stats := 'E';
            print_log_message_p
               (   'Not able to insert error details in Common Error Table: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;

         -- Flushing PLSQL Table
         g_source_tab.DELETE;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         pov_ret_stats := 'E';
         pov_err_msg :=
               'ERROR : XXAR_CUSTOMER_PKG.VALIDATE_CONTACTS_P->WHEN_OTHERS->'
            || SQLERRM;
   END validate_contacts_p;

-- =============================================================================
-- Procedure: validate_relation_p
-- =============================================================================
-- This private procedure will perform custom validations on relations
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: MAIN_PROC_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters  : NONE
--
--  Output Parameters :
--  pov_ret_stats     : Return Status of Procedure as 'S' or 'E'
--  pov_err_msg       : Returns Error Message
--
--  Return            : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE validate_relation_p (
      pov_ret_stats   OUT NOCOPY   VARCHAR2,
      pov_err_msg     OUT NOCOPY   VARCHAR2
   )
   IS
      l_status          VARCHAR2 (20);
      l_count           NUMBER                                   := 0;
      l_return_status   VARCHAR2 (20);
      l_error_msg       VARCHAR2 (2000);
      l_log_ret_stats   VARCHAR2 (10);
      l_log_err_msg     VARCHAR2 (2000);
      l_api_stats       VARCHAR2 (10);
      l_err_cnt         NUMBER                                   := 0;
      l_error_code      VARCHAR2 (2000);
      l_cust_count_id   NUMBER;
      -- Error Table Record Type
      source_rec        xxetn_common_error_pkg.g_source_rec_type;

      -- Staging Table Cursor to Process Records
      CURSOR validate_cust_rel_cur
      IS
         SELECT   *
             FROM xxar_cust_acct_relation_stg xcs
            WHERE xcs.process_flag IN (g_new_rec, g_err_rec, g_val_rec)
              AND xcs.batch_id = NVL (g_new_batch_id, g_batch_id)
              AND leg_source_system = NVL (g_leg_src_sys, leg_source_system)
         --AND leg_operating_unit =   NVL (g_leg_ou, leg_operating_unit)
         ORDER BY xcs.interface_txn_id;

      -- Staging Table Cursor to Process Records
      CURSOR validate_ent_rel_cur
      IS
         SELECT   *
             FROM xxar_entity_relation_stg xcs
            WHERE xcs.process_flag IN (g_new_rec, g_err_rec, g_val_rec)
              AND xcs.batch_id = NVL (g_new_batch_id, g_batch_id)
              AND leg_source_system = NVL (g_leg_src_sys, leg_source_system)
              AND 1 = 2                   -- Coomented for Current Run Only --
         --AND leg_operating_unit =   NVL (g_leg_ou, leg_operating_unit)
         ORDER BY xcs.interface_txn_id;
   BEGIN
      pov_ret_stats := 'S';
      pov_err_msg := NULL;
      g_total_count := 0;
      g_failed_count := 0;
      l_count := 0;
      print_log_message_p ('STEP:6.1'||
                   'VALIDATE_RELATION_P'||
                   'In Begin of Prc: VALIDATE_RELATION_P'
                  );
      -- Assign Batch Id and Run Sequence Id for Current Run
      g_new_run_seq_id :=
                         NVL (g_new_run_seq_id, xxetn_run_sequences_s.NEXTVAL);
      g_new_batch_id := NVL (g_new_batch_id, g_batch_id);
      -- Intialize Batch Id and Run Sequence Id for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_new_batch_id;         -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;
      -- run sequence id
      print_log_message_p ('STEP:6.2'||
                   'VALIDATE_RELATION_P'||
                      'Batch Id to Update: '
                   || g_new_batch_id
                   || ' and Run Sequence Id: '
                   || g_new_run_seq_id
                  );

      -- Open Customer Cursor to Validate the data
      FOR validate_cust_rel_rec IN validate_cust_rel_cur
      LOOP
         g_table_name := 'XXAR_CUST_ACCT_RELATION_STG';
         l_status := g_validated;
         l_return_status := 'S';
         l_error_msg := NULL;
         -- total record count
         g_total_count := g_total_count + 1;
         print_log_message_p ('STEP:6.3'||
                      'VALIDATE_RELATION_P'||
                         'Inside Cursor Loop for Record Id: '
                      || validate_cust_rel_rec.interface_txn_id
                     );
         source_rec.interface_staging_id :=
                                        validate_cust_rel_rec.interface_txn_id;

         BEGIN
            --            SELECT COUNT (1)
            --              INTO l_cust_count_id
            --              FROM hz_cust_accounts hca
            --             WHERE (   hca.orig_system_reference =
            --                                   validate_cust_rel_rec.leg_orig_sys_cust_ref
            --                    OR hca.orig_system_reference LIKE
            --                           validate_cust_rel_rec.leg_orig_sys_cust_ref || '-%'
            --                   );
            SELECT COUNT (1)
              INTO l_cust_count_id
              FROM xxar_customer_site_stg xccs
             WHERE (    xccs.leg_orig_sys_cust_ref =
                                   validate_cust_rel_rec.leg_orig_sys_cust_ref
                    AND xccs.process_flag = 'C'
                   );

            IF l_cust_count_id = 0
            THEN
               source_rec.source_column_name := 'LEG_ORIG_SYS_CUST_REF';
               source_rec.source_column_value :=
                                  validate_cust_rel_rec.leg_orig_sys_cust_ref;
               source_rec.ERROR_CODE := 'CUSTOMER_NOT_FOUND';
               source_rec.error_message := 'Customer Not Found error';
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_cust_rel_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               source_rec.source_column_name := 'LEG_ORIG_SYS_CUST_REF';
               source_rec.source_column_value :=
                                  validate_cust_rel_rec.leg_orig_sys_cust_ref;
               source_rec.ERROR_CODE := 'CUSTOMER_NOT_FOUND';
               source_rec.error_message :=
                                        'Customer Not Found error' || SQLERRM;
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_cust_rel_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
         END;

         BEGIN
            l_cust_count_id := 0;

--            SELECT COUNT (1)
--              INTO l_cust_count_id
--              FROM hz_cust_accounts hca
--             WHERE (   hca.orig_system_reference =
--                               validate_cust_rel_rec.leg_rel_orig_sys_cust_ref
--                    OR hca.orig_system_reference LIKE
--                             validate_cust_rel_rec.leg_rel_orig_sys_cust_ref
--                          || '-%'
--                   );
            SELECT COUNT (1)
              INTO l_cust_count_id
              FROM --xxar_customer_site_stg xccs -- commented xxar_customer_site_stg as on 29-MAY-2015
                   xxar_customer_site_stg xccs -- added xxar_customer_site_stg as on 15 Sep 2015 V1.38
             WHERE (       xccs.leg_orig_sys_cust_ref  =
                               validate_cust_rel_rec.leg_rel_orig_sys_cust_ref
                    AND xccs.process_flag = 'C'
                   );

            IF l_cust_count_id = 0
            THEN
               source_rec.source_column_name := 'LEG_REL_ORIG_SYS_CUST_REF';
               source_rec.source_column_value :=
                              validate_cust_rel_rec.leg_rel_orig_sys_cust_ref;
               source_rec.ERROR_CODE := 'CUSTOMER_NOT_FOUND';
               source_rec.error_message := 'Customer Not Found error';
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_cust_rel_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               source_rec.source_column_name := 'LEG_REL_ORIG_SYS_CUST_REF';
               source_rec.source_column_value :=
                              validate_cust_rel_rec.leg_rel_orig_sys_cust_ref;
               source_rec.ERROR_CODE := 'CUSTOMER_NOT_FOUND';
               source_rec.error_message :=
                                        'Customer Not Found error' || SQLERRM;
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_cust_rel_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
         END;


         -- V1.74   -- If from and relate to customer are same, mark them as 'C'
         IF validate_cust_rel_rec.leg_orig_sys_cust_ref = validate_cust_rel_rec.leg_rel_orig_sys_cust_ref THEN

            source_rec.source_column_name := 'LEG_ORIG_SYS_CUST_REF';
               source_rec.source_column_value :=
                              validate_cust_rel_rec.leg_orig_sys_cust_ref;
               source_rec.ERROR_TYPE := 'INFO';
               source_rec.ERROR_CODE := 'SAME_FROM_REL_TO_CUST';
               source_rec.error_message :=
                                        'Relate from and Relate to Customers are Same.';
               l_status := g_converted;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_cust_rel_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;

         END IF;


         -- If any Validation Fails, increment failed record count --
         IF l_status = g_error
         THEN
            g_failed_count := g_failed_count + 1;
         END IF;

         BEGIN
            UPDATE xxar_cust_acct_relation_stg xcs
               SET xcs.process_flag = l_status,
                   xcs.run_sequence_id = g_new_run_seq_id,
                   xcs.org_id = validate_cust_rel_rec.org_id,
                   xcs.operating_unit = validate_cust_rel_rec.operating_unit,
                   xcs.ERROR_TYPE =
                              DECODE (l_status,
                                      g_error, g_val_err_type,
                                      NULL
                                     ),
                   xcs.last_updated_date = SYSDATE,
                   xcs.last_update_login = g_last_update_login,
                   xcs.last_updated_by = g_last_updated_by,
                   xcs.request_id = g_request_id
             WHERE xcs.interface_txn_id =
                                        validate_cust_rel_rec.interface_txn_id;
         EXCEPTION
            WHEN OTHERS
            THEN
               debug_msg_p ('STEP:6.8',
                            'VALIDATE_RELATION_P',
                            'SQL Error in updating Staging table: ' || SQLERRM
                           );
         END;

         -- If Batch Commit Limit is reached
         IF l_count >= g_limit
         THEN
            l_count := 0;
            debug_msg_p ('STEP:6.9',
                         'VALIDATE_RELATION_P',
                         'Performing Batch Commit'
                        );
            COMMIT;
         ELSE
            l_count := l_count + 1;
         END IF;
      END LOOP;

      COMMIT;
      -- Print Stats Report
      print_stats_p;
      l_count := 0;

      FOR validate_ent_rel_rec IN validate_ent_rel_cur
      LOOP
         g_table_name := 'XXAR_ENTITY_RELATION_STG';
         l_status := g_validated;
         l_return_status := 'S';
         l_error_msg := NULL;
         -- total record count
         g_total_count := g_total_count + 1;
         debug_msg_p ('STEP:6.3',
                      'VALIDATE_RELATION_P',
                         'Inside Cursor Loop for Record Id: '
                      || validate_ent_rel_rec.interface_txn_id
                     );

         -- If any Validation Fails, increment failed record count --
         IF l_status = g_error
         THEN
            g_failed_count := g_failed_count + 1;
         END IF;

         BEGIN
            UPDATE xxar_entity_relation_stg xcs
               SET xcs.process_flag = l_status,
                   xcs.run_sequence_id = g_new_run_seq_id,
                   xcs.ERROR_TYPE =
                              DECODE (l_status,
                                      g_error, g_val_err_type,
                                      NULL
                                     ),
                   xcs.last_updated_date = SYSDATE,
                   xcs.last_update_login = g_last_update_login,
                   xcs.last_updated_by = g_last_updated_by,
                   xcs.request_id = g_request_id
             WHERE xcs.interface_txn_id =
                                         validate_ent_rel_rec.interface_txn_id;
         EXCEPTION
            WHEN OTHERS
            THEN
               debug_msg_p ('STEP:6.8',
                            'VALIDATE_RELATION_P',
                            'SQL Error in updating Staging table: ' || SQLERRM
                           );
         END;

         -- If Batch Commit Limit is reached
         IF l_count >= g_limit
         THEN
            l_count := 0;
            debug_msg_p ('STEP:6.9',
                         'VALIDATE_RELATION_P',
                         'Performing Batch Commit'
                        );
            COMMIT;
         ELSE
            l_count := l_count + 1;
         END IF;
      END LOOP;

      -- Print Stats Report
      print_stats_p;

      -- Insert remaining errors into Error Table
      IF g_source_tab.COUNT > 0
      THEN
         debug_msg_p ('STEP:6.10',
                      'VALIDATE_RELATION_P',
                      'Error Table Type Count: ' || g_source_tab.COUNT
                     );
         debug_msg_p ('STEP:6.11',
                      'VALIDATE_CONTACTS_P',
                      'Logging Remaining Errors in Error table'
                     );
         g_err_cnt := 1;
         xxetn_common_error_pkg.add_error
                                        (pov_return_status      => l_log_ret_stats,
                                         pov_error_msg          => l_log_err_msg,
                                         pi_source_tab          => g_source_tab
                                        );

         IF l_log_ret_stats <> 'S'
         THEN
            pov_ret_stats := 'E';
            print_log_message_p
               (   'Not able to insert error details in Common Error Table: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;

         -- Flushing PLSQL Table
         g_source_tab.DELETE;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         pov_ret_stats := 'E';
         pov_err_msg :=
               'ERROR : XXAR_CUSTOMER_PKG.VALIDATE_CONTACTS_P->WHEN_OTHERS->'
            || SQLERRM;
   END validate_relation_p;

--
-- =============================================================================
-- Procedure: validate_Customers_p
-- =============================================================================
-- This private procedure will perform custom validations on Customer and Sites
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: MAIN_PROC_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters  : NONE
--
--  Output Parameters :
--  pov_ret_stats     : Return Status of Procedure as 'S' or 'E'
--  pov_err_msg       : Returns Error Message
--
--  Return            : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE validate_customers_p (
      pov_ret_stats   OUT NOCOPY   VARCHAR2,
      pov_err_msg     OUT NOCOPY   VARCHAR2
   )
   IS
      l_status          VARCHAR2 (20);
      l_count           NUMBER                                   := 0;
      l_return_status   VARCHAR2 (20);
      l_error_msg       VARCHAR2 (2000);
      l_log_ret_stats   VARCHAR2 (10);
      l_log_err_msg     VARCHAR2 (2000);
      l_api_stats       VARCHAR2 (10);
      l_err_cnt         NUMBER                                   := 0;
      l_tax_count       NUMBER;
      --v1.41 Start Added By Ankur for Intercompany CR
      l_plant_tmp       VARCHAR2 (20) := NULL;
      l_plant_exists    NUMBER := 0;
      l_plant_name      VARCHAR2 (240) := NULL;
      --v1.41 End Added By Ankur for Intercompany CR
      -- Error Table Record Type
      source_rec        xxetn_common_error_pkg.g_source_rec_type;

      -- Staging Table Cursor to Process Records
      CURSOR validate_customer_cur
      IS
         SELECT   xcs.interface_txn_id, xcs.batch_id,
                  xcs.leg_jgzz_fiscal_code, xcs.leg_customer_number,
                  xcs.leg_customer_type, xcs.leg_customer_class_code,
                  xcs.ic_customer_flag, xcs.credit_office,
                  xcs.run_sequence_id, xcs.request_id, xcs.process_flag,
                  xcs.ERROR_TYPE, xcs.program_update_date, leg_source_system
                 ,xcs.customer_acc_name_r12, xcs.leg_customer_name -- v1.41 Changed by ANkur
             FROM xxar_customer_stg xcs
            WHERE xcs.process_flag IN (g_new_rec, g_err_rec, g_val_rec)
              AND xcs.batch_id = NVL (g_new_batch_id, g_batch_id)
              AND leg_source_system = NVL (g_leg_src_sys, leg_source_system)
         -- AND leg_operating_unit =   NVL (g_leg_ou, leg_operating_unit)
         ORDER BY xcs.interface_txn_id;
   BEGIN
      pov_ret_stats := 'S';
      pov_err_msg := NULL;
      g_total_count := 0;
      g_failed_count := 0;
      l_count := 0;
      debug_msg_p ('STEP:6.1',
                   'VALIDATE_CUSTOMERS_P',
                   'In Begin of Prc: VALIDATE_CUSTOMERS_P'
                  );
      -- Assign Batch Id and Run Sequence Id for Current Run
      g_new_run_seq_id :=
                         NVL (g_new_run_seq_id, xxetn_run_sequences_s.NEXTVAL);
      g_new_batch_id := NVL (g_new_batch_id, g_batch_id);
      -- Intialize Batch Id and Run Sequence Id for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_new_batch_id;         -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;
      -- run sequence id
      debug_msg_p ('STEP:6.2',
                   'VALIDATE_CUSTOMERS_P',
                      'Batch Id to Update: '
                   || g_new_batch_id
                   || ' and Run Sequence Id: '
                   || g_new_run_seq_id
                  );

      -- Open Customer Cursor to Validate the data
      FOR validate_customer_rec IN validate_customer_cur
      LOOP
         l_status := g_validated;
         l_return_status := 'S';
         l_error_msg := NULL;
         -- total record count
         g_total_count := g_total_count + 1;
         debug_msg_p ('STEP:6.3',
                      'VALIDATE_CUSTOMERS_P',
                         'Inside Cursor Loop for Record Id: '
                      || validate_customer_rec.interface_txn_id
                     );
         -- Intialize Common variables for Record Type
         source_rec.interface_staging_id :=
                                        validate_customer_rec.interface_txn_id;
         source_rec.ERROR_TYPE := g_val_err_type;
         -- Check if the Legacy Customer Number is existing
         source_rec.source_column_name := 'LEG_CUSTOMER_NUMBER';
         source_rec.source_column_value :=
                                     validate_customer_rec.leg_customer_number;
         source_rec.ERROR_CODE := 'NULL_LEG_CUSTOMER_NUMBER';
         source_rec.error_message := 'Legacy Customer Number cannot be NULL';

         IF mandatory_check_f (validate_customer_rec.leg_customer_number,
                               source_rec
                              )
         THEN
            debug_msg_p ('STEP:6.4',
                         'VALIDATE_CUSTOMERS_P',
                         'Legacy Customer Number cannot be NULL'
                        );
            l_status := g_error;
         END IF;

         /** Mandatory Check for Legacy Source System **/
         source_rec.source_column_name := 'LEG_SOURCE_SYSTEM';
         source_rec.source_column_value := NULL;
         source_rec.ERROR_CODE := 'NULL_LEG_SOURCE_SYSTEM';
         source_rec.error_message := 'Legacy Source System cannot be NULL';

         IF mandatory_check_f (validate_customer_rec.leg_source_system,
                               source_rec
                              )
         THEN
            debug_msg_p ('STEP:6.4',
                         'VALIDATE_CUSTOMERS_P',
                         'Legacy Source System cannot be NULL'
                        );
            l_status := g_error;
         END IF;

         --         IF validate_customer_rec.leg_jgzz_fiscal_code IS NOT NULL
         --         THEN
         --            SELECT COUNT (1)
         --              INTO l_tax_count
         --              FROM hz_parties hp
         --             WHERE hp.jgzz_fiscal_code =
         --                                    validate_customer_rec.leg_jgzz_fiscal_code
         --               AND hp.party_type = 'ORGANIZATION';

         --            IF l_tax_count > 0 THEN
         --            g_failed_count := g_failed_count + 1;
         --            l_status := g_error;
         --            source_rec.interface_staging_id :=
         --                                        validate_customer_rec.interface_txn_id;
         --            source_rec.source_column_name := NULL;
         --            source_rec.source_column_value := NULL;
         --            source_rec.ERROR_CODE := 'VAL_ERR';
         --            source_rec.error_message :=
         --                  'Party already exists with tax code - '
         --               || validate_customer_rec.leg_jgzz_fiscal_code;
         --            log_errors_p (pov_ret_stats      => l_log_ret_stats,
         --                          pov_err_msg        => l_log_err_msg,
         --                          pi_err_rec         => source_rec
         --                         );
         --           END IF;
         --         END IF;

         -- Check if the Legacy Customer Type is existing
         /* source_rec.source_column_name := 'LEG_CUSTOMER_TYPE';
          source_rec.source_column_value :=
                                        validate_customer_rec.leg_customer_type;
          source_rec.ERROR_CODE := 'NULL_LEG_CUSTOMER_TYPE';
          source_rec.error_message := 'Legacy Customer Type cannot be NULL';

          IF mandatory_check_f (validate_customer_rec.leg_customer_type,
                                source_rec
                               )
          THEN
             debug_msg_p ('STEP:6.5',
                          'VALIDATE_CUSTOMERS_P',
                          'Legacy Customer Type cannot be NULL'
                         );
             l_status := g_error;
          END IF;*/

         -- Check if the Legacy Customer Class Code is existing
         -- Commented by Ankur as Data is not Available in 11i Instance
         /*
           source_rec.source_column_name := 'LEG_CUSTOMER_CLASS_CODE';
           source_rec.source_column_value := validate_customer_rec.leg_customer_class_code;
           source_rec.error_code := 'NULL_LEG_CUSTOMER_CLASS_CODE';
           source_rec.error_message := 'Legacy Customer Class Code cannot be NULL';

           IF mandatory_check_f ( validate_customer_rec.leg_customer_class_code, source_rec ) THEN
              debug_msg_p ('STEP:6.6',
                           'VALIDATE_CUSTOMERS_P',
                           'Legacy Customer Class Code cannot be NULL'
                          );
              l_status := g_error;
           END IF;
           */
           -- Check if the Customer is an Intercompany Customer
         IF (SUBSTR (validate_customer_rec.leg_customer_number, 1, 2) = '99')
         THEN
            debug_msg_p ('STEP:6.7',
                         'VALIDATE_CUSTOMERS_P',
                         'The Customer is Inter Company Type'
                        );
            validate_customer_rec.ic_customer_flag := 'Y';
         ELSE
            debug_msg_p ('STEP:6.7',
                         'VALIDATE_CUSTOMERS_P',
                         'The Customer is not Inter Company Type'
                        );
            validate_customer_rec.ic_customer_flag := 'N';
         END IF;

         --v1.41 Added By Ankur for Intercompany CR
         IF ( NVL(validate_customer_rec.leg_customer_type, 'X') = 'I') THEN

           IF validate_customer_rec.leg_source_system = 'FSC' THEN

             IF (SUBSTR (validate_customer_rec.leg_customer_number, 1, 2) <> '99')
             THEN
               source_rec.source_column_name := 'LEG_CUSTOMER_NUMBER';
               source_rec.source_column_value :=
                                     validate_customer_rec.leg_customer_number;
               source_rec.error_code := 'INVALID_LEG_CUSTOMER_NUMBER';
               source_rec.error_message := 'Customer Number is Incorrect for IC FSC Customer';
               l_status := g_error;
               log_errors_p (
                             pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );
              END IF;


               l_plant_tmp := SUBSTR (validate_customer_rec.leg_customer_number, 3, 4);

               -- Check for a Valid Plant Name in OTC-FRM-0003 --
              BEGIN

               l_plant_exists := 1;
               l_plant_name := NULL;

               SELECT R12_plant_name
                 INTO  l_plant_name
                 FROM xxar_cust_plant_site_details
                WHERE plant_number = l_plant_tmp;
              EXCEPTION
               WHEN OTHERS THEN

               l_plant_exists := 0;
               l_plant_name := NULL;

              END;
               -- Check for a Valid Plant Name in OTC-FRM-0003 --


             IF (l_plant_exists = 0)
             THEN
               source_rec.source_column_name := 'LEG_CUSTOMER_NUMBER';
               source_rec.source_column_value :=
                                     validate_customer_rec.leg_customer_number;
               source_rec.ERROR_CODE := 'INVALID_LEG_PLANT_NUMBER';
               source_rec.error_message := 'Customer Plant Number is Invalid or not set up';
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );
             ELSE
             validate_customer_rec.customer_acc_name_r12 := l_plant_name ;
             END IF;

           ELSIF validate_customer_rec.leg_source_system = 'SASC' THEN    -- Added for defect#4595 V1.74
           ---
             BEGIN
                  SELECT SUBSTR(leg_gl_id_rec,INSTR(leg_gl_id_rec,'.',1,5)+1,4)
                    INTO l_plant_tmp
                    FROM xxar_customer_site_stg
                   WHERE leg_customer_number = validate_customer_rec.leg_customer_number
                     AND leg_site_use_code = 'BILL_TO'
                  --   AND leg_primary_site_use_flag = 'Y' -- Commented for V1.81 --
                     AND rownum = 1;
                EXCEPTION
                    WHEN OTHERS THEN
                        l_plant_tmp := NULL;
                END;

               -- Check for a Valid Plant Name in OTC-FRM-0003 --
              BEGIN

               l_plant_exists := 1;
               l_plant_name := NULL;

               SELECT R12_plant_name
                 INTO  l_plant_name
                 FROM xxar_cust_plant_site_details
                WHERE plant_number = l_plant_tmp;
              EXCEPTION
               WHEN OTHERS THEN

               l_plant_exists := 0;
               l_plant_name := NULL;

              END;
               -- Check for a Valid Plant Name in OTC-FRM-0003 --

             IF (l_plant_exists = 0)
             THEN
               source_rec.source_column_name := 'LEG_CUSTOMER_NAME';
               source_rec.source_column_value :=
                                     validate_customer_rec.leg_customer_name;
               source_rec.ERROR_CODE := 'INVALID_LEG_PLANT_NAME';
               source_rec.error_message := 'Customer Name is Invalid or not set up';
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );
             ELSE
             validate_customer_rec.customer_acc_name_r12 := l_plant_name ;
             END IF;


           ELSE -- for all other Source Systems
           ---
            l_plant_tmp := SUBSTR (validate_customer_rec.leg_customer_name, 1, 4);

            --l_plant_tmp := SUBSTR (validate_customer_rec.leg_customer_number, 3, 4);

               -- Check for a Valid Plant Name in OTC-FRM-0003 --
              BEGIN

               l_plant_exists := 1;
               l_plant_name := NULL;

               SELECT R12_plant_name
                 INTO  l_plant_name
                 FROM xxar_cust_plant_site_details
                WHERE plant_number = l_plant_tmp;
              EXCEPTION
               WHEN OTHERS THEN

               l_plant_exists := 0;
               l_plant_name := NULL;

              END;
               -- Check for a Valid Plant Name in OTC-FRM-0003 --

             IF (l_plant_exists = 0)
             THEN
               source_rec.source_column_name := 'LEG_CUSTOMER_NAME';
               source_rec.source_column_value :=
                                     validate_customer_rec.leg_customer_name;
               source_rec.ERROR_CODE := 'INVALID_LEG_PLANT_NAME';
               source_rec.error_message := 'Customer Name is Invalid or not set up';
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );
             ELSE
             validate_customer_rec.customer_acc_name_r12 := l_plant_name ;
             END IF;


           END IF;

         END IF;

         --v1.41 Added By Ankur for Intercompany CR

         -- If any Validation Fails, increment failed record count --
         IF l_status = g_error
         THEN
            g_failed_count := g_failed_count + 1;
         END IF;

         BEGIN
            UPDATE xxar_customer_stg xcs
               SET xcs.customer_acc_name_r12 = validate_customer_rec.customer_acc_name_r12,  --v1.41 Added By Ankur for Intercompany CR
                   xcs.process_flag = l_status,
                   xcs.run_sequence_id = g_new_run_seq_id,
                   xcs.ERROR_TYPE =
                              DECODE (l_status,
                                      g_error, g_val_err_type,
                                      NULL
                                     ),
                   xcs.ic_customer_flag =
                                        validate_customer_rec.ic_customer_flag,
                   xcs.last_updated_date = SYSDATE,
                   xcs.last_update_login = g_last_update_login,
                   xcs.last_updated_by = g_last_updated_by,
                   xcs.request_id = g_request_id
             WHERE xcs.interface_txn_id =
                                        validate_customer_rec.interface_txn_id;
         EXCEPTION
            WHEN OTHERS
            THEN
               debug_msg_p ('STEP:6.8',
                            'VALIDATE_CUSTOMERS_P',
                            'SQL Error in updating Staging table: ' || SQLERRM
                           );
         END;

         -- If Batch Commit Limit is reached
         IF l_count >= g_limit
         THEN
            l_count := 0;
            debug_msg_p ('STEP:6.9',
                         'VALIDATE_CUSTOMERS_P',
                         'Performing Batch Commit'
                        );
            COMMIT;
         ELSE
            l_count := l_count + 1;
         END IF;
      END LOOP;

      -- Insert remaining errors into Error Table
      IF g_source_tab.COUNT > 0
      THEN
         debug_msg_p ('STEP:6.10',
                      'VALIDATE_CUSTOMERS_P',
                      'Error Table Type Count: ' || g_source_tab.COUNT
                     );
         debug_msg_p ('STEP:6.11',
                      'VALIDATE_CUSTOMERS_P',
                      'Logging Remaining Errors in Error table'
                     );
         g_err_cnt := 1;
         xxetn_common_error_pkg.add_error
                                        (pov_return_status      => l_log_ret_stats,
                                         pov_error_msg          => l_log_err_msg,
                                         pi_source_tab          => g_source_tab
                                        );

         IF l_log_ret_stats <> 'S'
         THEN
            pov_ret_stats := 'E';
            print_log_message_p
               (   'Not able to insert error details in Common Error Table: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;

         -- Flushing PLSQL Table
         g_source_tab.DELETE;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         pov_ret_stats := 'E';
         pov_err_msg :=
               'ERROR : XXAR_CUSTOMER_PKG.VALIDATE_CUSTOMERS_P->WHEN_OTHERS->'
            || SQLERRM;
   END validate_customers_p;

--
-- =============================================================================
-- Procedure: validate_site_profile_p
-- =============================================================================
-- This private procedure will perform custom validations on Site Profile Values
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: MAIN_PROC_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters  : NONE
--
--  Output Parameters :
--  pov_ret_stats     : Return Status of Procedure as 'S' or 'E'
--  pov_err_msg       : Returns Error Message
--
--  Return            : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE validate_site_profile_p (
      pov_ret_stats   OUT NOCOPY   VARCHAR2,
      pov_err_msg     OUT NOCOPY   VARCHAR2
   )
   IS
      l_status          VARCHAR2 (10);
      l_count           NUMBER                                   := 0;
      l_return_status   VARCHAR2 (20);
      l_error_msg       VARCHAR2 (2000);
      l_log_ret_stats   VARCHAR2 (10);
      l_log_err_msg     VARCHAR2 (2000);
      l_api_stats       VARCHAR2 (10);
      l_err_cnt         NUMBER                                   := 0;
      l_credit_office   VARCHAR2 (240);
      l_business_seg    VARCHAR2 (240);
      l_count_curr      NUMBER;
      l_count_val_site  NUMBER := 0; -- Added v1.67
      -- Error Table Record Type
      source_rec        xxetn_common_error_pkg.g_source_rec_type;

      -- Staging Table Cursor to Process Records
      CURSOR validate_cust_site_cur
      IS
         SELECT   *
              /*xcss.interface_txn_id, xcss.batch_id,
             xcss.leg_customer_number, xcss.leg_customer_type,
             xcss.leg_customer_class_code, xcss.leg_operating_unit,
             xcss.operating_unit, xcss.org_id, xcss.leg_site_use_code,
             xcss.leg_address1, xcss.leg_country, xcss.leg_province,
             xcss.run_sequence_id, xcss.request_id, xcss.process_flag,
             xcss.ERROR_TYPE, xcss.program_update_date, xcss.leg_term_name,
             xcss.term_name, xcss.term_id, xcss.leg_stmt_cycle_name,
             xcss.leg_statements, xcss.leg_location,
             xcss.leg_source_system, xcss.hcsu_attribute6,
             xcss.customer_acc_name_r12, leg_customer_name*/
         FROM     xxar_customer_prof_amnt_stg xcss
            WHERE xcss.process_flag IN (g_new_rec, g_err_rec, g_val_rec)
              AND xcss.batch_id = NVL (g_new_batch_id, g_batch_id)
              AND leg_source_system = NVL (g_leg_src_sys, leg_source_system)
              AND NVL(leg_operating_unit_name, 'X') =
                                       NVL (g_leg_ou, NVL(leg_operating_unit_name, 'X')) --modified for Defect 2142 - collector bug fixes, v1.23
         ORDER BY xcss.interface_txn_id;
   BEGIN
      pov_ret_stats := 'S';
      pov_err_msg := NULL;
      g_total_count := 0;
      g_failed_count := 0;
      debug_msg_p ('STEP:6.1',
                   'VALIDATE_SITE_PROFILE_P',
                   'In Begin of Prc: VALIDATE_SITE_PROFILE_P'
                  );
      -- Assign Batch Id and Run Sequence Id for Current Run
      g_new_run_seq_id :=
                         NVL (g_new_run_seq_id, xxetn_run_sequences_s.NEXTVAL);
      g_new_batch_id := NVL (g_new_batch_id, g_batch_id);
      -- Intialize Batch Id and Run Sequence Id for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_new_batch_id;         -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;
      -- run sequence id
      debug_msg_p ('STEP:6.2',
                   'VALIDATE_SITE_PROFILE_P',
                      'Batch Id to Update: '
                   || g_new_batch_id
                   || ' and Run Sequence Id: '
                   || g_new_run_seq_id
                  );

      -- Open Customer Cursor to Validate the data
      FOR validate_cust_site_rec IN validate_cust_site_cur
      LOOP
         l_status := g_validated;
         l_return_status := 'S';
         l_error_msg := NULL;
         -- total record count
         g_total_count := g_total_count + 1;
         debug_msg_p ('STEP:6.3',
                      'VALIDATE_SITE_PROFILE_P',
                         'Inside Cursor Loop for Record Id: '
                      || validate_cust_site_rec.interface_txn_id
                     );
         -- Intialize Common variables for Record Type
         source_rec.interface_staging_id :=
                                       validate_cust_site_rec.interface_txn_id;
         source_rec.ERROR_TYPE := g_val_err_type;
         /** Mandatory Check for Operating Unit **/
         source_rec.source_column_name := 'LEG_OPERATING_UNIT_NAME';
         source_rec.source_column_value := NULL;
         source_rec.ERROR_CODE := 'NULL_LEG_OPERATING_UNIT_NAME';
         source_rec.error_message := 'Legacy Operating Unit cannot be NULL';

         IF mandatory_check_f (validate_cust_site_rec.leg_operating_unit_name,
                               source_rec
                              )
         THEN
            debug_msg_p ('STEP:6.4',
                         'validate_site_profile_p',
                         'Legacy Operating Unit cannot be NULL'
                        );
            l_status := g_error;
--         validate_cust_site_rec.operating_unit := NULL;
--         validate_cust_site_rec.org_id := NULL;
         END IF;

         /** Mandatory Check for Legacy Source System **/
         source_rec.source_column_name := 'LEG_SOURCE_SYSTEM';
         source_rec.source_column_value := NULL;
         source_rec.ERROR_CODE := 'NULL_LEG_SOURCE_SYSTEM';
         source_rec.error_message := 'Legacy Source System cannot be NULL';

         IF mandatory_check_f (validate_cust_site_rec.leg_source_system,
                               source_rec
                              )
         THEN
            debug_msg_p ('STEP:6.4',
                         'validate_site_profile_p',
                         'Legacy Source System cannot be NULL'
                        );
            l_status := g_error;
         END IF;

         -- Check if the Legacy Customer Number is existing
         source_rec.source_column_name := 'LEG_CUSTOMER_NUMBER';
         source_rec.source_column_value :=
                                    validate_cust_site_rec.leg_customer_number;
         source_rec.ERROR_CODE := 'NULL_LEG_CUSTOMER_NUMBER';
         source_rec.error_message := 'Legacy Customer Number cannot be NULL';

         IF mandatory_check_f (validate_cust_site_rec.leg_customer_number,
                               source_rec
                              )
         THEN
            debug_msg_p ('STEP:6.4',
                         'validate_site_profile_p',
                         'Legacy Customer Number cannot be NULL'
                        );
            l_status := g_error;
         END IF;

         -- Check if the Legacy Customer Type is existing
         IF validate_cust_site_rec.leg_currency_code IS NOT NULL
         THEN
            SELECT COUNT (1)
              INTO l_count_curr
              FROM fnd_currencies
             WHERE currency_code = validate_cust_site_rec.leg_currency_code;

            IF l_count_curr = 0
            THEN
               source_rec.source_column_name := 'LEG_CURRENCY_CODE';
               source_rec.source_column_value :=
                                     validate_cust_site_rec.leg_currency_code;
               source_rec.ERROR_CODE := 'INVALID_LEG_CURRENCY_CODE';
               source_rec.error_message := 'Legacy Currency Code is INVALID';
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );
            END IF;
         END IF;

         --- Should be included at part of Profile Validation --
          /** Derive Payment Term id based on R12 Setups **/
         IF validate_cust_site_rec.leg_term_name IS NOT NULL
         THEN
            source_rec.source_column_name := 'LEG_TERM_NAME';
            source_rec.source_column_value :=
                                         validate_cust_site_rec.leg_term_name;
            -- Calling Procedure to Derive Term ID from R12 OU
            derive_term_id_p
                   (pon_term_id            => validate_cust_site_rec.term_id,
                    pov_term_name          => validate_cust_site_rec.term_name,
                    pov_status             => l_api_stats,
                    pov_error_code         => source_rec.ERROR_CODE,
                    pov_error_message      => source_rec.error_message,
                    piv_leg_term_name      => validate_cust_site_rec.leg_term_name
                   );

            IF l_api_stats <> 'S'
            THEN
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_cust_site_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            END IF;
         END IF;

         -- Check if the leg_collector_name is existing
         IF validate_cust_site_rec.leg_collector_name IS NOT NULL
         THEN
            BEGIN
               SELECT collector_id
                 INTO validate_cust_site_rec.collector_id
                 FROM ar_collectors
                WHERE UPPER (NAME) =
                             UPPER (validate_cust_site_rec.leg_collector_name);
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  source_rec.source_column_name := 'LEG_COLLECTOR_NAME';
                  source_rec.source_column_value :=
                                    validate_cust_site_rec.leg_collector_name;
                  source_rec.ERROR_CODE := 'INVALID_LEG_COLLECTOR_NAME';
                  source_rec.error_message :=
                                           'Legacy Collector Name is INVALID';
                  l_status := g_error;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );
               WHEN OTHERS
               THEN
                  source_rec.source_column_name := 'LEG_COLLECTOR_NAME';
                  source_rec.source_column_value :=
                                    validate_cust_site_rec.leg_collector_name;
                  source_rec.ERROR_CODE := 'INVALID_LEG_COLLECTOR_NAME';
                  source_rec.error_message :=
                                'Legacy Collector Name is INVALID' || SQLERRM;
                  l_status := g_error;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );
            END;
         END IF;

        -- Start Added for version v1.67
         /* Check if the corresponding site record is valid or not */
            BEGIN
               SELECT COUNT(1)
                 INTO l_count_val_site
                 FROM xxar_customer_site_stg xcss
                WHERE xcss.leg_site_use_id =
                            validate_cust_site_rec.leg_site_use_id
                --  AND process_flag = 'V'                                                 -- Commented for v1.91
				  AND xcss.leg_source_system = validate_cust_site_rec.leg_source_system    -- Added for v1.91
                  AND process_flag IN ('C', 'V');                                          -- Added for v1.91

					 

              IF l_count_val_site = 0 THEN

                  source_rec.source_column_name := 'LEG_SITE_USE_ID';
                  source_rec.source_column_value := validate_cust_site_rec.leg_site_use_id;
                  source_rec.ERROR_CODE := 'SITE_NOT_VALIDATED';
                  source_rec.error_message :=
                                           'Customer Site is not Valid';
                  l_status := g_error;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

              END IF;

            EXCEPTION
               WHEN OTHERS
               THEN
                  source_rec.source_column_name := 'LEG_SITE_USE_ID';
                  source_rec.source_column_value := validate_cust_site_rec.leg_site_use_id;
                  source_rec.ERROR_CODE := 'SITE_NOT_VALIDATED';
                  source_rec.error_message :=
                                           'Customer Site is not Valid'||SQLERRM;
                  l_status := g_error;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );
            END;

        -- End Added for version v1.67
         debug_msg_p ('STEP:6.10',
                      'VALIDATE_SITE_PROFILE_P',
                      'Term ID: ' || validate_cust_site_rec.term_id
                     );
         debug_msg_p ('STEP:6.10',
                      'VALIDATE_SITE_PROFILE_P',
                         'Statement Cycle Name: '
                      || validate_cust_site_rec.leg_stmt_cycle_name
                     );

         -- If any Validation Fails, increment failed record count --
         IF l_status = g_error
         THEN
            g_failed_count := g_failed_count + 1;
         END IF;

         BEGIN
            UPDATE xxar_customer_prof_amnt_stg xcss
               SET xcss.leg_statements = validate_cust_site_rec.leg_statements,
                   xcss.term_id = validate_cust_site_rec.term_id,
                   xcss.term_name = validate_cust_site_rec.term_name,
                   xcss.collector_id = validate_cust_site_rec.collector_id,
                   xcss.process_flag = l_status,
                   xcss.run_sequence_id = g_new_run_seq_id,
                   xcss.ERROR_TYPE =
                              DECODE (l_status,
                                      g_error, g_val_err_type,
                                      NULL
                                     ),
                   xcss.last_updated_date = SYSDATE,
                   xcss.last_update_login = g_last_update_login,
                   xcss.last_updated_by = g_last_updated_by,
                   xcss.request_id = g_request_id
             WHERE xcss.interface_txn_id =
                                       validate_cust_site_rec.interface_txn_id;
         EXCEPTION
            WHEN OTHERS
            THEN
               debug_msg_p ('STEP:6.17',
                            'VALIDATE_SITE_PROFILE_P',
                            'SQL Error in updating Staging table: ' || SQLERRM
                           );
         END;

         -- If Batch Commit Limit is reached
         IF l_count >= g_limit
         THEN
            l_count := 0;
            debug_msg_p ('STEP:6.18',
                         'VALIDATE_SITE_PROFILE_P',
                         'Performing Batch Commit'
                        );
            COMMIT;
         ELSE
            l_count := l_count + 1;
         END IF;
      END LOOP;

      -- Insert remaining errors into Error Table
      IF g_source_tab.COUNT > 0
      THEN
         debug_msg_p ('STEP:6.21',
                      'VALIDATE_SITE_PROFILE_P',
                      'Error Table Type Count: ' || g_source_tab.COUNT
                     );
         debug_msg_p ('STEP:6.22',
                      'VALIDATE_SITE_PROFILE_P',
                      'Logging Remaining Errors in Error table'
                     );
         g_err_cnt := 1;
         xxetn_common_error_pkg.add_error
                                        (pov_return_status      => l_log_ret_stats,
                                         pov_error_msg          => l_log_err_msg,
                                         pi_source_tab          => g_source_tab
                                        );

         IF l_log_ret_stats <> 'S'
         THEN
            pov_ret_stats := 'E';
            print_log_message_p
               (   'Not able to insert error details in Common Error Table: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;

         -- Flushing PLSQL Table
         g_source_tab.DELETE;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         pov_ret_stats := 'E';
         pov_err_msg :=
               'ERROR : XXAR_CUSTOMER_PKG.validate_site_profile_p->WHEN_OTHERS->'
            || SQLERRM;
   END validate_site_profile_p;

--
-- =============================================================================
-- Procedure: defaulting_hcsu_attribute6
-- =============================================================================
-- This private procedure will update HCSU_ATTRIBUTE6 for SHIP_TO sites with the
-- linked BILL_TO site HCSU_ATTRIBUTE6, when it is NULL
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: VALIDATE_SITES_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters  : NONE
--
--  Output Parameters :
--  pv_ret_stats      : Return Status of Procedure as 'S' or 'E'
--  pv_err_msg        : Returns Error Message
--
--  Return            : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE defaulting_hcsu_attribute6( pv_ret_stats OUT NOCOPY VARCHAR2,
                                         pv_err_msg   OUT NOCOPY VARCHAR2
   )
   IS
      CURSOR validate_cust_site_cur
      IS
         SELECT st.leg_site_use_id, bt.hcsu_attribute6,
                st.leg_operating_unit,st.leg_source_system
           FROM xxconv.xxar_customer_site_stg bt,
                xxconv.xxar_customer_site_stg st
          WHERE bt.leg_site_use_id    = st.leg_bill_to_site_use_id
            AND bt.leg_operating_unit = st.leg_operating_unit
            AND bt.leg_source_system = st.leg_source_system
            AND bt.leg_site_use_code = 'BILL_TO'
            --AND st.leg_site_use_code = 'SHIP_TO'               -- v1.78 Commented
            AND st.leg_site_use_code IN ('SHIP_TO','SOLD_TO')    -- v1.78 Added
            AND st.leg_bill_to_site_use_id IS NOT NULL
            AND st.hcsu_attribute6 IS NULL
            AND bt.hcsu_attribute6 IS NOT NULL
            AND bt.batch_id = NVL (g_new_batch_id, g_batch_id)
            AND bt.leg_operating_unit <> 'OU ELECTRICAL BR';

      -- Below changes added for v1.78
      CURSOR update_gl_id_rec_cur
      IS
         SELECT st.leg_site_use_id,st.leg_operating_unit,st.leg_source_system,bt.leg_site_use_code,bt.leg_gl_id_rec
           FROM xxconv.xxar_customer_site_stg bt,
                xxconv.xxar_customer_site_stg st
          WHERE bt.leg_site_use_id    = st.leg_bill_to_site_use_id
            AND bt.leg_operating_unit = st.leg_operating_unit
            AND bt.leg_source_system = st.leg_source_system
            AND bt.leg_site_use_code = 'BILL_TO'
            AND st.leg_site_use_code = 'SHIP_TO'
            AND st.leg_gl_id_rec IS NULL
            AND bt.leg_gl_id_rec IS NOT NULL
            AND st.leg_bill_to_site_use_id IS NOT NULL
            AND bt.batch_id = NVL(g_new_batch_id, g_batch_id)
            AND bt.leg_customer_type = 'I'
            AND st.leg_customer_type = 'I'
            AND bt.leg_source_system = 'SASC';
      -- End changes for v1.78

   BEGIN

        --creating index
   EXECUTE IMMEDIATE 'CREATE INDEX xxconv.xxar_customer_site_stg_n7 ON xxconv.xxar_customer_site_stg(leg_site_use_id,leg_site_use_code,leg_source_system,leg_operating_unit)';

   Begin
     fnd_file.put_line(fnd_file.log,'Running gather stats started for XXAR_CUSTOMER_SITE_STG:'||SYSDATE);
     dbms_stats.gather_table_stats(OWNNAME=>'XXCONV',TABNAME=>'XXAR_CUSTOMER_SITE_STG',CASCADE=>TRUE,ESTIMATE_PERCENT=>DBMS_STATS.AUTO_SAMPLE_SIZE,DEGREE=>DBMS_STATS.DEFAULT_DEGREE);
     fnd_file.put_line(fnd_file.log,'Execution end :'||SYSDATE);
   End;

        FOR validate_cust_site_rec IN validate_cust_site_cur
        LOOP

            UPDATE xxconv.xxar_customer_site_stg xcss
               SET hcsu_attribute6 = validate_cust_site_rec.hcsu_attribute6
             WHERE xcss.leg_site_use_id= validate_cust_site_rec.leg_site_use_id
              -- AND xcss.leg_site_use_code = 'SHIP_TO' -- v1.78 commented
               AND xcss.leg_site_use_code IN ( 'SHIP_TO','SOLD_TO' ) -- v1.78 added
               AND xcss.leg_source_system = validate_cust_site_rec.leg_source_system
               AND xcss.leg_operating_unit = validate_cust_site_rec.leg_operating_unit
               AND xcss.hcsu_attribute6 IS NULL
               AND xcss.leg_bill_to_site_use_id IS NOT NULL
               AND xcss.batch_id = NVL (g_new_batch_id, g_batch_id);

        END LOOP;
        COMMIT;

        -- Below changes added for v1.78
        FOR update_gl_id_rec IN update_gl_id_rec_cur
        LOOP
            UPDATE xxconv.xxar_customer_site_stg xcss
               SET leg_gl_id_rec = update_gl_id_rec.leg_gl_id_rec
             WHERE xcss.leg_site_use_id = update_gl_id_rec.leg_site_use_id
               AND xcss.leg_site_use_code = 'SHIP_TO'
               AND xcss.leg_source_system = update_gl_id_rec.leg_source_system
               AND xcss.leg_operating_unit = update_gl_id_rec.leg_operating_unit
               AND xcss.leg_gl_id_rec IS NULL
               AND xcss.leg_bill_to_site_use_id IS NOT NULL
               AND xcss.batch_id = NVL (g_new_batch_id, g_batch_id);

        END LOOP;
        COMMIT;
        -- End changes for v1.78

     EXECUTE IMMEDIATE 'DROP INDEX xxconv.xxar_customer_site_stg_n7';

   EXCEPTION
      WHEN OTHERS
      THEN
         pv_ret_stats := 'E';
         pv_err_msg := 'ERROR : XXAR_CUSTOMER_PKG.defaulting_hcsu_attribute6->WHEN_OTHERS->'
                       || SQLERRM;
   END defaulting_hcsu_attribute6;

--
-- =============================================================================
-- Procedure: validate_sites_p
-- =============================================================================
-- This private procedure will perform custom validations on Customer and Sites
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: MAIN_PROC_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters  : NONE
--
--  Output Parameters :
--  pov_ret_stats     : Return Status of Procedure as 'S' or 'E'
--  pov_err_msg       : Returns Error Message
--
--  Return            : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE validate_sites_p (
      pov_ret_stats   OUT NOCOPY   VARCHAR2,
      pov_err_msg     OUT NOCOPY   VARCHAR2
   )
   IS
      l_status              VARCHAR2 (10);
      l_count               NUMBER                                   := 0;
      l_return_status       VARCHAR2 (20);
      l_error_msg           VARCHAR2 (2000);
      l_log_ret_stats       VARCHAR2 (10);
      l_log_err_msg         VARCHAR2 (2000);
      l_api_stats           VARCHAR2 (10);
      l_err_cnt             NUMBER                                   := 0;
      l_credit_office       VARCHAR2 (240);
      l_business_seg        VARCHAR2 (240);
      l_party_id            NUMBER;
      l_party_number        VARCHAR2 (240);
      l_orig_sys_ref_site   VARCHAR2 (2000);
      l_account             VARCHAR2 (240);
      l_account_id          NUMBER;
      -- Error Table Record Type
      source_rec            xxetn_common_error_pkg.g_source_rec_type;
      l_r12_party_name      VARCHAR2 (240) := NULL; --V1.41 Added by Ankur for IC CR
      l_tax_count           NUMBER := 0;
      -- Added for version v1.56
      l_r12_ou_name         VARCHAR2 (240) := NULL;
      l_r12_plant           VARCHAR2 (240) := NULL;
      -- Added for version v1.56

      l_count1              NUMBER := 0;  --v1.70
      l_cnt                 NUMBER := 0;  --v1.70
      l_ret_stats           VARCHAR2 (1)    DEFAULT 'S';
      l_err_msg             VARCHAR2 (2000);


      l_plant_value        VARCHAR2 (240) := NULL;  --V1.74 5880

      -- Staging Table Cursor to Process Records
      CURSOR validate_cust_site_cur
      IS
         SELECT   xcss.interface_txn_id, xcss.batch_id,
                  xcss.leg_customer_number, xcss.leg_customer_type,
                  xcss.leg_customer_class_code, xcss.leg_operating_unit,
                  xcss.operating_unit, xcss.org_id, xcss.leg_site_use_code,
                  xcss.leg_address1, xcss.leg_address2, xcss.leg_country,
                  xcss.leg_province, xcss.run_sequence_id, xcss.request_id,
                  xcss.process_flag, xcss.ERROR_TYPE,
                  xcss.program_update_date, xcss.leg_term_name,
                  xcss.term_name, xcss.term_id, xcss.leg_stmt_cycle_name,
                  xcss.leg_statements, xcss.leg_location,
                  xcss.leg_source_system, xcss.hcsu_attribute6,
                  xcss.customer_acc_name_r12, xcss.leg_customer_name,
                  party_id, party_number, leg_bill_to_orig_ref,
                  leg_orig_sys_party_ref,          --, xcss.leg_customer_type
                                         leg_gl_id_clearing,
                  leg_gl_id_freight, leg_gl_id_rec, leg_gl_id_rev,
                  leg_gl_id_tax, leg_gl_id_unbilled, leg_gl_id_unearned,
                  gl_id_clearing, gl_id_freight, gl_id_rec, gl_id_rev,
                  gl_id_tax, gl_id_unbilled, gl_id_unearned,
                  leg_state --Added for Defect#2078, v1.26
                  , leg_orig_sys_cust_ref -- Added for Version 1.39
                  , hcsu_attribute8, hcs_attribute8 -- Added for v1.42
                  ,LEG_SITE_USE_TAX_CODE -- Added for v1.43
             FROM xxar_customer_site_stg xcss
            WHERE xcss.process_flag IN (g_new_rec, g_err_rec, g_val_rec)
              AND xcss.batch_id = NVL (g_new_batch_id, g_batch_id)
              AND leg_source_system = NVL (g_leg_src_sys, leg_source_system)
              AND leg_operating_unit = NVL (g_leg_ou, leg_operating_unit)
         ORDER BY xcss.interface_txn_id;

--- Customer Site Details --
      CURSOR get_orig_sys_cust_cur (
         p_customer_acc_name_r12   VARCHAR2,
         p_party_id                NUMBER
      )
      IS
         SELECT DISTINCT leg_customer_number
                    FROM xxar_customer_site_stg
                   WHERE customer_acc_name_r12 = p_customer_acc_name_r12
                     AND party_id = p_party_id;

      -- Below Cursor added for Mock3 Defect# 4796, v1.70 on 28-Mar-2016
      CURSOR validate_cust_site_use_cur
      IS
         SELECT xcss.interface_txn_id,
                xcss.leg_bill_to_site_use_id,
                xcss.leg_site_use_code,
                xcss.leg_operating_unit,
                xcss.leg_source_system
           FROM xxar_customer_site_stg xcss
          WHERE xcss.leg_site_use_code IN ('SHIP_TO','SOLD_TO')
            AND xcss.leg_bill_to_site_use_id IS NOT NULL
            AND xcss.process_flag IN (g_new_rec, g_err_rec, g_val_rec)
            AND xcss.batch_id = NVL (g_new_batch_id, g_batch_id)
            AND xcss.leg_source_system = NVL (g_leg_src_sys, leg_source_system)
            AND xcss.leg_operating_unit = NVL (g_leg_ou, leg_operating_unit);

   BEGIN
      pov_ret_stats := 'S';
      pov_err_msg := NULL;
      g_total_count := 0;
      g_failed_count := 0;
      debug_msg_p ('STEP:6.1',
                   'validate_sites_p',
                   'In Begin of Prc: VALIDATE_SITES_P'
                  );
      -- Assign Batch Id and Run Sequence Id for Current Run
      g_new_run_seq_id :=
                         NVL (g_new_run_seq_id, xxetn_run_sequences_s.NEXTVAL);
      g_new_batch_id := NVL (g_new_batch_id, g_batch_id);
      -- Intialize Batch Id and Run Sequence Id for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_new_batch_id;         -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;
      -- run sequence id
      debug_msg_p ('STEP:6.2',
                   'VALIDATE_SITES_P',
                      'Batch Id to Update: '
                   || g_new_batch_id
                   || ' and Run Sequence Id: '
                   || g_new_run_seq_id
                  );

      -- Added on 14-Jun-16 Calling defaulting_hcsu_attribute6 procedure
        defaulting_hcsu_attribute6(pv_ret_stats => l_ret_stats,
                                 pv_err_msg   => l_err_msg);

      debug_msg_p ('STEP:6.2.1',
                   'DEFAULTING_HCSU_ATTRIBUTE6',
                   'l_ret_stats: ' || l_ret_stats ||
                   'l_err_msg: ' || l_err_msg
                   );

      -- Changes end 14-Jun-16

      -- Open Customer Cursor to Validate the data
      FOR validate_cust_site_rec IN validate_cust_site_cur
      LOOP
         l_status := g_validated;
         l_return_status := 'S';
         l_error_msg := NULL;
         -- total record count
         g_total_count := g_total_count + 1;
         debug_msg_p ('STEP:6.3',
                      'VALIDATE_SITES_P',
                         'Inside Cursor Loop for Record Id: '
                      || validate_cust_site_rec.interface_txn_id
                     );
         -- Intialize Common variables for Record Type
         source_rec.interface_staging_id :=
                                       validate_cust_site_rec.interface_txn_id;
         source_rec.ERROR_TYPE := g_val_err_type;
         /** Mandatory Check for Operating Unit **/
         source_rec.source_column_name := 'LEG_OPERATING_UNIT';
         source_rec.source_column_value := NULL;
         source_rec.ERROR_CODE := 'NULL_LEG_OPERATING_UNIT';
         source_rec.error_message := 'Legacy Operating Unit cannot be NULL';

         IF mandatory_check_f (validate_cust_site_rec.leg_operating_unit,
                               source_rec
                              )
         THEN
            debug_msg_p ('STEP:6.4',
                         'VALIDATE_SITES_P',
                         'Legacy Operating Unit cannot be NULL'
                        );
            l_status := g_error;
            validate_cust_site_rec.operating_unit := NULL;
            validate_cust_site_rec.org_id := NULL;
         END IF;

         /** Mandatory Check for Legacy Source System **/
         source_rec.source_column_name := 'LEG_SOURCE_SYSTEM';
         source_rec.source_column_value := NULL;
         source_rec.ERROR_CODE := 'NULL_LEG_SOURCE_SYSTEM';
         source_rec.error_message := 'Legacy Source System cannot be NULL';

         IF mandatory_check_f (validate_cust_site_rec.leg_source_system,
                               source_rec
                              )
         THEN
            debug_msg_p ('STEP:6.4',
                         'VALIDATE_SITES_P',
                         'Legacy Source System cannot be NULL'
                        );
            l_status := g_error;
         END IF;

        IF (validate_cust_site_rec.leg_country in ('US', 'USA')            --    V1.26 Added by Pallab
         AND NVL (validate_cust_site_rec.leg_customer_type, 'X') <> 'I') THEN --  Added for v1.80 to avoid this issue for Internal Customers.
             --Start: Added for Defect 2078 - Mandatory State, v1.26
             /** Mandatory Check for State Field **/
             source_rec.source_column_name := 'LEG_STATE';
             source_rec.source_column_value := NULL;
             source_rec.ERROR_CODE := 'NULL_LEG_STATE';
             source_rec.error_message := 'Legacy State cannot be NULL';

             IF mandatory_check_f (validate_cust_site_rec.leg_state,
                                   source_rec
                                  )
             THEN
                debug_msg_p ('STEP:6.4',
                             'VALIDATE_SITES_P',
                             'Legacy State cannot be NULL'
                            );
                l_status := g_error;
             END IF;
             --End: Added for Defect 2078 - Mandatory State, v1.26
        END IF;                            --    V1.26 Added by Pallab

        --    V1.43 Start Added by Ankur to Validate Tax code
        IF validate_cust_site_rec.LEG_SITE_USE_TAX_CODE IS NOT NULL
        AND validate_cust_site_rec.HCSU_ATTRIBUTE6 IS NOT NULL THEN

             /** Mandatory Check for State Field **/
             source_rec.source_column_name := 'LEG_SITE_USE_TAX_CODE';
             source_rec.source_column_value := validate_cust_site_rec.LEG_SITE_USE_TAX_CODE;
             source_rec.ERROR_CODE := 'INVALID_LEG_SITE_USE_TAX_CODE';
             source_rec.error_message := 'Site Tax code Not defined in ETN_OTC_TAX_CODE_MAPPING cross reference for Ledger/Plant/Site - '||validate_cust_site_rec.HCSU_ATTRIBUTE6;

            SELECT count(1)
              INTO l_tax_count
              FROM xxetn_cross_ref_codes xcrc, xxetn_cross_ref_types xcrt
             WHERE xcrc.cross_ref_type_id = xcrt.cross_ref_type_id
               AND xcrt.cross_ref_type = 'ETN_OTC_TAX_CODE_MAPPING'
               AND xcrc.eaton_ledger = validate_cust_site_rec.HCSU_ATTRIBUTE6
               AND xcrc.inbound_value1 = validate_cust_site_rec.LEG_SITE_USE_TAX_CODE;

             -- If tax code is not setup in Cross Reference --
              IF l_tax_count = 0
              THEN
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  l_status := g_error;

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                        (   'Not able to insert error details in Common Error Table for record: '
                         || validate_cust_site_rec.interface_txn_id
                         || 'Error: '
                         || l_log_err_msg
                        );
                  END IF;

              END IF;

        END IF;
        --    V1.43 End Added by Ankur to Validate Tax code

         -- Check if the Party is existing
         IF validate_cust_site_rec.party_id IS NULL
         THEN
            BEGIN
               l_party_id := NULL;
               l_party_number := NULL;

--               SELECT party_id, party_number
--                 INTO l_party_id, l_party_number
--                 FROM hz_parties
--                WHERE orig_system_reference =
--                                 validate_cust_site_rec.leg_orig_sys_party_ref;
               SELECT party_id, party_number
                 INTO l_party_id, l_party_number
                 FROM xxar_customer_stg xcs
                WHERE xcs.leg_orig_sys_cust_ref = validate_cust_site_rec.leg_orig_sys_cust_ref -- ON for Version 1.39
                /* xcs.leg_orig_sys_party_ref =
                                 validate_cust_site_rec.leg_orig_sys_party_ref
                  AND xcs.leg_customer_number =
                                    validate_cust_site_rec.leg_customer_number */  -- Off for Version 1.39
                  AND xcs.leg_source_system =
                                      validate_cust_site_rec.leg_source_system
                  AND ROWNUM = 1;

               IF l_party_id IS NULL
               THEN
                  source_rec.source_column_name := 'PARTY_NUMBER';
                  source_rec.source_column_value := NULL;
                  source_rec.ERROR_CODE := 'NULL_PARTY_NUMBER';
                  source_rec.error_message := 'Party Not Found';
                  l_status := g_error;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                        (   'Not able to insert error details in Common Error Table for record: '
                         || validate_cust_site_rec.interface_txn_id
                         || 'Error: '
                         || l_log_err_msg
                        );
                  END IF;
               END IF;
            EXCEPTION
               WHEN OTHERS
               THEN
                  source_rec.source_column_name := 'PARTY_NUMBER';
                  source_rec.source_column_value := NULL;
                  source_rec.ERROR_CODE := 'NULL_PARTY_NUMBER';
                  source_rec.error_message := 'Party Not Found';
                  l_status := g_error;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                        (   'Not able to insert error details in Common Error Table for record: '
                         || validate_cust_site_rec.interface_txn_id
                         || 'Error: '
                         || l_log_err_msg
                        );
                  END IF;
            END;
         ELSE
            l_party_id := validate_cust_site_rec.party_id;
            l_party_number := validate_cust_site_rec.party_number;
         END IF;

         -- Check if the Legacy Customer Number is existing
         source_rec.source_column_name := 'LEG_CUSTOMER_NUMBER';
         source_rec.source_column_value :=
                                    validate_cust_site_rec.leg_customer_number;
         source_rec.ERROR_CODE := 'NULL_LEG_CUSTOMER_NUMBER';
         source_rec.error_message := 'Legacy Customer Number cannot be NULL';

         IF mandatory_check_f (validate_cust_site_rec.leg_customer_number,
                               source_rec
                              )
         THEN
            debug_msg_p ('STEP:6.4',
                         'VALIDATE_SITES_P',
                         'Legacy Customer Number cannot be NULL'
                        );
            l_status := g_error;
         END IF;

         -- Check if the Legacy Site Use Code is existing
         source_rec.source_column_name := 'LEG_SITE_USE_CODE';
         source_rec.source_column_value :=
                                      validate_cust_site_rec.leg_site_use_code;
         source_rec.ERROR_CODE := 'NULL_LEG_SITE_USE_CODE';
         source_rec.error_message := 'Legacy Site Use Code cannot be NULL';

         IF mandatory_check_f (validate_cust_site_rec.leg_site_use_code,
                               source_rec
                              )
         THEN
            debug_msg_p ('STEP:6.4',
                         'VALIDATE_SITES_P',
                         'Legacy Site Use Code cannot be NULL'
                        );
            l_status := g_error;
         END IF;

       IF (NVL (validate_cust_site_rec.leg_customer_type, 'X') <> 'I') THEN--  Added for v1.80 to avoid this issue for Internal Customers.

         -- Check if the Legacy Address1 is existing
         source_rec.source_column_name := 'LEG_ADDRESS1';
         source_rec.source_column_value := validate_cust_site_rec.leg_address1;
         source_rec.ERROR_CODE := 'NULL_LEG_ADDRESS1';
         source_rec.error_message := 'Legacy Site Address1 cannot be NULL';

         IF mandatory_check_f (validate_cust_site_rec.leg_address1,
                               source_rec)
         THEN
            debug_msg_p ('STEP:6.4',
                         'VALIDATE_SITES_P',
                         'Legacy Site Address1 cannot be NULL'
                        );
            l_status := g_error;
         END IF;

         -- Check if the Legacy Country is existing
         source_rec.source_column_name := 'LEG_COUNTRY';
         source_rec.source_column_value := validate_cust_site_rec.leg_country;
         source_rec.ERROR_CODE := 'NULL_LEG_COUNTRY';
         source_rec.error_message := 'Legacy Country cannot be NULL';

         IF mandatory_check_f (validate_cust_site_rec.leg_country, source_rec)
         THEN
            debug_msg_p ('STEP:6.4',
                         'VALIDATE_SITES_P',
                         'Legacy Country cannot be NULL'
                        );
            l_status := g_error;
         END IF;
       END IF;--  Added for v1.80 to avoid this issue for Internal Customers.
         -- Check if the Legacy Address 1 is existing
            --         source_rec.source_column_name := 'LEG_ADDRESS1';
            --         source_rec.source_column_value := validate_cust_site_rec.leg_address1;
            --         source_rec.ERROR_CODE := 'NULL_LEG_ADDRESS1';
            --         source_rec.error_message := 'Legacy ADDRESS1 cannot be NULL';

         --         IF mandatory_check_f (validate_cust_site_rec.leg_country, source_rec)
         --         THEN
         --            debug_msg_p ('STEP:6.4',
         --                         'VALIDATE_SITES_P',
         --                         'Legacy Address1 cannot be NULL'
         --                        );
         --            l_status := g_error;
         --         END IF;

         -- Check if the Legacy Customer Type is existing
            --         source_rec.source_column_name := 'LEG_CUSTOMER_TYPE';
            --         source_rec.source_column_value :=
            --                                      validate_cust_site_rec.leg_customer_type;
            --         source_rec.ERROR_CODE := 'NULL_LEG_CUSTOMER_TYPE';
            --         source_rec.error_message := 'Legacy Customer Type cannot be NULL';

         --         IF mandatory_check_f (validate_cust_site_rec.leg_customer_type,
         --                               source_rec
         --                              )
         --         THEN
         --            debug_msg_p ('STEP:6.5',
         --                         'VALIDATE_CUSTOMERS_P',
         --                         'Legacy Customer Type cannot be NULL'
         --                        );
         --            l_status := g_error;
         --         END IF;

         -- Check the Province column for Italian Customers
         IF (validate_cust_site_rec.leg_country = 'IT'
         AND NVL (validate_cust_site_rec.leg_customer_type, 'X') <> 'I')--  Added for v1.80 to avoid this issue for Internal Customers
         THEN          -- IF the Country is Italy only then do this validation
            source_rec.source_column_name := 'LEG_PROVINCE';
            source_rec.source_column_value :=
                                          validate_cust_site_rec.leg_province;
            source_rec.ERROR_CODE := 'NULL_LEG_PROVINCE';
            source_rec.error_message :=
                            'Leg Province cannot be NULL for Italy Customers';

            IF mandatory_check_f (validate_cust_site_rec.leg_province,
                                  source_rec
                                 )
            THEN
               debug_msg_p
                         ('STEP:6.4',
                          'VALIDATE_SITES_P',
                          'Legacy Provive cannot be NULL for Italy Customers'
                         );
               l_status := g_error;
            END IF;
         END IF;

         /** Derive R12 Operating Unit from Legacy Operating Unit **/

         --- Commenting OLD Logic to Fetch R12 OU
         /* IF validate_cust_site_rec.leg_operating_unit IS NOT NULL
         THEN
            source_rec.source_column_name := 'LEG_OPERATING_UNIT';
            source_rec.source_column_value :=
                                    validate_cust_site_rec.leg_operating_unit;
            -- Calling Procedure to Derive R12 OU from Legacy OU
            derive_r12_ou_p
                (pov_ou_name            => validate_cust_site_rec.operating_unit,
                 pov_status             => l_api_stats,
                 pov_error_code         => source_rec.ERROR_CODE,
                 pov_error_message      => source_rec.error_message,
                 piv_leg_ou_name        => validate_cust_site_rec.leg_operating_unit
                );

            IF l_api_stats <> 'S'
            THEN
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_cust_site_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            END IF;
         END IF; */
         debug_msg_p ('STEP:6.9',
                      'VALIDATE_SITES_P',
                         'R12 Operating Unit: '
                      || validate_cust_site_rec.operating_unit
                     );

          /** Derive Org id based on R12 OU **/
          --- Commenting OLD Logic to Fetch R12 OU
          /*
          IF validate_cust_site_rec.operating_unit IS NOT NULL
          THEN
             source_rec.source_column_name := 'OPERATING_UNIT';
             source_rec.source_column_value :=
                                         validate_cust_site_rec.operating_unit;
             -- Calling Procedure to Derive Org ID from R12 OU
             derive_org_id_p
                         (pon_org_id             => validate_cust_site_rec.org_id,
                          pov_status             => l_api_stats,
                          pov_error_code         => source_rec.ERROR_CODE,
                          pov_error_message      => source_rec.error_message,
                          piv_ou_name            => validate_cust_site_rec.operating_unit
                         );

             IF l_api_stats <> 'S'
             THEN
                l_status := g_error;
                log_errors_p (pov_ret_stats      => l_log_ret_stats,
                              pov_err_msg        => l_log_err_msg,
                              pi_err_rec         => source_rec
                             );

                IF l_log_ret_stats <> 'S'
                THEN
                   print_log_message_p
                      (   'Not able to insert error details in Common Error Table for record: '
                       || validate_cust_site_rec.interface_txn_id
                       || 'Error: '
                       || l_log_err_msg
                      );
                END IF;
             END IF;
          END IF;
         */

         --         IF validate_cust_site_rec.leg_customer_name IS NOT NULL
         --         THEN
         IF validate_cust_site_rec.leg_source_system IN
                                                 ('ISSC', 'SASC') --'11i_ISSC'
         THEN

          -- Start Changes Made for Version v1.56 and v1.42
            IF validate_cust_site_rec.hcs_attribute8 IN ('4234', 'A', '4470')
             AND validate_cust_site_rec.leg_source_system = 'SASC' THEN


               IF validate_cust_site_rec.hcs_attribute8 = '4234'
               THEN

                BEGIN

                Select description, meaning into l_r12_ou_name , l_r12_plant
                  from fnd_lookup_values
                 where lookup_type = 'XXAR_CUST_CNV_BR_OU_MAP'
                   and lookup_code = validate_cust_site_rec.hcs_attribute8
                   AND enabled_flag = 'Y'
                   AND TRUNC (SYSDATE) BETWEEN NVL (start_date_active, SYSDATE - 1) AND NVL (end_date_active, SYSDATE + 1)
                   AND LANGUAGE = USERENV ('LANG') ;

                EXCEPTION
                 WHEN NO_DATA_FOUND THEN
                 l_r12_ou_name := NULL;
                 l_r12_plant   := NULL;
                 END;

                  validate_cust_site_rec.operating_unit := l_r12_ou_name;
                  validate_cust_site_rec.hcsu_attribute6 := l_r12_plant;

               END IF;

               IF validate_cust_site_rec.hcs_attribute8 = '4470'
               THEN
                BEGIN

                Select description, meaning into l_r12_ou_name , l_r12_plant
                  from fnd_lookup_values
                 where lookup_type = 'XXAR_CUST_CNV_BR_OU_MAP'
                   and lookup_code = validate_cust_site_rec.hcs_attribute8
                   AND enabled_flag = 'Y'
                   AND TRUNC (SYSDATE) BETWEEN NVL (start_date_active, SYSDATE - 1) AND NVL (end_date_active, SYSDATE + 1)
                   AND LANGUAGE = USERENV ('LANG') ;

                EXCEPTION
                 WHEN NO_DATA_FOUND THEN
                 l_r12_ou_name := NULL;
                 l_r12_plant   := NULL;
                 END;

                  validate_cust_site_rec.operating_unit := l_r12_ou_name;
                  validate_cust_site_rec.hcsu_attribute6 := l_r12_plant;
               END IF;

               IF validate_cust_site_rec.hcs_attribute8 = 'A'
               THEN
                BEGIN

                Select description, meaning into l_r12_ou_name , l_r12_plant
                  from fnd_lookup_values
                 where lookup_type = 'XXAR_CUST_CNV_BR_OU_MAP'
                   and lookup_code = '4234'
                   AND enabled_flag = 'Y'
                   AND TRUNC (SYSDATE) BETWEEN NVL (start_date_active, SYSDATE - 1) AND NVL (end_date_active, SYSDATE + 1)
                   AND LANGUAGE = USERENV ('LANG') ;

                EXCEPTION
                 WHEN NO_DATA_FOUND THEN
                 l_r12_ou_name := NULL;
                 l_r12_plant   := NULL;
                 END;

                  validate_cust_site_rec.operating_unit := l_r12_ou_name;
                  validate_cust_site_rec.hcsu_attribute6 := l_r12_plant;
                                 END IF;

            END IF;

           -- Start Changes Made for Version v1.56 and v1.42
            -- Fetch the ledger value for Site
            IF (TRIM (validate_cust_site_rec.hcsu_attribute6) IS NULL)
            THEN
               source_rec.source_column_name := 'HCSU_ATTRIBUTE6';
               source_rec.source_column_value :=
                                       validate_cust_site_rec.hcsu_attribute6;
               source_rec.ERROR_CODE := 'HCSU_ATTRIBUTE6_NULL';
               source_rec.error_message :=
                             'HCSU_ATTRIBUTE6 cannot be NULL for ISSC Source';
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );
               print_log_message_p
                                (   'Ledger value (hcsu_attribute6) null for '
                                 || validate_cust_site_rec.interface_txn_id
                                );
            ELSE
                -- Commenting as this is redundant code --
                /*

             -- v1.42 changes: START
              IF validate_cust_site_rec.hcs_attribute8 IN ('4234', 'A', '4470')
              AND validate_cust_site_rec.leg_source_system = 'SASC' THEN

                   IF validate_cust_site_rec.hcs_attribute8 = '4234'
                   THEN
                   validate_cust_site_rec.operating_unit := 'Eaton Ltda OU';
                   validate_cust_site_rec.hcsu_attribute6 := '4685';
                   END IF;

                   IF validate_cust_site_rec.hcs_attribute8 = '4470'
                   THEN
                   validate_cust_site_rec.operating_unit := 'Eaton EPS OU';
                   validate_cust_site_rec.hcsu_attribute6 := '4470';
                   END IF;

                   IF validate_cust_site_rec.hcs_attribute8 = 'A'
                   THEN
                    validate_cust_site_rec.operating_unit := 'Eaton Ltda OU';
                    validate_cust_site_rec.hcsu_attribute6 := '4685';
                   END IF;
               */

              --  ELSE
               -- v1.42 changes: END
               -- Fetch the business segment value for the ledger from ETN_MAP_UNIT table --
               derive_r12_ou_p
                  (pov_ou_name            => validate_cust_site_rec.operating_unit,
                   pov_status             => l_api_stats,
                   pov_error_code         => source_rec.ERROR_CODE,
                   pov_error_message      => source_rec.error_message,
                   piv_leg_ledger         => validate_cust_site_rec.hcsu_attribute6,
                   piv_source_system      => validate_cust_site_rec.leg_source_system
                   );

                IF l_api_stats <> 'S'
                THEN
                  source_rec.source_column_name := 'OPERATING_UNIT';
                  source_rec.source_column_value :=
                                        validate_cust_site_rec.operating_unit;
                  l_status := g_error;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                        (   'Not able to insert error details in Common Error Table for record: '
                         || validate_cust_site_rec.interface_txn_id
                         || 'Error: '
                         || l_log_err_msg
                        );
                  END IF;
                END IF;

             -- END IF; -- v1.42 changes
            END IF;
         ELSIF validate_cust_site_rec.leg_source_system = 'FSC'  --'11i_NAFSC'
         THEN
            -- Ankur
            -- This Change is done for Mexico OU data
            -- Ankur
            IF (   /*  UPPER (validate_cust_site_rec.leg_country) IN
                                                              ('MEXICO', 'MX')
                 AND */ ((   UPPER (validate_cust_site_rec.leg_operating_unit) =
                                                             'OU USD 1775 TCO'
                          OR UPPER (validate_cust_site_rec.leg_operating_unit) =
                                                                 'OU MXN CORP'
                         )
                        )
               )
            THEN
               IF (TRIM (validate_cust_site_rec.hcsu_attribute6) IS NULL)
               THEN
                  source_rec.source_column_name := 'HCSU_ATTRIBUTE6';
                  source_rec.source_column_value :=
                                       validate_cust_site_rec.hcsu_attribute6;
                  source_rec.ERROR_CODE := 'HCSU_ATTRIBUTE6_NULL';
                  source_rec.error_message :=
                               'HCSU_ATTRIBUTE6 cannot be NULL for Mexico Source'; -- Added for Version v1.60
                             --'HCSU_ATTRIBUTE6 cannot be NULL for ISSC Source';   -- Commented for Version v1.60
                  l_status := g_error;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );
                  print_log_message_p
                                (   'Ledger value (hcsu_attribute6) null for '
                                 || validate_cust_site_rec.interface_txn_id
                                );
               ELSE
                  derive_r12_ou_p
                     (pov_ou_name            => validate_cust_site_rec.operating_unit,
                      pov_status             => l_api_stats,
                      pov_error_code         => source_rec.ERROR_CODE,
                      pov_error_message      => source_rec.error_message,
                      piv_leg_ledger         => validate_cust_site_rec.hcsu_attribute6,
                      piv_source_system      => 'ISSC'
                     );

                  IF l_api_stats <> 'S'
                  THEN
                     source_rec.source_column_name := 'OPERATING_UNIT';
                     source_rec.source_column_value :=
                                        validate_cust_site_rec.operating_unit;
                     l_status := g_error;
                     log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                   pov_err_msg        => l_log_err_msg,
                                   pi_err_rec         => source_rec
                                  );

                     IF l_log_ret_stats <> 'S'
                     THEN
                        print_log_message_p
                           (   'Not able to insert error details in Common Error Table for record: '
                            || validate_cust_site_rec.interface_txn_id
                            || 'Error: '
                            || l_log_err_msg
                           );
                     END IF;
                  END IF;
               END IF;
            ELSE                    -- Added V1.20
               -- END IF;            -- Off V1.20
               IF validate_cust_site_rec.leg_location IS NULL
               THEN
                  source_rec.source_column_name := 'LEG_LOCATION';
                  source_rec.source_column_value :=
                                          validate_cust_site_rec.leg_location;
                  source_rec.ERROR_CODE := 'LEG_LOCATION_NULL';
                  source_rec.error_message :=
                                 'LEG_LOCATION cannot be NULL for FSC Source';
                  l_status := g_error;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );
                  l_status := g_error;
                  print_log_message_p (   'Credit Office Value is null for '
                                       || validate_cust_site_rec.interface_txn_id
                                      );
               ELSE
                    -- Start V1.19
                    -- It check if dash(-) is there in leg_location field in site staging table
                    DECLARE
                        v_cnt    NUMBER :=0 ;
                    BEGIN
                        BEGIN
                            SELECT    nvl(instr(validate_cust_site_rec.leg_location, '-'),0)
                            INTO    v_cnt
                            FROM    DUAL;
                        EXCEPTION
                            WHEN OTHERS THEN v_cnt :=0 ;
                        END;
                        IF v_cnt=0 THEN
                            source_rec.source_column_name    := 'LEG_LOCATION';
                            source_rec.source_column_value    := validate_cust_site_rec.leg_location;
                            source_rec.error_message        := 'Credit Office Missing in Legacy Location Format' ;
                            l_status := g_error;
                            log_errors_p (    pov_ret_stats      => l_log_ret_stats,
                                            pov_err_msg        => l_log_err_msg,
                                            pi_err_rec         => source_rec
                                         );

                            IF l_log_ret_stats <> 'S'
                            THEN
                            print_log_message_p
                               (   'Not able to insert error details in Common Error Table for record: '
                                || validate_cust_site_rec.interface_txn_id
                                || 'Error: '
                                || l_log_err_msg
                               );
                            END IF;
                        END IF;
                    END;
                    -- End V1.19

                  l_credit_office :=
                     SUBSTR (validate_cust_site_rec.leg_location,
                               (INSTR (validate_cust_site_rec.leg_location,
                                       '-'
                                      )
                               )
                             + 1
                            );
                  -- Fetch the business segment value for the ledger from ETN_MAP_UNIT table --
                  -- Fetch the business segment value for the ledger from ETN_MAP_UNIT table --
                  derive_r12_ou_p
                     (pov_ou_name            => validate_cust_site_rec.operating_unit,
                      pov_status             => l_api_stats,
                      pov_error_code         => source_rec.ERROR_CODE,
                      pov_error_message      => source_rec.error_message,
                      piv_leg_ledger         => l_credit_office,
                      piv_source_system      => validate_cust_site_rec.leg_source_system
                     );

                  IF l_api_stats <> 'S'
                  THEN
                     source_rec.source_column_name := 'OPERATING_UNIT';
                     source_rec.source_column_value :=
                                        validate_cust_site_rec.operating_unit;
                     l_status := g_error;
                     log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                   pov_err_msg        => l_log_err_msg,
                                   pi_err_rec         => source_rec
                                  );

                     IF l_log_ret_stats <> 'S'
                     THEN
                        print_log_message_p
                           (   'Not able to insert error details in Common Error Table for record: '
                            || validate_cust_site_rec.interface_txn_id
                            || 'Error: '
                            || l_log_err_msg
                           );
                     END IF;
                  END IF;
               END IF;
            END IF;
         ELSE
            l_status := g_error;
            source_rec.source_column_name := 'LEG_SOURCE_SYSTEM';
            source_rec.source_column_value :=
                                     validate_cust_site_rec.leg_source_system;
            source_rec.ERROR_CODE := 'INVALID_LEG_SOURCE_SYSTEM';
            source_rec.error_message :=
                                      'Legacy Source System Value is INVALID';
            log_errors_p (pov_ret_stats      => l_log_ret_stats,
                          pov_err_msg        => l_log_err_msg,
                          pi_err_rec         => source_rec
                         );
            print_log_message_p (   'Legacy Source is incorrect for  '
                                 || validate_cust_site_rec.interface_txn_id
                                 || 'Error: '
                                 || validate_cust_site_rec.leg_source_system
                                );
         END IF;

         -- END IF;
         debug_msg_p ('STEP:6.10',
                      'VALIDATE_SITES_P',
                      'Org id: ' || validate_cust_site_rec.org_id
                     );

         IF validate_cust_site_rec.operating_unit IS NOT NULL
         THEN
            source_rec.source_column_name := 'OPERATING_UNIT';
            source_rec.source_column_value :=
                                        validate_cust_site_rec.operating_unit;
            -- Calling Procedure to Derive Org ID from R12 OU
            derive_org_id_p
                        (pon_org_id             => validate_cust_site_rec.org_id,
                         pov_status             => l_api_stats,
                         pov_error_code         => source_rec.ERROR_CODE,
                         pov_error_message      => source_rec.error_message,
                         piv_ou_name            => validate_cust_site_rec.operating_unit
                        );

            IF l_api_stats <> 'S'
            THEN
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_cust_site_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            END IF;
         END IF;

         --- gl_id_clearing
         IF validate_cust_site_rec.leg_gl_id_clearing IS NOT NULL
         THEN
            l_account := validate_cust_site_rec.leg_gl_id_clearing;
            l_account_id :=
               get_accnt_seg_id
                   (piv_acct_name      => 'Clearing Account',
                    piv_acct_seg       => validate_cust_site_rec.leg_gl_id_clearing
                   );

            --id cash account ID is NULL mark error
            IF l_account_id IS NULL
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'LEG_GL_ID_CLEARING';
               source_rec.source_column_value :=
                                    validate_cust_site_rec.leg_gl_id_clearing;
               source_rec.ERROR_CODE := 'INVALID_LEG_GL_ID_CLEARING';
               source_rec.error_message :=
                     'Error : Clearing Account not valid. '
                  || SUBSTR (SQLERRM, 1, 240);
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_cust_site_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            ELSE
               validate_cust_site_rec.gl_id_clearing := l_account_id;
            END IF;
         END IF;

         --- GL_ID_FREIGHT
         IF validate_cust_site_rec.leg_gl_id_freight IS NOT NULL
         THEN
            l_account := validate_cust_site_rec.leg_gl_id_freight;
            l_account_id :=
               get_accnt_seg_id
                    (piv_acct_name      => 'Clearing Account',
                     piv_acct_seg       => validate_cust_site_rec.leg_gl_id_freight
                    );

            --id cash account ID is NULL mark error
            IF l_account_id IS NULL
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'LEG_GL_ID_FREIGHT';
               source_rec.source_column_value :=
                                     validate_cust_site_rec.leg_gl_id_freight;
               source_rec.ERROR_CODE := 'INVALID_LEG_GL_ID_FREIGHT';
               source_rec.error_message :=
                     --'Error : Clearing Account not valid. '    --    Off  V1.35
                     'Error : Freight Account not valid. '        --    Added V1.35
                  || SUBSTR (SQLERRM, 1, 240);
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_cust_site_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            ELSE
               validate_cust_site_rec.gl_id_freight := l_account_id;
            END IF;
         END IF;

         --- GL_ID_REC
         IF (validate_cust_site_rec.leg_gl_id_rec IS NOT NULL
         AND NVL (validate_cust_site_rec.leg_site_use_code, 'X') = 'BILL_TO')--  Added for v1.80 to avoid fetching gl_rec_id for non BILL_TO sites
         THEN
            l_account := validate_cust_site_rec.leg_gl_id_rec;
            l_account_id :=
               get_accnt_seg_id
                        (piv_acct_name      => 'Clearing Account',
                         piv_acct_seg       => validate_cust_site_rec.leg_gl_id_rec
                        );

            --id cash account ID is NULL mark error
            IF l_account_id IS NULL
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'LEG_GL_ID_REC';
               source_rec.source_column_value :=
                                         validate_cust_site_rec.leg_gl_id_rec;
               source_rec.ERROR_CODE := 'INVALID_LEG_GL_ID_REC';
               source_rec.error_message :=
                     --'Error : Clearing Account not valid. '        --    Off V1.35
                     'Error : Receivable Account not valid. '        --    Added V1.35
                  || SUBSTR (SQLERRM, 1, 240);
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_cust_site_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            ELSE
               validate_cust_site_rec.gl_id_rec := l_account_id;
            END IF;
         END IF;

         --- GL_ID_REV
         IF validate_cust_site_rec.leg_gl_id_rev IS NOT NULL
         THEN
            l_account := validate_cust_site_rec.leg_gl_id_rev;
            l_account_id :=
               get_accnt_seg_id
                        (piv_acct_name      => 'Clearing Account',
                         piv_acct_seg       => validate_cust_site_rec.leg_gl_id_rev
                        );

            --id cash account ID is NULL mark error
            IF l_account_id IS NULL
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'LEG_GL_ID_REV';
               source_rec.source_column_value :=
                                         validate_cust_site_rec.leg_gl_id_rev;
               source_rec.ERROR_CODE := 'INVALID_LEG_GL_ID_REV';
               source_rec.error_message :=
                     --'Error : Clearing Account not valid. '    -- Off V1.35
                     'Error : Revenue Account not valid. '        -- Added V1.35
                  || SUBSTR (SQLERRM, 1, 240);
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_cust_site_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            ELSE
               validate_cust_site_rec.gl_id_rev := l_account_id;
            END IF;
         END IF;

         --- GL_ID_TAX
         IF validate_cust_site_rec.leg_gl_id_tax IS NOT NULL
         THEN
            l_account := validate_cust_site_rec.leg_gl_id_tax;
            l_account_id :=
               get_accnt_seg_id
                        (piv_acct_name      => 'Clearing Account',
                         piv_acct_seg       => validate_cust_site_rec.leg_gl_id_tax
                        );

            --id cash account ID is NULL mark error
            IF l_account_id IS NULL
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'LEG_GL_ID_TAX';
               source_rec.source_column_value :=
                                         validate_cust_site_rec.leg_gl_id_tax;
               source_rec.ERROR_CODE := 'INVALID_LEG_GL_ID_TAX';
               source_rec.error_message :=
                     --'Error : Clearing Account not valid. '    --    Off   V1.35
                     'Error : Tax Account not valid. '            --    Added V1.35
                  || SUBSTR (SQLERRM, 1, 240);
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_cust_site_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            ELSE
               validate_cust_site_rec.gl_id_tax := l_account_id;
            END IF;
         END IF;

         --- GL_ID_UNBILLED
         IF validate_cust_site_rec.leg_gl_id_unbilled IS NOT NULL
         THEN
            l_account := validate_cust_site_rec.leg_gl_id_unbilled;
            l_account_id :=
               get_accnt_seg_id
                   (piv_acct_name      => 'Clearing Account',
                    piv_acct_seg       => validate_cust_site_rec.leg_gl_id_unbilled
                   );

            --id cash account ID is NULL mark error
            IF l_account_id IS NULL
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'LEG_GL_ID_UNBILLED';
               source_rec.source_column_value :=
                                    validate_cust_site_rec.leg_gl_id_unbilled;
               source_rec.ERROR_CODE := 'INVALID_LEG_GL_ID_UNBILLED';
               source_rec.error_message :=
                    -- 'Error : Clearing Account not valid. '    --    Off V1.35
                     'Error : Unbilled Account not valid. '        --    Added V1.35
                  || SUBSTR (SQLERRM, 1, 240);
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_cust_site_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            ELSE
               validate_cust_site_rec.gl_id_unbilled := l_account_id;
            END IF;
         END IF;

         --- GL_ID_UNEARNED
         IF validate_cust_site_rec.leg_gl_id_unearned IS NOT NULL
         THEN
            l_account := validate_cust_site_rec.leg_gl_id_unearned;
            l_account_id :=
               get_accnt_seg_id
                   (piv_acct_name      => 'Clearing Account',
                    piv_acct_seg       => validate_cust_site_rec.leg_gl_id_unearned
                   );

            --id cash account ID is NULL mark error
            IF l_account_id IS NULL
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'LEG_GL_ID_UNEARNED';
               source_rec.source_column_value :=
                                    validate_cust_site_rec.leg_gl_id_unearned;
               source_rec.ERROR_CODE := 'INVALID_LEG_GL_ID_UNEARNED';
               source_rec.error_message :=
                     --'Error : Clearing Account not valid. '    --    Off V1.35
                     'Error : Unearned Account not valid. '        --    Added V1.35
                  || SUBSTR (SQLERRM, 1, 240);
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                     (   'Not able to insert error details in Common Error Table for record: '
                      || validate_cust_site_rec.interface_txn_id
                      || 'Error: '
                      || l_log_err_msg
                     );
               END IF;
            ELSE
               validate_cust_site_rec.gl_id_unearned := l_account_id;
            END IF;
         END IF;

         --- Should be included at part of Profile Validation --
          /** Derive Payment Term id based on R12 Setups **/
          /*
          IF validate_cust_site_rec.leg_term_name IS NOT NULL
          THEN
             source_rec.source_column_name := 'LEG_TERM_NAME';
             source_rec.source_column_value :=
                                          validate_cust_site_rec.leg_term_name;
             -- Calling Procedure to Derive Org ID from R12 OU
             derive_term_id_p
                    (pon_term_id            => validate_cust_site_rec.term_id,
                     pov_term_name          => validate_cust_site_rec.term_name,
                     pov_status             => l_api_stats,
                     pov_error_code         => source_rec.ERROR_CODE,
                     pov_error_message      => source_rec.error_message,
                     piv_leg_term_name      => validate_cust_site_rec.leg_term_name
                    );

             IF l_api_stats <> 'S'
             THEN
                l_status := g_error;
                log_errors_p (pov_ret_stats      => l_log_ret_stats,
                              pov_err_msg        => l_log_err_msg,
                              pi_err_rec         => source_rec
                             );

                IF l_log_ret_stats <> 'S'
                THEN
                   print_log_message_p
                      (   'Not able to insert error details in Common Error Table for record: '
                       || validate_cust_site_rec.interface_txn_id
                       || 'Error: '
                       || l_log_err_msg
                      );
                END IF;
             END IF;
          END IF;
             */
         debug_msg_p ('STEP:6.10',
                      'VALIDATE_SITES_P',
                      'Term ID: ' || validate_cust_site_rec.term_id
                     );

         /** Derive Account Name  **/
         IF validate_cust_site_rec.leg_customer_name IS NOT NULL
         THEN
            IF validate_cust_site_rec.leg_source_system IN
                                                ('ISSC', 'SASC') --'11i_ISSC'
            THEN
               -- Fetch the ledger value for Site
               IF (TRIM (validate_cust_site_rec.hcsu_attribute6) IS NULL)
               THEN
                  print_log_message_p
                               (   'Ledger value (hcsu_attribute6) null for '
                                || validate_cust_site_rec.interface_txn_id
                               );
               ELSE
                  -- Fetch the business segment value for the ledger from ETN_MAP_UNIT table --

                  --SELECT DECODE(validate_cust_site_rec.leg_source_system,'SASC',SUBSTR(validate_cust_site_rec.leg_gl_id_rec,INSTR(validate_cust_site_rec.leg_gl_id_rec,'.',1,5)+1,4),TRIM(validate_cust_site_rec.hcsu_attribute6))
                 --   INTO l_plant_value
                --    FROM DUAL;
                -- Changed for V1.75

                /* Commented for version v1.80
                IF validate_cust_site_rec.leg_source_system = 'SASC' AND NVL(validate_cust_site_rec.leg_customer_type, 'X') = 'I'
                THEN

                    SELECT SUBSTR(validate_cust_site_rec.leg_gl_id_rec,INSTR(validate_cust_site_rec.leg_gl_id_rec,'.',1,5)+1,4)
                      INTO l_plant_value
                      FROM DUAL;

                ELSE                */
                      l_plant_value := TRIM(validate_cust_site_rec.hcsu_attribute6);

               -- END IF; -- Commented for version v1.80

                  dervive_business_seg_p
                     (piv_value              => l_plant_value,
                      piv_source_system      => validate_cust_site_rec.leg_source_system,
                      pov_business_seg       => l_business_seg,
                      pov_status             => l_api_stats,
                      pov_error_code         => source_rec.ERROR_CODE,
                      pov_error_message      => source_rec.error_message
                     );

                  -- Derive the Customer Name by concatinating the Customer Name and Business Segment--
                  IF l_business_seg IS NOT NULL
                  THEN
                     --v1.41 Start Added By Ankur for Intercompany CR
                     IF NVL(validate_cust_site_rec.leg_customer_type, 'X') = 'I' THEN

                      l_r12_party_name := NULL;

                      BEGIN

                        SELECT customer_acc_name_r12
                           INTO l_r12_party_name
                           FROM xxar_customer_stg xcss
                          WHERE xcss.leg_orig_sys_cust_ref = validate_cust_site_rec.leg_orig_sys_cust_ref
                            AND xcss.leg_source_system = validate_cust_site_rec.leg_source_system
                            AND xcss.customer_acc_name_r12 IS NOT NULL
                            AND ROWNUM = 1;

                      EXCEPTION
                       WHEN OTHERS THEN
                       l_r12_party_name := validate_cust_site_rec.leg_customer_name;
                      END;

                     validate_cust_site_rec.customer_acc_name_r12 :=
                        UPPER (   l_r12_party_name
                               || '-'
                               || l_business_seg
                              );

                     ELSE

                     -- Changed by Ankur for the issue where Cust Account name is not same as party name and that is why
                     -- Multiple accounts are getting Created.
                     -- Start
                      BEGIN

                      l_r12_party_name := NULL;

                        SELECT Leg_customer_name
                           INTO l_r12_party_name
                           FROM xxar_customer_stg xcss
                          WHERE xcss.leg_orig_sys_cust_ref = validate_cust_site_rec.leg_orig_sys_cust_ref
                            AND ROWNUM = 1;

                      EXCEPTION
                       WHEN OTHERS THEN
                       l_r12_party_name := validate_cust_site_rec.leg_customer_name;
                      END;
                        -- End Change

                     validate_cust_site_rec.customer_acc_name_r12 :=
                        UPPER (   l_r12_party_name
                               || '-'
                               || l_business_seg
                              );

                     END IF;
                    --v1.41 End Added By Ankur for Intercompany CR


                    --v1.41 Start Commeneted By Ankur for Intercompany CR
                    --                     validate_cust_site_rec.customer_acc_name_r12 :=
                    --                        UPPER (   validate_cust_site_rec.leg_customer_name
                    --                               || '-'
                    --                               || l_business_seg
                    --                              );
                    --v1.41 End Commeneted By Ankur for Intercompany CR
                  ELSE
                     source_rec.source_column_name := 'CUSTOMER_ACC_NAME_R12';
                     source_rec.source_column_value := NULL;
                     source_rec.ERROR_CODE := 'R12_CUST_NAME_FAILED';
                     source_rec.error_message :=
                                        'R12 Customer name cannot be derived';
                     l_status := g_error;
                     log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                   pov_err_msg        => l_log_err_msg,
                                   pi_err_rec         => source_rec
                                  );
                     l_status := g_error;
                     print_log_message_p
                        (   'Business Segment Value is not correctly defined for '
                         || validate_cust_site_rec.interface_txn_id
                        );
                  END IF;
               END IF;
            ELSIF validate_cust_site_rec.leg_source_system = 'FSC'
            --'11i_NAFSC'
            THEN
               -- Check if the OU belongs to Mexico
               -- Special logic for Mexico OU Data
                -- Ankur
                -- This Change is done for 3PP and Credit Office related Customer Account Relation Ship Changes.
                -- Ankur
               IF (     /* UPPER (validate_cust_site_rec.leg_country) IN
                                                              ('MEXICO', 'MX')
                    AND */ ((   UPPER
                                    (validate_cust_site_rec.leg_operating_unit) =
                                                             'OU USD 1775 TCO'
                             OR UPPER
                                    (validate_cust_site_rec.leg_operating_unit) =
                                                                 'OU MXN CORP'
                            )
                           )
                  )
               THEN
                  --IF (TRIM (validate_cust_site_rec.hcsu_attribute6) IS NULL)            --    Off   V1.20
                  IF (TRIM (validate_cust_site_rec.hcsu_attribute6) IS NOT NULL)        --    Added V1.20
                  THEN
                     dervive_business_seg_p
                        (piv_value              => TRIM
                                                      (validate_cust_site_rec.hcsu_attribute6
                                                      ),
                         piv_source_system      => 'ISSC',
                         pov_business_seg       => l_business_seg,
                         pov_status             => l_api_stats,
                         pov_error_code         => source_rec.ERROR_CODE,
                         pov_error_message      => source_rec.error_message
                        );
                  ELSE            --    Added V1.20
                      -- Start V1.20
                      source_rec.source_column_name := 'HCSU_ATTRIBUTE6';
                      source_rec.source_column_value := NULL;
                      source_rec.ERROR_CODE := 'HCSU_ATTRIBUTE6_FAILED';
                      source_rec.error_message := 'HCSU_ATTRIBUTE6 IS NULL for Mexico Customer';
                      l_status := g_error;
                      log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                   pov_err_msg        => l_log_err_msg,
                                   pi_err_rec         => source_rec
                                  );
                      print_log_message_p
                                         (   'For Mexico OU, Attribute6 Value is null for INTERFACE_TXN_ID: '
                                          || validate_cust_site_rec.interface_txn_id
                                         );
                      -- End V1.20
                  END IF;
               --END IF;    --    Off V1.20 extending this portion for both MEXICO and non-MEXICO
               ELSE            --    Added V1.20    the below portion if for NON-MEXICO part
                   IF validate_cust_site_rec.leg_location IS NULL
                   THEN
                      l_status := g_error;
                      print_log_message_p
                                         (   'Credit Office Value is null for '
                                          || validate_cust_site_rec.interface_txn_id
                                         );
                   ELSE
                        -- Start V1.19
                        -- It check if dash(-) is there in leg_location field in site staging table
                        DECLARE
                            v_cnt    NUMBER :=0 ;
                        BEGIN
                            BEGIN
                                SELECT    nvl(instr(validate_cust_site_rec.leg_location, '-'),0)
                                INTO    v_cnt
                                FROM    DUAL;
                            EXCEPTION
                                WHEN OTHERS THEN v_cnt :=0 ;
                            END;
                            IF v_cnt=0 THEN
                                source_rec.source_column_name    := 'LEG_LOCATION';
                                source_rec.source_column_value    := validate_cust_site_rec.leg_location;
                                source_rec.error_message        := 'Credit Office Missing in Legacy Location Format' ;
                                l_status := g_error;
                                log_errors_p (    pov_ret_stats      => l_log_ret_stats,
                                                pov_err_msg        => l_log_err_msg,
                                                pi_err_rec         => source_rec
                                             );

                                IF l_log_ret_stats <> 'S'
                                THEN
                                print_log_message_p
                                   (   'Not able to insert error details in Common Error Table for record: '
                                    || validate_cust_site_rec.interface_txn_id
                                    || 'Error: '
                                    || l_log_err_msg
                                   );
                                END IF;
                            END IF;
                        END;
                        -- End V1.19

                      l_credit_office :=
                         SUBSTR (validate_cust_site_rec.leg_location,
                                   (INSTR (validate_cust_site_rec.leg_location,
                                           '-'
                                          )
                                   )
                                 + 1
                                );
                      -- Fetch the business segment value for the ledger from ETN_MAP_UNIT table --
                      dervive_business_seg_p
                         (piv_value              => l_credit_office,
                          piv_source_system      => validate_cust_site_rec.leg_source_system,
                          pov_business_seg       => l_business_seg,
                          pov_status             => l_api_stats,
                          pov_error_code         => source_rec.ERROR_CODE,
                          pov_error_message      => source_rec.error_message
                         );
                   END IF;
               END IF;        --    Added V1.20

               -- Derive the Customer Name by concatinating the Customer Name and Business Segment--
               IF l_business_seg IS NOT NULL
               THEN
                     --v1.41 Start Added By Ankur for Intercompany CR
                     IF NVL(validate_cust_site_rec.leg_customer_type, 'X') = 'I' THEN

                      l_r12_party_name := NULL;

                      BEGIN

                        SELECT customer_acc_name_r12
                           INTO l_r12_party_name
                           FROM xxar_customer_stg xcss
                          WHERE xcss.leg_orig_sys_cust_ref = validate_cust_site_rec.leg_orig_sys_cust_ref
                            AND xcss.leg_source_system = validate_cust_site_rec.leg_source_system
                            AND xcss.customer_acc_name_r12 IS NOT NULL
                            AND ROWNUM = 1;

                      EXCEPTION
                       WHEN OTHERS THEN
                       l_r12_party_name := validate_cust_site_rec.leg_customer_name;
                      END;

                     validate_cust_site_rec.customer_acc_name_r12 :=
                        UPPER (   l_r12_party_name
                               || '-'
                               || l_business_seg
                              );

                     ELSE
                     -- Changed by Ankur for the issue where Cust Account name is not same as party name and that is why
                     -- Multiple accounts are getting Created.
                     -- Start
                      BEGIN

                      l_r12_party_name := NULL;

                        SELECT Leg_customer_name
                           INTO l_r12_party_name
                           FROM xxar_customer_stg xcss
                          WHERE xcss.leg_orig_sys_cust_ref = validate_cust_site_rec.leg_orig_sys_cust_ref
                            AND ROWNUM = 1;

                      EXCEPTION
                       WHEN OTHERS THEN
                       l_r12_party_name := validate_cust_site_rec.leg_customer_name;
                      END;
                        -- End Change
                     validate_cust_site_rec.customer_acc_name_r12 :=
                        UPPER (   l_r12_party_name
                               || '-'
                               || l_business_seg
                              );

                     END IF;
                    --v1.41 End Added By Ankur for Intercompany CR


                    --v1.41 Start Commeneted By Ankur for Intercompany CR
                    --                     validate_cust_site_rec.customer_acc_name_r12 :=
                    --                        UPPER (   validate_cust_site_rec.leg_customer_name
                    --                               || '-'
                    --                               || l_business_seg
                    --                              );
                    --v1.41 End Commeneted By Ankur for Intercompany CR
               ELSE
                  source_rec.source_column_name := 'CUSTOMER_ACC_NAME_R12';
                  source_rec.source_column_value := NULL;
                  source_rec.ERROR_CODE := 'R12_CUST_NAME_FAILED';
                  source_rec.error_message :=
                                        'R12 Customer name cannot be derived';
                  l_status := g_error;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );
                  l_status := g_error;
                  print_log_message_p
                       (   'Credit Office Value is not correctly defined for '
                        || validate_cust_site_rec.interface_txn_id
                       );
               END IF;
            --END IF;
            ELSE
               l_status := g_error;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );
               print_log_message_p (   'Legacy Source is incorrect for  '
                                    || validate_cust_site_rec.interface_txn_id
                                    || 'Error: '
                                    || validate_cust_site_rec.leg_source_system
                                   );
            END IF;
         ELSE
            l_status := g_error;
            source_rec.source_column_name := 'LEG_CUSTOMER_NAME';
            source_rec.source_column_value :=
                                     validate_cust_site_rec.leg_customer_name;
            source_rec.ERROR_CODE := 'LEG_CUSTOMER_NAME';
            source_rec.error_message := 'LEG_CUSTOMER_NAME cannot be Null';
            log_errors_p (pov_ret_stats      => l_log_ret_stats,
                          pov_err_msg        => l_log_err_msg,
                          pi_err_rec         => source_rec
                         );
         END IF;

         debug_msg_p ('STEP:6.10',
                      'VALIDATE_SITES_P',
                         'Sales Channel Lookup '
                      || validate_cust_site_rec.leg_stmt_cycle_name
                     );

        -- Added for V1,81

          IF l_business_seg IS NOT NULL
         THEN
            BEGIN

                SELECT    count(1)
                INTO    l_count
                FROM    fnd_lookup_values
                WHERE    lookup_type = 'SALES_CHANNEL'
                AND        UPPER(LOOKUP_CODE) = UPPER(l_business_seg)
                AND        enabled_flag = 'Y'
                AND        LANGUAGE = USERENV ('LANG')
                AND        TRUNC (SYSDATE) BETWEEN NVL (start_date_active,
                                                 TRUNC (SYSDATE)
                                                )
                                        AND NVL (end_date_active,
                                                 TRUNC (SYSDATE)
                                                );

               IF l_count = 0
               THEN
                  source_rec.source_column_name := 'SALES_CHANNEL';
                  source_rec.source_column_value := l_business_seg;
                  source_rec.ERROR_CODE := 'SALES_CHANNEL_INVALID';
                  source_rec.error_message := 'Sales Channel Not Found';
                  l_status := g_error;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                        (   'Not able to insert error details in Common Error Table for record: '
                         || validate_cust_site_rec.interface_txn_id
                         || 'Error: '
                         || l_log_err_msg
                        );
                  END IF;
               END IF;
            EXCEPTION
               WHEN OTHERS
               THEN
                  source_rec.source_column_name := 'SALES_CHANNEL';
                  source_rec.source_column_value := l_business_seg;
                  source_rec.ERROR_CODE := 'SALES_CHANNEL_INVALID';
                  source_rec.error_message := 'Sales Channel Not Found';
                  l_status := g_error;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                        (   'Not able to insert error details in Common Error Table for record: '
                         || validate_cust_site_rec.interface_txn_id
                         || 'Error: '
                         || l_log_err_msg
                        );
                  END IF;
            END;
         END IF;


        -- End for v1.81

         -- If any Validation Fails, increment failed record count --
         IF l_status = g_error
         THEN
            g_failed_count := g_failed_count + 1;
         END IF;

         BEGIN
            UPDATE xxar_customer_site_stg xcss
               SET xcss.leg_statements = validate_cust_site_rec.leg_statements,
                   xcss.operating_unit = validate_cust_site_rec.operating_unit,
                   -- xcss.leg_bill_to_orig_ref = validate_cust_site_rec.leg_bill_to_orig_ref,
                   xcss.org_id = validate_cust_site_rec.org_id,
                   xcss.party_id = l_party_id,
                   xcss.party_number = l_party_number,
                   xcss.leg_address1 =
                                   UPPER (validate_cust_site_rec.leg_address1),
                   xcss.leg_address2 =
                                   UPPER (validate_cust_site_rec.leg_address2),
                   xcss.customer_acc_name_r12 =
                                  validate_cust_site_rec.customer_acc_name_r12,
                   xcss.gl_id_unearned = validate_cust_site_rec.gl_id_unearned,
                   xcss.gl_id_unbilled = validate_cust_site_rec.gl_id_unbilled,
                   xcss.gl_id_tax = validate_cust_site_rec.gl_id_tax,
                   xcss.gl_id_rev = validate_cust_site_rec.gl_id_rev,
                   xcss.gl_id_rec = validate_cust_site_rec.gl_id_rec,
                   xcss.gl_id_freight = validate_cust_site_rec.gl_id_freight,
                   xcss.gl_id_clearing = validate_cust_site_rec.gl_id_clearing,
                   xcss.hcsu_attribute6 = validate_cust_site_rec.hcsu_attribute6, -- Added for version 1.42
                   xcss.process_flag = l_status,
                   xcss.run_sequence_id = g_new_run_seq_id,
                   xcss.ERROR_TYPE =
                              DECODE (l_status,
                                      g_error, g_val_err_type,
                                      NULL
                                     ),
                   xcss.last_updated_date = SYSDATE,
                   xcss.last_update_login = g_last_update_login,
                   xcss.last_updated_by = g_last_updated_by,
                   xcss.request_id = g_request_id
                  ,hl_attribute15  = l_business_seg        --    Added V1.28
             WHERE xcss.interface_txn_id =
                                       validate_cust_site_rec.interface_txn_id;

            -- For Defect 168 -- Derive Orig Sys Ref
            l_orig_sys_ref_site := NULL;

            IF validate_cust_site_rec.customer_acc_name_r12 IS NOT NULL
            THEN
               l_orig_sys_ref_site := NULL;

               FOR get_orig_sys_cust_rec IN
                  get_orig_sys_cust_cur
                               (validate_cust_site_rec.customer_acc_name_r12,
                                l_party_id
                               )
               LOOP
                  IF l_orig_sys_ref_site IS NULL
                  THEN
                     l_orig_sys_ref_site :=
                                    get_orig_sys_cust_rec.leg_customer_number;
                  ELSE
                     l_orig_sys_ref_site :=
                           l_orig_sys_ref_site
                        || '|'
                        || get_orig_sys_cust_rec.leg_customer_number;
                  END IF;
               END LOOP;

               l_orig_sys_ref_site := SUBSTR (l_orig_sys_ref_site, 1, 240);
            END IF;

            UPDATE xxar_customer_site_stg xcss
               SET xcss.leg_bill_to_orig_ref = l_orig_sys_ref_site
             WHERE xcss.interface_txn_id =
                                       validate_cust_site_rec.interface_txn_id;
         EXCEPTION
            WHEN OTHERS
            THEN
               debug_msg_p ('STEP:6.17',
                            'validate_sites_p',
                            'SQL Error in updating Staging table: ' || SQLERRM
                           );
         END;

         -- If Batch Commit Limit is reached
         IF l_count >= g_limit
         THEN
            l_count := 0;
            debug_msg_p ('STEP:6.18',
                         'validate_sites_p',
                         'Performing Batch Commit'
                        );
            COMMIT;
         ELSE
            l_count := l_count + 1;
         END IF;
      END LOOP;

      -- Below changes added for Mock3 Defect# 4796, v1.70 on 28-Mar-2016
      FOR validate_cust_site_use_rec IN validate_cust_site_use_cur
      LOOP
         l_count1 := 0;
         fnd_file.put_line (fnd_file.LOG, 'For this SHIP_TO/SOLD_TO Site usage test');
         BEGIN
              SELECT COUNT(*)
                INTO l_count1
                FROM xxar_customer_site_stg xcss
               WHERE xcss.leg_site_use_id    = validate_cust_site_use_rec.leg_bill_to_site_use_id
                 AND xcss.leg_operating_unit = validate_cust_site_use_rec.leg_operating_unit
                 AND xcss.leg_source_system = validate_cust_site_use_rec.leg_source_system
                 AND xcss.leg_site_use_code = 'BILL_TO'
                 AND xcss.process_flag NOT IN ('C', 'V');

              IF l_count1 >= 1
              THEN
                  l_status := g_error;
                  source_rec.source_column_name   := 'LEG_SITE_USE_CODE';
                  source_rec.error_type           := g_val_err_type;
                  source_rec.source_column_value  := validate_cust_site_use_rec.leg_bill_to_site_use_id;
                  source_rec.error_code           := validate_cust_site_use_rec.leg_site_use_code;
                  source_rec.error_message        := 'For this SHIP_TO/SOLD_TO Site, corresponding linked BILL_TO site usage is not validated.';
                  source_rec.interface_staging_id := validate_cust_site_use_rec.interface_txn_id;

                  log_errors_p (pov_ret_stats => l_log_ret_stats,
                                pov_err_msg   => l_log_err_msg,
                                pi_err_rec    => source_rec
                               );

                  UPDATE xxar_customer_site_stg
                     SET process_flag = l_status,
					     error_type = g_val_err_type
                   WHERE interface_txn_id = validate_cust_site_use_rec.interface_txn_id;

              END IF;
            EXCEPTION
              WHEN OTHERS THEN
                  NULL;

         END;
         -- If Batch Commit Limit is reached
         IF l_cnt >= g_limit
         THEN
            l_cnt := 0;
            debug_msg_p ('STEP:6.19',
                         'validate_sites_p',
                         'Performing Batch Commit'
                        );
            COMMIT;
         ELSE
            l_cnt := l_cnt + 1;
         END IF;
      END LOOP;
      -- Changes End for Mock3 Defect# 4796, v1.70

      -- Insert remaining errors into Error Table
      IF g_source_tab.COUNT > 0
      THEN
         debug_msg_p ('STEP:6.21',
                      'validate_sites_p',
                      'Error Table Type Count: ' || g_source_tab.COUNT
                     );
         debug_msg_p ('STEP:6.22',
                      'validate_sites_p',
                      'Logging Remaining Errors in Error table'
                     );
         g_err_cnt := 1;
         xxetn_common_error_pkg.add_error
                                        (pov_return_status      => l_log_ret_stats,
                                         pov_error_msg          => l_log_err_msg,
                                         pi_source_tab          => g_source_tab
                                        );

         IF l_log_ret_stats <> 'S'
         THEN
            pov_ret_stats := 'E';
            print_log_message_p
               (   'Not able to insert error details in Common Error Table: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;

         -- Flushing PLSQL Table
         g_source_tab.DELETE;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         pov_ret_stats := 'E';
         pov_err_msg :=
               'ERROR : XXAR_CUSTOMER_PKG.VALIDATE_SITES_P->WHEN_OTHERS->'
            || SQLERRM;
   END validate_sites_p;

--
-- =============================================================================
-- Procedure: validate_pay_method_p
-- =============================================================================
-- This private procedure will Validate  payment Method to the Customer Account Sites
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: MAIN_PROC_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters     :
--
--  Output Parameters    :
--  pov_ret_stats        : Returns Status
--  pov_err_msg          : Returns Error Message
--
--  Return               : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE validate_pay_method_p (
      pov_ret_stats   OUT NOCOPY   VARCHAR2,
      pov_err_msg     OUT NOCOPY   VARCHAR2
   )
   IS
      l_status              VARCHAR2 (20);
      l_count               NUMBER                                   := 0;
      l_return_status       VARCHAR2 (20);
      l_error_msg           VARCHAR2 (2000);
      l_log_ret_stats       VARCHAR2 (10);
      l_log_err_msg         VARCHAR2 (2000);
      l_api_stats           VARCHAR2 (10);
      l_err_cnt             NUMBER                                   := 0;
      l_pay_meth_count      NUMBER                                   := 0;
      l_receipt_method_id   NUMBER;
      l_cust_count          NUMBER;

      l_r12_pay_meth        VARCHAR2 (240); --v1.56

      -- Error Table Record Type
      source_rec            xxetn_common_error_pkg.g_source_rec_type;

      -- Staging Table Cursor to Process Records
      CURSOR validate_pay_method_cur
      IS
         SELECT   *
             FROM xxar_cust_pay_method_stg xcs
            WHERE xcs.process_flag IN (g_new_rec, g_err_rec, g_val_rec)
              AND xcs.batch_id = NVL (g_new_batch_id, g_batch_id)
              AND leg_source_system = NVL (g_leg_src_sys, leg_source_system)
         --  AND leg_operating_unit =   NVL (g_leg_ou, leg_operating_unit)
         ORDER BY xcs.interface_txn_id;
   BEGIN
      pov_ret_stats := 'S';
      pov_err_msg := NULL;
      g_total_count := 0;
      g_failed_count := 0;
      debug_msg_p ('STEP:6.1',
                   'VALIDATE_PAY_METHOD_P',
                   'In Begin of Prc: VALIDATE_PAY_METHOD_P'
                  );
      -- Assign Batch Id and Run Sequence Id for Current Run
      g_new_run_seq_id :=
                         NVL (g_new_run_seq_id, xxetn_run_sequences_s.NEXTVAL);
      g_new_batch_id := NVL (g_new_batch_id, g_batch_id);
      -- Intialize Batch Id and Run Sequence Id for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_new_batch_id;         -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;
      -- run sequence id
      debug_msg_p ('STEP:6.2',
                   'VALIDATE_PAY_METHOD_P',
                      'Batch Id to Update: '
                   || g_new_batch_id
                   || ' and Run Sequence Id: '
                   || g_new_run_seq_id
                  );

      -- Open Customer Cursor to Validate the data
      FOR validate_pay_method_rec IN validate_pay_method_cur
      LOOP
         l_status := g_validated;
         l_return_status := 'S';
         l_error_msg := NULL;
         -- total record count
         g_total_count := g_total_count + 1;
         source_rec.interface_staging_id :=
                                     validate_pay_method_rec.interface_txn_id;
         debug_msg_p ('STEP:6.3',
                      'VALIDATE_PAY_METHOD_P',
                         'Inside Cursor Loop for Record Id: '
                      || validate_pay_method_rec.interface_txn_id
                     );
         -- Added by Ankur for Version v1.56
         BEGIN

           BEGIN
            l_r12_pay_meth := NULL;

               SELECT description
                 INTO l_r12_pay_meth
                 FROM fnd_lookup_values
                WHERE lookup_type = 'XXAR_CUST_CNV_PAY_METH_MAP'
                  AND upper(Meaning) = upper(validate_pay_method_rec.leg_pay_method_name)
                  AND enabled_flag = 'Y'
                  AND TRUNC (SYSDATE) BETWEEN NVL (start_date_active, SYSDATE - 1)
                                          AND NVL (end_date_active, SYSDATE + 1)
                  AND LANGUAGE = USERENV ('LANG')
                  AND ROWNUM = 1;
           EXCEPTION
            WHEN OTHERS
            THEN
              l_r12_pay_meth := Null;

             END;

            IF l_r12_pay_meth  is NULL
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'LEG_PAY_METHOD_NAME';
               source_rec.source_column_value :=
                                  validate_pay_method_rec.leg_pay_method_name;
               source_rec.ERROR_CODE := 'INVALID_LEG_PAY_METHOD_NAME';
               source_rec.error_message :=
                                    'R12 PAY Method Mapping XXAR_CUST_CNV_PAY_METH_MAP not Set up';
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );
            END IF;

         EXCEPTION
            WHEN OTHERS
            THEN
               pov_ret_stats := g_error;
               l_status := g_error;
               pov_err_msg :=
                     'SQL Error occured while fetching Receipt Methods: '
                  || SQLERRM;
         END;
         -- Added by Ankur for Version v1.56


         BEGIN
            l_pay_meth_count := 0;

            SELECT COUNT (1)
              INTO l_pay_meth_count
              FROM ar_receipt_methods
             WHERE upper(NAME) = upper(l_r12_pay_meth)
               AND SYSDATE BETWEEN (NVL (start_date, SYSDATE - 1))
                               AND (NVL (end_date, SYSDATE + 1));

            IF l_pay_meth_count = 0
            THEN
               l_status := g_error;
               source_rec.source_column_name := 'LEG_PAY_METHOD_NAME';
               source_rec.source_column_value := l_r12_pay_meth ;
               source_rec.ERROR_CODE := 'INVALID_R12_PAY_METHOD_NAME';
               source_rec.error_message :=
                                    'R12_PAY_METHOD_NAME is not Setup in R12';
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               pov_ret_stats := g_error;
               l_status := g_error;
               pov_err_msg :=
                     'SQL Error occured while fetching Receipt Methods: '
                  || SQLERRM;
         END;

          ----
         --         source_rec.source_column_name := 'LEG_SITE_NUMBER';
         --         source_rec.source_column_value :=
         --                                       validate_pay_method_rec.leg_site_number;
         --         source_rec.ERROR_CODE := 'NULL_LEG_SITE_NUMBER';
         --         source_rec.error_message := 'LEG_SITE_NUMBER cannot be NULL';

         --         IF mandatory_check_f (validate_pay_method_rec.leg_site_number,
         --                               source_rec
         --                              )
         --         THEN
         --            debug_msg_p ('STEP:6.4',
         --                         'VALIDATE_PAY_METHOD_P',
         --                         'LEG_SITE_NUMBER is NULL'
         --                        );
         --            l_status := g_error;
         --         END IF;
         IF validate_pay_method_rec.leg_site_number IS NOT NULL
         THEN
            BEGIN
               SELECT xcss.cust_account_id,
                      xcss.cust_acct_site_use_id
                 INTO validate_pay_method_rec.cust_account_id,
                      validate_pay_method_rec.customer_site_use_id
                 FROM xxar_customer_site_stg xcss
                WHERE xcss.leg_customer_number =
                                   validate_pay_method_rec.leg_customer_number
                  --AND xcss.leg_source_system = validate_pay_method_rec.leg_source_system
                  AND xcss.leg_party_site_number =
                                       validate_pay_method_rec.leg_site_number
                 --AND xcss.cust_acct_site_use_id = validate_pay_method_rec.customer_site_use_id -- Condition Added for Mock2 Defect# 1997 v1.13 on 03-Jun-2015 (Commented on 29-Jun-2015 for v1.18)
                  AND xcss.leg_site_use_code = 'BILL_TO'                                         -- Condition Added for Mock2 Defect# 1997 v1.18 on 29-Jun-2015
                  AND xcss.process_flag      = 'C';

               IF validate_pay_method_rec.customer_site_use_id IS NULL
               THEN
                  l_status := g_error;
                  source_rec.source_column_name := 'LEG_SITE_NUMBER';
                  source_rec.source_column_value :=
                                      validate_pay_method_rec.leg_site_number;
                  source_rec.ERROR_CODE := 'SITE_NOT_FOUND';
                  source_rec.error_message :=
                                        'Customer Site is not Created in R12';
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );
                  pov_ret_stats := g_error;
               END IF;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  l_status := g_error;
                  source_rec.source_column_name := 'LEG_CUSTOMER_NUMBER';
                  source_rec.source_column_value :=
                                  validate_pay_method_rec.leg_customer_number;
                  source_rec.ERROR_CODE := 'CUSTOMER_NOT_FOUND';
                  source_rec.error_message :=
                       -- 'Customer not Present in XXAR_CUSTOMER_SITE_STG table'; -- Commented for v1.81
                       'Customer BILL_TO site not converted into R12'; -- Added for v1.81
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );
                  pov_ret_stats := g_error;
                  pov_err_msg :=
                        'SQL Error occured while fetching Receipt Methods: '
                     || SQLERRM;
               WHEN OTHERS
               THEN
                  l_status := g_error;
                  source_rec.source_column_name := 'CUSTOMER_SITE_USE_ID';
                  source_rec.source_column_value :=
                                  validate_pay_method_rec.leg_pay_method_name;
                  source_rec.ERROR_CODE := 'SITE_NOT_FOUND';
                  source_rec.error_message :=
                                        'Customer Site is not Created in R12';
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );
                  pov_ret_stats := g_error;
                  pov_err_msg :=
                        'SQL Error occured while fetching Receipt Methods: '
                     || SQLERRM;
            END;
         END IF;

         IF validate_pay_method_rec.leg_site_number IS NULL
         THEN
            BEGIN
               SELECT COUNT (1)
                 INTO l_cust_count
                 FROM xxar_customer_site_stg xcss
                WHERE xcss.leg_customer_number =
                                   validate_pay_method_rec.leg_customer_number
                  AND xcss.leg_source_system =
                                     validate_pay_method_rec.leg_source_system
                  AND xcss.process_flag = 'C';

               IF l_cust_count = 0
               THEN
                  l_status := g_error;
                  source_rec.source_column_name := 'LEG_CUSTOMER_NUMBER';
                  source_rec.source_column_value :=
                                      validate_pay_method_rec.leg_site_number;
                  source_rec.ERROR_CODE := 'CUSTOMER_NOT_FOUND';
                  source_rec.error_message :=
                                        'Customer Site is not Created in R12';
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );
                  pov_ret_stats := g_error;
               END IF;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  l_status := g_error;
                  source_rec.source_column_name := 'LEG_CUSTOMER_NUMBER';
                  source_rec.source_column_value :=
                                      validate_pay_method_rec.leg_site_number;
                  source_rec.ERROR_CODE := 'CUSTOMER_NOT_FOUND';
                  source_rec.error_message :=
                                        'Customer Site is not Created in R12';
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );
                  pov_ret_stats := g_error;
                  pov_err_msg :=
                        'SQL Error occured while fetching Receipt Methods: '
                     || SQLERRM;
               WHEN OTHERS
               THEN
                  l_status := g_error;
                  l_status := g_error;
                  source_rec.source_column_name := 'LEG_CUSTOMER_NUMBER';
                  source_rec.source_column_value :=
                                      validate_pay_method_rec.leg_site_number;
                  source_rec.ERROR_CODE := 'CUSTOMER_NOT_FOUND';
                  source_rec.error_message :=
                                        'Customer Site is not Created in R12';
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );
                  pov_ret_stats := g_error;
                  pov_err_msg :=
                        'SQL Error occured while fetching Receipt Methods: '
                     || SQLERRM;
            END;
         END IF;

         -- If any Validation Fails, increment failed record count --
         IF l_status = g_error
         THEN
            g_failed_count := g_failed_count + 1;
         END IF;

         BEGIN
            UPDATE xxar_cust_pay_method_stg xcs
               SET xcs.process_flag = l_status,
                   xcs.cust_account_id =
                                       validate_pay_method_rec.cust_account_id,
                   xcs.customer_site_use_id =
                                  validate_pay_method_rec.customer_site_use_id,
                   xcs.run_sequence_id = g_new_run_seq_id,
                   xcs.ERROR_TYPE =
                              DECODE (l_status,
                                      g_error, g_val_err_type,
                                      NULL
                                     ),
                   xcs.last_updated_date = SYSDATE,
                   xcs.last_update_login = g_last_update_login,
                   xcs.last_updated_by = g_last_updated_by,
                   xcs.request_id = g_request_id
             WHERE xcs.interface_txn_id =
                                      validate_pay_method_rec.interface_txn_id;
         EXCEPTION
            WHEN OTHERS
            THEN
               debug_msg_p ('STEP:6.8',
                            'VALIDATE_PAY_METHOD_P',
                            'SQL Error in updating Staging table: ' || SQLERRM
                           );
         END;

         -- If Batch Commit Limit is reached
         IF l_count >= g_limit
         THEN
            l_count := 0;
            debug_msg_p ('STEP:6.9',
                         'VALIDATE_PAY_METHOD_P',
                         'Performing Batch Commit'
                        );
            COMMIT;
         ELSE
            l_count := l_count + 1;
         END IF;
      END LOOP;

      -- Insert remaining errors into Error Table
      IF g_source_tab.COUNT > 0
      THEN
         debug_msg_p ('STEP:6.10',
                      'VALIDATE_PAY_METHOD_P',
                      'Error Table Type Count: ' || g_source_tab.COUNT
                     );
         debug_msg_p ('STEP:6.11',
                      'VALIDATE_PAY_METHOD_P',
                      'Logging Remaining Errors in Error table'
                     );
         g_err_cnt := 1;
         xxetn_common_error_pkg.add_error
                                        (pov_return_status      => l_log_ret_stats,
                                         pov_error_msg          => l_log_err_msg,
                                         pi_source_tab          => g_source_tab
                                        );

         IF l_log_ret_stats <> 'S'
         THEN
            pov_ret_stats := 'E';
            print_log_message_p
               (   'Not able to insert error details in Common Error Table: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;

         -- Flushing PLSQL Table
         g_source_tab.DELETE;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         pov_ret_stats := 'E';
         pov_err_msg :=
               'ERROR : XXAR_CUSTOMER_PKG.VALIDATE_PAY_METHOD_P->WHEN_OTHERS->'
            || SQLERRM;
   END validate_pay_method_p;

--
-- =============================================================================
-- Procedure: import_cust_accounts_p
-- =============================================================================
-- This private procedure will create Customer Accounts
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: iport_sites_p
-- -----------------------------------------------------------------------------
--
--  Input Parameters     :
--
--  Output Parameters    :
--  pov_ret_stats        : Returns Status
--  pov_err_msg          : Returns Error Message
--
--  Return               : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE import_cust_accounts_p (
      pov_ret_stats             OUT      VARCHAR2,
      pov_err_msg               OUT      VARCHAR2,
      pon_cust_account_id       OUT      NUMBER,
      pov_account_number        OUT      VARCHAR2,
      pov_return_status         OUT      VARCHAR2,
      piv_cust_name             IN       VARCHAR2,
      piv_orig_sys_cust_ref     IN       VARCHAR2,
      piv_leg_cust_number       IN       VARCHAR2,
      piv_customer_type         IN       VARCHAR2,
      piv_customer_class_code   IN       VARCHAR2,
      pin_party_id              IN       NUMBER,
      piv_party_number          IN       VARCHAR2,
      pin_interface_txn_id      IN       NUMBER,
      piv_leg_customer_num      IN       VARCHAR2
   )
   IS
      l_return_status            VARCHAR2 (10);
      l_msg_count                VARCHAR2 (100)                  DEFAULT NULL;
      l_msg_data                 VARCHAR2 (2000)                 DEFAULT NULL;
      l_msg                      VARCHAR2 (2000)                 DEFAULT NULL;
      l_msg_index_out            NUMBER;
      l_data                     VARCHAR2 (2000)                 DEFAULT NULL;
      l_err_msg                  VARCHAR2 (1000);
      l_count                    NUMBER                             DEFAULT 0;
      l_status                   xxar_customer_stg.process_flag%TYPE;
      l_idx                      NUMBER                                  := 0;
      l_wf_started               VARCHAR2 (1)                          := 'Y';
      l_log_ret_stats            VARCHAR2 (10);
      l_log_err_msg              VARCHAR2 (2000);
      l_new_party_id             NUMBER;
      l_party_number             VARCHAR2 (2000);
      l_profile_id               NUMBER;
      l_cust_account_id          NUMBER;
      l_account_number           VARCHAR2 (50);
      l_cust_count               NUMBER;
      l_cust_count2              NUMBER;
      l_count2                   NUMBER;
      l_collector_id             NUMBER;
      l_statement_cycle_id       NUMBER;
      l_orig_sys_cust_ref        VARCHAR2 (240);
      l_language                 VARCHAR2(20);                     -- Added for v1.54, Mock3 Defect# 4654
      -- Customer Records
      l_cust_account_rec         hz_cust_account_v2pub.cust_account_rec_type;
      l_organization_rec         hz_party_v2pub.organization_rec_type;
      l_customer_profile_rec     hz_customer_profile_v2pub.customer_profile_rec_type;
      l_person_rec               hz_party_v2pub.person_rec_type;
      l_new_party_type           hz_parties.party_type%TYPE;
      l_customer_prof_amnt_rec   hz_customer_profile_v2pub.cust_profile_amt_rec_type;
      l_cust_acct_relate_rec     hz_cust_account_v2pub.cust_acct_relate_rec_type;
      -- Error Table Record Type
      source_rec                 xxetn_common_error_pkg.g_source_rec_type;


      v_sales_channel        varchar2(2000);

      CURSOR import_cust_sites_cur
      IS
         SELECT *
           FROM xxar_customer_site_stg xcss
          WHERE xcss.batch_id = NVL (g_batch_id, xcss.batch_id)
            AND interface_txn_id = pin_interface_txn_id;
   BEGIN
      pov_ret_stats := 'S';
      pov_err_msg := NULL;
      g_total_count := 0;
      g_failed_count := 0;
      l_language := NULL;                                          -- Added for v1.54, Mock3 Defect# 4654
      debug_msg_p ('STEP:7.1',
                   'IMPORT_CUST_ACCOUNTS_P',
                   'In Begin of Proc: IMPORT_CUST_ACCOUNTS_P'
                  );
      -- g_new_run_seq_id := xxetn_run_sequences_s.NEXTVAL;

      -- Intialize Run Sequence Id Only for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_batch_id;             -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;
                                                            -- run sequence id
      -- Intialize Common variables for Record Type
      source_rec.ERROR_TYPE := g_imp_err_type;
      debug_msg_p ('STEP:7.2',
                   'IMPORT_CUST_ACCOUNTS_P',
                   'Run Sequence Id: ' || g_new_run_seq_id
                  );

      BEGIN
         --- Fetch the Attribute Values from xxar_customer_stg table
         SELECT hca_attribute5,
                hca_attribute7,
                --hca_attribute8,                                                                  --Commented for v1.73
                DECODE(leg_source_system,'FSC',hca_attribute3,'SASC',hca_attribute3,'ISSC',NULL),  --Added for v1.73 Distress_Flag
                hca_attribute15
           INTO l_cust_account_rec.attribute5,
                -- l_cust_account_rec.attribute7,  -- Commented for v1.54, Mock3 Defect# 4654
                l_language,                        -- Added for v1.54, Mock3 Defect# 4654
                l_cust_account_rec.attribute8,
                l_cust_account_rec.attribute15
           FROM xxar_customer_stg
          WHERE leg_customer_number = piv_leg_cust_number
            AND party_id = pin_party_id
            AND ROWNUM = 1;
         fnd_file.put_line (fnd_file.LOG,'import_cust_accounts_p, l_cust_account_rec.attribute5: '|| l_cust_account_rec.attribute5);
      EXCEPTION
         WHEN OTHERS
         THEN
            fnd_file.put_line (fnd_file.LOG,'import_cust_accounts_p, no data found');
            NULL;
      END;
	  
	  -- Below changes added for Defect# 10996 v1.87
	  IF UPPER(l_language) = 'ZF' THEN
	      l_cust_account_rec.attribute7 := 'TRADITIONAL CHINESE';
		  
	  ELSIF UPPER(l_language) = 'CHINESE' THEN
	      l_cust_account_rec.attribute7 := 'SIMPLIFIED CHINESE';
		  
	  ELSE 
         l_cust_account_rec.attribute7 := UPPER(l_language);  -- Added for v1.54, Mock3 Defect# 4654
	  END IF;

      --- Check if the an Account is already existing for the Leg Customer Number
      SELECT COUNT (1)
        INTO l_cust_count
        FROM hz_cust_accounts
       WHERE orig_system_reference = piv_orig_sys_cust_ref;

      l_count2 := 1;

      IF l_cust_count > 0
      THEN
         -- Start Loop
         LOOP
            --- Check if the an Account is already existing for the piv_leg_cust_number
            SELECT COUNT (1)
              INTO l_cust_count2
              FROM hz_cust_accounts
             WHERE orig_system_reference =
                                      piv_orig_sys_cust_ref || '-' || l_count2;

            IF l_cust_count2 = 0
            THEN
               l_orig_sys_cust_ref :=
                                     piv_orig_sys_cust_ref || '-' || l_count2;
               EXIT;
            ELSE
               l_count2 := l_count2 + 1;
            END IF;
         END LOOP;
      ELSE
         l_orig_sys_cust_ref := piv_orig_sys_cust_ref;
      END IF;

      --      FOR import_cust_sites_rec IN import_cust_sites_cur
      --      LOOP
       --         IF import_cust_sites_rec.leg_collector_name IS NOT NULL
       --         THEN
       --            BEGIN
       --               SELECT collector_id
       --                 INTO l_collector_id
       --                 FROM ar_collectors
       --                WHERE NAME = import_cust_sites_rec.leg_collector_name;
       --            EXCEPTION
       --               WHEN OTHERS
       --               THEN
       --                  l_collector_id := NULL;
       --            END;
       --         END IF;

      --         IF import_cust_sites_rec.leg_stmt_cycle_name IS NOT NULL
      --         THEN
      --            BEGIN
      --               SELECT statement_cycle_id
      --                 INTO l_statement_cycle_id
      --                 FROM ar_statement_cycles arc
      --                WHERE UPPER (arc.NAME) =
      --                             UPPER (import_cust_sites_rec.leg_stmt_cycle_name);
      --            EXCEPTION
      --               WHEN OTHERS
      --               THEN
      --                  l_statement_cycle_id := NULL;
      --            END;
      --         END IF;
      l_organization_rec.party_rec.party_id := pin_party_id;
      l_organization_rec.party_rec.party_number := piv_party_number;
      --l_cust_account_rec.orig_system_reference := piv_orig_sys_cust_ref;
      l_cust_account_rec.orig_system_reference := l_orig_sys_cust_ref;
      l_cust_account_rec.status := 'A';

      IF (SUBSTR (piv_leg_cust_number, 1, 2) = '99')
      THEN
         --IF piv_leg_customer_num like '99%' THEN
         l_cust_account_rec.customer_type := 'I';
      ELSE
   --      l_cust_account_rec.customer_type := 'R';  --piv_customer_type;  Defect# 5880, V1.74 -- Commented for V1.81
         l_cust_account_rec.customer_type := NVL(piv_customer_type, 'R'); -- Added for V1.81

      END IF;


        -- Start V1.28
        BEGIN
            SELECT    hl_attribute15
            INTO    v_sales_channel
            FROM    xxar_customer_site_stg
            WHERE    INTERFACE_TXN_ID =    pin_interface_txn_id
            AND        customer_acc_name_r12 = piv_cust_name ;
        EXCEPTION
            WHEN OTHERS THEN v_sales_channel:=null;
        END;
        --
        IF v_sales_channel IS NOT NULL THEN
            BEGIN
                SELECT    LOOKUP_CODE
                INTO    l_cust_account_rec.sales_channel_code
                FROM    fnd_lookup_values
                WHERE    lookup_type = 'SALES_CHANNEL'
                AND        UPPER(LOOKUP_CODE) = UPPER(v_sales_channel)
                AND        enabled_flag = 'Y'
                AND        LANGUAGE = USERENV ('LANG')
                AND        TRUNC (SYSDATE) BETWEEN NVL (start_date_active,
                                                 TRUNC (SYSDATE)
                                                )
                                        AND NVL (end_date_active,
                                                 TRUNC (SYSDATE)
                                                );
            EXCEPTION
                WHEN OTHERS THEN
                     debug_msg_p ('STEP:7.3',
                                  'IMPORT_CUST_ACCOUNTS_P',
                                     'Checking SALES CHANNEL code: TxnID-'
                                  || pin_interface_txn_id
                                  || ' Error - '
                                  || v_sales_channel || ' Not defined in SALES_CHANNEL lookup'
                                 );
                     --l_status := g_error;
                     source_rec.interface_staging_id := pin_interface_txn_id;
                     source_rec.source_column_name := 'HL_ATTRIBUTE15';
                     source_rec.source_column_value := v_sales_channel;
                     source_rec.ERROR_CODE := 'SALES_CHANNEL_ERROR';
                     source_rec.error_message := v_sales_channel || ' Not defined in SALES_CHANNEL lookup' ;
                     log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                   pov_err_msg        => l_log_err_msg,
                                   pi_err_rec         => source_rec
                                  );

                     IF l_log_ret_stats <> 'S'
                     THEN
                        print_log_message_p
                                      (   'Not able to Create Customer Record Using API '
                                       || pin_interface_txn_id
                                       || 'Error: '
                                       || l_log_err_msg
                                      );
                     END IF;
            END;
        END IF;
        -- End V1.28

      -- l_cust_account_rec.customer_type := piv_leg_customer_type;
      --l_cust_account_rec.customer_class_code := piv_customer_class_code;      -- Commented for Mock2 Defect# 1897 v1.11 on 30-May-2015
     -- l_cust_account_rec.customer_class_code := UPPER(piv_customer_class_code); -- Added for Mock2 Defect# 1897 v1.11 on 30-May-2015 commented for v1.93
	  --1.93 if customer class code is coming null from 11i then use NO CLASSIFICATION
	  l_cust_account_rec.customer_class_code := NVL(UPPER(piv_customer_class_code),'NO CLASSIFICATION');
	  --end of v1.93 
      l_cust_account_rec.account_name := UPPER(piv_cust_name);    -- Added UPPER for v1.85, Defect#9134
      l_cust_account_rec.created_by_module := g_created_by_module;
               --Updating Customer Profile Record Types
      --         l_customer_profile_rec.collector_id := l_collector_id;
      --         l_customer_profile_rec.credit_checking :=
      --                                     import_cust_sites_rec.leg_credit_checking;
      --         l_customer_profile_rec.tolerance :=
      --                                           import_cust_sites_rec.leg_tolerance;
      --         l_customer_profile_rec.discount_terms :=
      --                                       import_cust_sites_rec.leg_discount_term;
      --         l_customer_profile_rec.dunning_letters :=
      --                                     import_cust_sites_rec.leg_dunning_letters;
      --         l_customer_profile_rec.interest_charges :=
      --                                    import_cust_sites_rec.leg_interest_charges;
      --         l_customer_profile_rec.credit_balance_statements :=
      --                                     import_cust_sites_rec.leg_credit_bal_stmt;
      --         l_customer_profile_rec.credit_hold :=
      --                                         import_cust_sites_rec.leg_credit_hold;
      --         l_customer_profile_rec.credit_rating :=
      --                                       import_cust_sites_rec.leg_credit_rating;
      --         l_customer_profile_rec.risk_code :=
      --                                           import_cust_sites_rec.leg_risk_code;
      --         l_customer_profile_rec.override_terms :=
      --                                       import_cust_sites_rec.leg_override_term;
      --         l_customer_profile_rec.dunning_letter_set_id :=
      --                             import_cust_sites_rec.leg_dunning_letter_set_name;
      --         l_customer_profile_rec.interest_period_days :=
      --                                import_cust_sites_rec.leg_interest_period_days;
      --         l_customer_profile_rec.payment_grace_days :=
      --                                  import_cust_sites_rec.leg_payment_grace_days;
      --         l_customer_profile_rec.discount_grace_days :=
      --                                 import_cust_sites_rec.leg_discount_grace_days;
      --         l_customer_profile_rec.statement_cycle_id := l_statement_cycle_id;

      --         IF l_statement_cycle_id IS NOT NULL
      --         THEN
      --            l_customer_profile_rec.send_statements := 'Y';
      --         END IF;

          --     l_customer_profile_rec.account_status :=
            --                                      import_cust_sites_rec.leg_account_status;
            --         l_customer_profile_rec.percent_collectable :=
            --                                 import_cust_sites_rec.leg_percent_collectible;
            --         l_customer_profile_rec.tax_printing_option :=
            --                                 import_cust_sites_rec.leg_tax_printing_option;
            --         l_customer_profile_rec.charge_on_finance_charge_flag :=
            --                                  import_cust_sites_rec.leg_charge_on_fin_flag;
            --         l_customer_profile_rec.clearing_days :=
            --                                       import_cust_sites_rec.leg_clearing_days;
            --         l_customer_profile_rec.cons_inv_flag :=
            --                                       import_cust_sites_rec.leg_cons_inv_flag;
            --         l_customer_profile_rec.cons_inv_type :=
            --                                       import_cust_sites_rec.leg_cons_inv_type;
            --         l_customer_profile_rec.lockbox_matching_option :=
            --                             import_cust_sites_rec.leg_lockbox_matching_option;
            --         l_customer_profile_rec.credit_classification :=
            --                               import_cust_sites_rec.leg_credit_classification;

            -- Defect#5880 V1.74
            BEGIN
            SELECT lookup_code --meaning
             INTO l_customer_profile_rec.account_status
             FROM ar_lookups
            WHERE lookup_type = 'ACCOUNT_STATUS'
              AND lookup_code = 'CUSTOMER'
              AND enabled_flag = 'Y'
              AND SYSDATE BETWEEN NVL(start_date_active,SYSDATE-1) AND NVL(end_date_active,SYSDATE+1);
            EXCEPTION
                WHEN OTHERS
                THEN
                   l_customer_profile_rec.account_status := NULL;
            END;

            BEGIN
            SELECT profile_class_id
             INTO l_customer_profile_rec.profile_class_id
             FROM HZ_CUST_PROFILE_CLASSES
            WHERE name = 'EATON DEFAULT'
              AND status = 'A'
             ;
            EXCEPTION
                WHEN OTHERS
                THEN
                   l_customer_profile_rec.profile_class_id := NULL;
            END;
            --     End V1.74

          -- Start Change  by ANkur for v1.52

            BEGIN

            SELECT statement_cycle_id
              INTO l_statement_cycle_id
              FROM ar_statement_cycles arc
             WHERE UPPER (arc.NAME) =
                      UPPER ('MONTHLY');
            EXCEPTION
                WHEN OTHERS
                THEN
                   l_statement_cycle_id := NULL;
            END;

           l_customer_profile_rec.statement_cycle_id := l_statement_cycle_id;
           l_customer_profile_rec.send_statements := 'Y';


            IF NVL(piv_customer_type, 'X') = 'I' THEN

            l_customer_profile_rec.dunning_letter_set_id := NULL;
            l_customer_profile_rec.dunning_letters := 'N';

            ELSE

             BEGIN

              SELECT dunning_letter_set_id
                INTO l_customer_profile_rec.dunning_letter_set_id
                FROM ar_dunning_letter_sets
               WHERE UPPER (NAME) = 'STANDARD';

             EXCEPTION
                WHEN OTHERS
                THEN
                   l_statement_cycle_id := NULL;
             END;

            l_customer_profile_rec.dunning_letters := 'Y';

            END IF;

          -- End Change  by ANkur for v1.52

--   calling the api to create Accounts
      hz_cust_account_v2pub.create_cust_account
                            (p_init_msg_list             => fnd_api.g_true,
                             p_cust_account_rec          => l_cust_account_rec,
                             p_organization_rec          => l_organization_rec,
                             p_customer_profile_rec      => l_customer_profile_rec,
                             p_create_profile_amt        => fnd_api.g_true,
                             --- Can be set to False ????
                             x_cust_account_id           => l_cust_account_id,
                             x_account_number            => l_account_number,
                             x_party_id                  => l_new_party_id,
                             x_party_number              => l_party_number,
                             x_profile_id                => l_profile_id,
                             x_return_status             => l_return_status,
                             x_msg_count                 => l_msg_count,
                             x_msg_data                  => l_msg_data
                            );

      IF NVL (l_return_status, '-1') <> 'S'
      THEN
         pov_return_status := l_return_status;

         --- error msg
         IF l_msg_count > 1
         THEN
            FOR i IN 1 .. (l_msg_count - 1)
            LOOP
               l_msg :=
                  apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                        apps.fnd_api.g_false
                                       );
               l_msg_data := l_msg_data || '-' || l_msg;
            END LOOP;
         ELSE
            l_msg_data :=
               apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_first,
                                     apps.fnd_api.g_false
                                    );
         END IF;

         debug_msg_p ('STEP:7.3',
                      'IMPORT_CUST_ACCOUNTS_P',
                         'Inside API Error for create customers: '
                      || pin_interface_txn_id
                      || ' Error - '
                      || l_msg_data
                     );
         g_failed_count := g_failed_count + 1;
         l_status := g_error;
         source_rec.interface_staging_id := pin_interface_txn_id;
         source_rec.source_column_name := NULL;
         source_rec.source_column_value := NULL;
         source_rec.ERROR_CODE := 'CUST_API_ERROR';
         source_rec.error_message := l_msg_data;
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );

         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
                          (   'Not able to Create Customer Record Using API '
                           || pin_interface_txn_id
                           || 'Error: '
                           || l_log_err_msg
                          );
         END IF;
      ELSE
         --- Write Back details of Account in the Staging Table ---
         pon_cust_account_id := l_cust_account_id;
         pov_account_number := l_account_number;
         pov_return_status := l_return_status;
      --            UPDATE xxar_customer_site_stg
      --               SET customer_number = l_account_number,
      --                   cust_account_id = l_cust_account_id
      --             WHERE 1 = 1 AND interface_txn_id = pin_interface_txn_id;
      END IF;

      --    END LOOP;
      IF g_failed_count > 0
      THEN
         pov_ret_stats := 'E';
      -- Program must complete in Warning if any of Import fails
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         pov_ret_stats := 'E';
         pov_err_msg :=
               'ERROR : XXAR_CUSTOMERS_PKG.IMPORT_CUST_ACCOUNTS_P->WHEN_OTHERS->'
            || SQLERRM;
         debug_msg_p ('STEP:7.4',
                      'IMPORT_CUST_ACCOUNTS_P',
                      'pov_err_msg : ' || pov_err_msg
                     );
   END import_cust_accounts_p;

--
-- =============================================================================
-- Procedure: import_profile_amounts_p
-- =============================================================================
-- This private procedure will create Customer Accounts
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: iport_sites_p
-- -----------------------------------------------------------------------------
--
--  Input Parameters     :
--
--  Output Parameters    :
--  pov_ret_stats        : Returns Status
--  pov_err_msg          : Returns Error Message
--
--  Return               : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE import_profile_amounts_p (
      pov_ret_stats             OUT      VARCHAR2,
      pov_err_msg               OUT      VARCHAR2,
      pin_site_use_id           IN       NUMBER,
      pin_leg_site_use_id       IN       NUMBER,
      piv_leg_customer_number   IN       VARCHAR2,
      piv_source_system         IN       VARCHAR2,
      pin_cust_account_id       IN       NUMBER,
      pin_party_id              IN       NUMBER
     ,pin_org_id                IN       NUMBER  --Added for v1.42
     ,piv_attribute8            IN       VARCHAR2 -- v1.81 added
   )
   IS
      l_log_ret_stats               VARCHAR2 (10);
      l_log_err_msg                 VARCHAR2 (2000);
      l_return_status               VARCHAR2 (10);
      l_msg_count                   VARCHAR2 (100)               DEFAULT NULL;
      l_msg_data                    VARCHAR2 (2000)              DEFAULT NULL;
      l_msg                         VARCHAR2 (2000)              DEFAULT NULL;
      l_msg_index_out               NUMBER;
      l_cust_account_profile_id     NUMBER;
      l_cust_acct_profile_amt_id    NUMBER;
      l_collector_id                NUMBER;
      l_statement_cycle_id          NUMBER;
      l_data                        VARCHAR2 (2000)              DEFAULT NULL;
      l_err_msg                     VARCHAR2 (1000);
      l_count                       NUMBER                          DEFAULT 0;
      l_status                      xxar_customer_stg.process_flag%TYPE;
      l_idx                         NUMBER                               := 0;
      -- l_customer_profile_rec        hz_customer_profile_v2pub.customer_profile_rec_type;
      l_customer_prof_amnt_rec      hz_customer_profile_v2pub.cust_profile_amt_rec_type;
      l_cust_profile_amt_rec_type   hz_customer_profile_v2pub.cust_profile_amt_rec_type;
      -- Error Table Record Type
      source_rec                    xxetn_common_error_pkg.g_source_rec_type;
      l_r12_plant                   VARCHAR2 (240) := NULL; -- v1.56
	  l_ldg_currency				VARCHAR2 (15); -- v1.94

      CURSOR site_profile_amt_cur
      IS
         SELECT *
           FROM xxar_customer_prof_amnt_stg xcss
          WHERE xcss.leg_site_use_id = pin_leg_site_use_id
            AND xcss.leg_customer_number = piv_leg_customer_number
            AND xcss.leg_source_system = piv_source_system
            AND NVL (xcss.process_flag, 'X') IN ('C', 'V', 'E'); -- Added 'E' for version 1.67
            --<> ('C'); -- modified for v1.34
      l_ou_name    VARCHAR2(240) := NULL;    -- Added v1.42
   BEGIN
      pov_ret_stats := 'S';
      pov_err_msg := NULL;
      g_total_count := 0;
      g_failed_count := 0;
	  l_ldg_currency := NULL ; --v1.94
      debug_msg_p ('STEP:7.1',
                   'IMPORT_PROFILE_AMOUNTS_P',
                   'In Begin of Proc: IMPORT_PROFILE_AMOUNTS_P'
                  );
      -- g_new_run_seq_id := xxetn_run_sequences_s.NEXTVAL;

      -- Intialize Run Sequence Id Only for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_batch_id;             -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;
                                                            -- run sequence id
      -- Intialize Common variables for Record Type
      source_rec.ERROR_TYPE := g_imp_err_type;
      debug_msg_p ('STEP:7.2',
                   'IMPORT_PROFILE_AMOUNTS_P',
                   'Run Sequence Id: ' || g_new_run_seq_id
                  );

      BEGIN
         SELECT cust_account_profile_id
           INTO l_cust_account_profile_id
           FROM hz_customer_profiles
          WHERE cust_account_id = pin_cust_account_id
            AND site_use_id = pin_site_use_id;
      EXCEPTION
         WHEN OTHERS
         THEN
            l_cust_account_profile_id := NULL;
      END;

      debug_msg_p ('STEP:7.2',
                   'IMPORT_PROFILE_AMOUNTS_P',
                   'l_cust_account_profile_id: ' || l_cust_account_profile_id
                  );

      FOR site_profile_amt_rec IN site_profile_amt_cur
      LOOP
         -- l_cust_account_profile_id := NULL;
		 --change started for v1.94
		 IF     site_profile_amt_rec.leg_currency_code IS NULL THEN
		 
			BEGIN
				SELECT ldg.currency_code
				INTO l_ldg_currency
				FROM apps.hz_cust_site_uses_all hsu,
				apps.hr_operating_units hou,
				apps.gl_ledgers ldg
				WHERE hou.organization_id = hsu.org_id
				AND ldg.ledger_id = hou.set_of_books_id
				AND hsu.site_use_id = pin_site_use_id;
				
			EXCEPTION
			WHEN OTHERS THEN
				l_ldg_currency:= NULL;
			END;
		 
		 END IF; -- end of IF     site_profile_amt_rec.leg_currency_code IS NULL
		 
		 
		 --end of v1.94
         --IF     site_profile_amt_rec.leg_currency_code IS NOT NULL
           -- AND l_cust_account_profile_id IS NOT NULL commented for v1.94
		 IF l_cust_account_profile_id IS NOT NULL
         THEN
		 
            --l_cust_profile_amt_rec_type.currency_code := site_profile_amt_rec.leg_currency_code; commented for v1.94
			
			l_cust_profile_amt_rec_type.currency_code := NVL(site_profile_amt_rec.leg_currency_code,l_ldg_currency); --added for v1.94
			
            l_cust_profile_amt_rec_type.created_by_module :=
                                                          g_created_by_module;
            -- l_cust_profile_amt_rec_type.cust_account_id := pin_cust_account_id;
            l_cust_profile_amt_rec_type.site_use_id := pin_site_use_id;
            l_cust_profile_amt_rec_type.cust_account_id :=
                                                          pin_cust_account_id;
            --- From the Above API -- l_cust_account_profile_id
            l_cust_profile_amt_rec_type.cust_account_profile_id :=
                                                    l_cust_account_profile_id;

			IF site_profile_amt_rec.leg_currency_code IS NOT NULL THEN --added for v1.94
            -- v1.42 change : START
            IF piv_source_system = 'SASC'
            THEN
                BEGIN


                    SELECT name
                      INTO l_ou_name
                      FROM hr_operating_units
                     WHERE organization_id = pin_org_id;

                  IF  piv_attribute8 IN ('4234', 'A', '4470') THEN --- v1.81

                  -- v1.56 change : START
                    BEGIN
                       SELECT meaning
                         INTO l_r12_plant
                         FROM fnd_lookup_values
                        WHERE lookup_type = 'XXAR_CUST_CNV_BR_OU_MAP'
                          AND upper(description) = upper(l_ou_name)
                          AND enabled_flag = 'Y'
                          AND TRUNC (SYSDATE) BETWEEN NVL (start_date_active, SYSDATE - 1)
                                                  AND NVL (end_date_active, SYSDATE + 1)
                          AND LANGUAGE = USERENV ('LANG');
                    EXCEPTION
                       WHEN OTHERS
                       THEN
                          l_r12_plant := NULL;
                    END;
                    -- v1.56 change : END
                  ELSE  -- v1.81

                     l_r12_plant := NULL; -- v1.81

                  END IF; -- v1.81

                    IF UPPER(l_r12_plant) = '4685'-- v1.56 change : -- Eaton Ltda OU
                    THEN
                        l_cust_profile_amt_rec_type.trx_credit_limit := site_profile_amt_rec.hcpa_attribute1;
                        l_cust_profile_amt_rec_type.overall_credit_limit := site_profile_amt_rec.hcpa_attribute1;
                    ELSIF UPPER(l_r12_plant) = UPPER('4470')-- v1.56 change : -- Eaton EPS OU
                    THEN
                        l_cust_profile_amt_rec_type.trx_credit_limit := site_profile_amt_rec.hcpa_attribute2;
                        l_cust_profile_amt_rec_type.overall_credit_limit := site_profile_amt_rec.hcpa_attribute2;
                    ELSE
                        l_cust_profile_amt_rec_type.trx_credit_limit := site_profile_amt_rec.leg_tax_credit_limit;
                        l_cust_profile_amt_rec_type.overall_credit_limit := site_profile_amt_rec.leg_overall_credit_limit;
                    END IF;

                END;
            ELSE
                l_cust_profile_amt_rec_type.trx_credit_limit := site_profile_amt_rec.leg_tax_credit_limit;
                l_cust_profile_amt_rec_type.overall_credit_limit := site_profile_amt_rec.leg_overall_credit_limit;
            END IF;
            -- v1.42 change: END

            l_cust_profile_amt_rec_type.min_dunning_amount :=
                                         site_profile_amt_rec.leg_min_dun_amt;
            l_cust_profile_amt_rec_type.min_dunning_invoice_amount :=
                                     site_profile_amt_rec.leg_min_dun_inv_amt;
            l_cust_profile_amt_rec_type.max_interest_charge :=
                                      site_profile_amt_rec.leg_max_int_charge;
            l_cust_profile_amt_rec_type.min_statement_amount :=
                                        site_profile_amt_rec.leg_min_stmt_amt;
            l_cust_profile_amt_rec_type.auto_rec_min_receipt_amount :=
                               site_profile_amt_rec.leg_auto_rec_min_rcpt_amt;
            l_cust_profile_amt_rec_type.interest_rate :=
                                       site_profile_amt_rec.leg_interest_rate;
            l_cust_profile_amt_rec_type.min_fc_balance_amount :=
                                      site_profile_amt_rec.leg_min_fc_bal_amt;
            l_cust_profile_amt_rec_type.min_fc_invoice_amount :=
                                      site_profile_amt_rec.leg_min_fc_inv_amt;
            l_cust_profile_amt_rec_type.attribute3 :=
                                         site_profile_amt_rec.hcpa_attribute3;
            l_cust_profile_amt_rec_type.attribute4 :=
                                         site_profile_amt_rec.hcpa_attribute4;
            l_cust_profile_amt_rec_type.attribute5 :=
                                         site_profile_amt_rec.hcpa_attribute5;
            l_cust_profile_amt_rec_type.min_fc_balance_amount :=
                                      site_profile_amt_rec.leg_min_fc_bal_amt;
            l_cust_profile_amt_rec_type.min_fc_invoice_amount :=
                                      site_profile_amt_rec.leg_min_fc_inv_amt;

			END IF; -- end of IF site_profile_amt_rec.leg_currency_code IS NOT NULL THEN v1.94
									  -- Call API --
            hz_customer_profile_v2pub.create_cust_profile_amt
                                                ('T',
                                                 'T',
                                                 l_cust_profile_amt_rec_type,
                                                 l_cust_acct_profile_amt_id,
                                                 l_return_status,
                                                 l_msg_count,
                                                 l_msg_data
                                                );

            IF NVL (l_return_status, '-1') <> 'S'
            THEN
               UPDATE xxar_customer_prof_amnt_stg
                  SET cust_account_id = pin_cust_account_id,
                      cust_acct_site_use_id = pin_site_use_id,
                      run_sequence_id = g_new_run_seq_id,
                      process_flag = g_imp_err_type,
                      ERROR_TYPE = NULL,
                      request_id = g_request_id,
                      last_updated_date = SYSDATE,
                      last_updated_by = g_last_updated_by,
                      last_update_login = g_last_update_login
                WHERE 1 = 1
                  AND interface_txn_id = site_profile_amt_rec.interface_txn_id;

                --Added for v1.67
                -- If the profile amount API has some error then to reprocess the
                -- same we need to mark the site record to error as well

                 UPDATE xxar_customer_site_stg
                    SET process_flag = g_error,
                        ERROR_TYPE = g_imp_err_type
                  WHERE 1 = 1
                    AND leg_site_use_id = pin_leg_site_use_id;

                --Added for v1.67


               --- error msg
               IF l_msg_count > 1
               THEN
                  FOR i IN 1 .. (l_msg_count - 1)
                  LOOP
                     l_msg :=
                        apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                              apps.fnd_api.g_false
                                             );
                     l_msg_data := l_msg_data || '-' || l_msg;
                  END LOOP;
               ELSE
                  l_msg_data :=
                     apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_first,
                                           apps.fnd_api.g_false
                                          );
               END IF;

               debug_msg_p ('STEP:7.3',
                            'IMPORT_PROFILE_AMOUNTS_P',
                               'Inside API Error for create Profile amounts: '
                            || site_profile_amt_rec.interface_txn_id
                            || ' Error - '
                            || l_msg_data
                           );
               g_failed_count := g_failed_count + 1;
               l_status := g_error;
               source_rec.interface_staging_id :=
                                         site_profile_amt_rec.interface_txn_id;
               source_rec.source_column_name := NULL;
               source_rec.source_column_value := NULL;
               source_rec.ERROR_CODE := 'SITE_PROFILE_AMT_ERR';
               source_rec.error_message := l_msg_data;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                               (   'Not able to Create Site Profile Amt API '
                                || site_profile_amt_rec.interface_txn_id
                                || 'Error: '
                                || l_log_err_msg
                               );
               END IF;
            ELSE
               --- Write Back details of Account in the Staging Table ---
               UPDATE xxar_customer_prof_amnt_stg
                  SET cust_account_id = pin_cust_account_id,
                      cust_acct_site_use_id = pin_site_use_id,
                      run_sequence_id = g_new_run_seq_id,
                      process_flag = g_converted,
                      ERROR_TYPE = NULL,
                      request_id = g_request_id,
                      last_updated_date = SYSDATE,
                      last_updated_by = g_last_updated_by,
                      last_update_login = g_last_update_login
                WHERE 1 = 1
                  AND interface_txn_id = site_profile_amt_rec.interface_txn_id;
            END IF;
         ELSE
            UPDATE xxar_customer_prof_amnt_stg
               SET cust_account_id = pin_cust_account_id,
                   cust_acct_site_use_id = pin_site_use_id,
                   process_flag = g_converted,
                   run_sequence_id = g_new_run_seq_id,
                   ERROR_TYPE = NULL,
                   request_id = g_request_id,
                   last_updated_date = SYSDATE,
                   last_updated_by = g_last_updated_by,
                   last_update_login = g_last_update_login
             WHERE 1 = 1
               AND interface_txn_id = site_profile_amt_rec.interface_txn_id;

         END IF;
      END LOOP;

      IF g_failed_count > 0
      THEN
         pov_ret_stats := 'E';
      -- Program must complete in Warning if any of Import fails
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         pov_ret_stats := 'E';
         pov_err_msg :=
               'ERROR : XXAR_CUSTOMERS_PKG.IMPORT_PROFILE_AMOUNTS_P->WHEN_OTHERS->'
            || SQLERRM;
   END import_profile_amounts_p;

--
-- =============================================================================
-- Procedure: import_customers_p
-- =============================================================================
-- This private procedure will create Customer Parties
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: MAIN_PROC_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters     :
--
--  Output Parameters    :
--  pov_ret_stats        : Returns Status
--  pov_err_msg          : Returns Error Message
--
--  Return               : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE import_customers_p (
      pov_ret_stats   OUT NOCOPY   VARCHAR2,
      pov_err_msg     OUT NOCOPY   VARCHAR2
   )
   IS
      -- Local Variables Declerations
      l_return_status          VARCHAR2 (10);
      l_msg_count              VARCHAR2 (100)                    DEFAULT NULL;
      l_msg_data               VARCHAR2 (2000)                   DEFAULT NULL;
      l_msg                    VARCHAR2 (1000);
      l_msg_index_out          NUMBER;
      l_data                   VARCHAR2 (2000)                   DEFAULT NULL;
      l_err_msg                VARCHAR2 (1000);
      l_count                  NUMBER                               DEFAULT 0;
      l_status                 xxar_customer_stg.process_flag%TYPE;
      l_idx                    NUMBER                                    := 0;
      l_wf_started             VARCHAR2 (1)                            := 'Y';
      l_log_ret_stats          VARCHAR2 (10);
      l_log_err_msg            VARCHAR2 (2000);
      l_new_party_id           NUMBER;
      l_party_number           VARCHAR2 (2000);
      --l_profile_id           NUMBER;
      l_cust_account_id        NUMBER;
      l_account_number         VARCHAR2 (2000);
      l_profile_id             NUMBER;
      l_tax_count              NUMBER;
      l_party_count            NUMBER;
      -- Customer Records
      l_organization_rec       hz_party_v2pub.organization_rec_type;
      l_person_rec             hz_party_v2pub.person_rec_type;
      l_cust_account_rec       hz_cust_account_v2pub.cust_account_rec_type;
      l_customer_profile_rec   hz_customer_profile_v2pub.customer_profile_rec_type;
      -- Error Table Record Type
      source_rec               xxetn_common_error_pkg.g_source_rec_type;
      l_tax_ref        VARCHAR2(100) := NULL;        --  Added for v1.37
      l_typ_check    VARCHAR2(1) := 'Y';        --  Added for v1.37

      --v1.50
      l_VAT_NUMBER VARCHAR2(100) := NULL;
      l_TAX_PAYER_ID VARCHAR2(100) := NULL;
      l_DUNS_NUMBER VARCHAR2(100) := NULL;
      l_plant_tmp  VARCHAR2(10);
      --v1.50
      --
      -- Cursor to loop through the Party Data
      --
      CURSOR import_customers_cur
      IS
         SELECT interface_txn_id, batch_id, run_sequence_id,
                leg_customer_number, leg_customer_name, leg_customer_type,
                leg_customer_status, leg_orig_sys_cust_ref,
                leg_customer_class_code, leg_cust_tax_code, leg_customer_key,
                leg_tax_exempt_num, leg_jgzz_fiscal_code, leg_tax_reference,
                leg_cust_ship_via, leg_cust_prospect_code,
                leg_cust_name_phonetic, leg_person_flag,
                leg_person_fist_name, leg_person_last_name, leg_duns_number,
                leg_orig_sys_party_ref, leg_source_system, leg_request_id,
                leg_seq_num, leg_process_flag, customer_number,
                cust_account_id, customer_acc_name_r12,
                program_application_id, program_id, program_update_date,
                request_id, process_flag, ERROR_TYPE, ic_customer_flag,
                credit_office, hca_attribute_category, hca_attribute1,
                hca_attribute2, hca_attribute3, hca_attribute4,
                hca_attribute5, hca_attribute6, hca_attribute7,
                hca_attribute8, hca_attribute9, hca_attribute10,
                hca_attribute11, hca_attribute12, hca_attribute13,
                hca_attribute14, hca_attribute15, creation_date, created_by,
                last_updated_date, last_updated_by, last_update_login,
                leg_alternate_name
           FROM xxar_customer_stg xcs
          WHERE xcs.process_flag = g_validated
            AND xcs.batch_id = NVL (g_batch_id, xcs.batch_id)
            AND leg_source_system = NVL (g_leg_src_sys, leg_source_system);
   -- AND leg_operating_unit =   NVL (g_leg_ou, leg_operating_unit) ;
   BEGIN
      pov_ret_stats := 'S';
      pov_err_msg := NULL;
      g_total_count := 0;
      g_failed_count := 0;
      debug_msg_p ('STEP:7.1',
                   'IMPORT_CUSTOMERS_P',
                   'In Begin of Proc: IMPORT_CUSTOMERS_P'
                  );
      g_new_run_seq_id := xxetn_run_sequences_s.NEXTVAL;
      -- Intialize Run Sequence Id Only for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_batch_id;             -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;
                                                            -- run sequence id
      -- Intialize Common variables for Record Type
      source_rec.ERROR_TYPE := g_imp_err_type;
      debug_msg_p ('STEP:7.2',
                   'IMPORT_CUSTOMERS_P',
                   'Run Sequence Id: ' || g_new_run_seq_id
                  );

      --- Open Cursor For Customers
      FOR import_customers_rec IN import_customers_cur
      LOOP
         -- Increment Counter
         g_total_count := g_total_count + 1;
         l_tax_count := 0;
         l_party_count := 0;
         l_new_party_id := NULL;
         l_party_number := NULL;
         l_tax_ref := NULL;    -- Added for v1.37
         l_typ_check := 'Y';     -- Added for v1.37

         IF import_customers_rec.leg_customer_type = 'I' THEN
             IF import_customers_rec.leg_source_system = 'FSC' THEN
                  l_plant_tmp := SUBSTR (import_customers_rec.leg_customer_number, 3, 4);

             ELSIF import_customers_rec.leg_source_system = 'ISSC'  THEN
                  l_plant_tmp := SUBSTR (import_customers_rec.leg_customer_name, 1, 4);
            --Added for V1.74     4595
             ELSIF import_customers_rec.leg_source_system = 'SASC'  THEN
                BEGIN
                  SELECT SUBSTR(leg_gl_id_rec,INSTR(leg_gl_id_rec,'.',1,5)+1,4)
                    INTO l_plant_tmp
                    FROM xxar_customer_site_stg
                   WHERE leg_customer_number = import_customers_rec.leg_customer_number
                     AND leg_site_use_code = 'BILL_TO'
                    -- AND leg_primary_site_use_flag = 'Y' -- Commented for V1.81--
                     AND rownum=1;
                EXCEPTION
                    WHEN OTHERS THEN
                        l_plant_tmp := NULL;
                END;
             END IF;
         END IF;                                                                     --v1.69

         IF NVL(import_customers_rec.leg_customer_type, 'X') <> 'I' THEN             --IF Condition Added for v1.69
            BEGIN
                SELECT party_id, party_number
                  INTO l_new_party_id, l_party_number
                FROM   hz_parties hp
                 WHERE UPPER (hp.party_name) =
                          UPPER (DECODE (import_customers_rec.leg_customer_type,
                                         'I', import_customers_rec.customer_acc_name_r12, --v1.41  Added by Ankur for IC CR
                                         import_customers_rec.leg_customer_name
                                        )
                                )
                   AND hp.party_type = 'ORGANIZATION'
                   AND hp.created_by_module = g_created_by_module
                   AND hp.orig_system_reference =
                             import_customers_rec.leg_orig_sys_party_ref
                          || '-'
                          || import_customers_rec.leg_orig_sys_cust_ref
                        --  || '-MC3'-- v1.53 Added by Ankur on 18th December for Mock 3 Conversion   --V1.74
                   AND ROWNUM = 1;
              EXCEPTION
                 WHEN NO_DATA_FOUND
                 THEN
                    l_new_party_id := NULL;
                    l_party_number := NULL;
            END;
         -- Below changes added for v1.69
         ELSE
            BEGIN
                SELECT party_id, party_number
                  INTO l_new_party_id, l_party_number
                  FROM hz_parties hp
                 WHERE UPPER (hp.party_name) =
                               UPPER (import_customers_rec.customer_acc_name_r12)
                   AND hp.party_type = 'ORGANIZATION'
                   AND hp.created_by_module = g_created_by_module
                   AND ROWNUM = 1;

              EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                   l_new_party_id := NULL;
                   l_party_number := NULL;
            END;
          END IF;
          -- changes end for v1.69

         -- IF (import_customers_rec.leg_customer_type = 'ORGANIZATION')
         IF l_new_party_id IS NULL
         THEN
          IF NVL (import_customers_rec.leg_customer_type, 'X') <> 'I' THEN--v1.41  Added by Ankur for IC CR

            -- Validate is Duplicate Party Exists for a give leg_tax_reference
            IF import_customers_rec.leg_tax_reference IS NOT NULL
                AND LENGTH(import_customers_rec.leg_tax_reference) > 2  --  Added for v1.37
            THEN
               SELECT COUNT (1)
                 INTO l_tax_count
                 FROM hz_parties hp
                WHERE hp.tax_reference =
                                        import_customers_rec.leg_tax_reference;
            END IF;
          ELSE --v1.41  Added by Ankur for IC CR

           l_tax_count := 0; --v1.41  Added by Ankur for IC CR

          END IF;  --v1.41  Added by Ankur for IC CR

            IF l_tax_count = 0
            THEN
               --v1.37 changes : START
               BEGIN
                   SELECT 'Y'
                     INTO l_typ_check
                     FROM fnd_territories
                    WHERE UPPER(TERRITORY_CODE) = import_customers_rec.leg_tax_reference;
                    l_tax_ref := NULL;
               EXCEPTION
                   WHEN NO_DATA_FOUND
                   THEN
                       l_tax_ref := import_customers_rec.leg_tax_reference;

               END;
               --v1.37 changes : END

              IF NVL (import_customers_rec.leg_customer_type, 'X') <> 'I' THEN--v1.41  Added by Ankur for IC CR
               l_organization_rec.organization_name :=
                               UPPER (import_customers_rec.leg_customer_name);

                --v1.50 Added By Ankur for Intercompany CR Tax Details
               l_organization_rec.duns_number_c := import_customers_rec.leg_duns_number;
               l_organization_rec.jgzz_fiscal_code := import_customers_rec.leg_jgzz_fiscal_code;
               l_organization_rec.tax_reference :=  l_tax_ref; -- import_customers_rec.leg_jgzz_fiscal_code; Defect# 5880, V1.74

                debug_msg_p ('STEP:7.3',
                               'IMPORT_CUSTOMERS_P',
                                  'Tax details: DUNS_NUMBER -'
                               || import_customers_rec.leg_duns_number || '-VAT_NUMBER-'||import_customers_rec.leg_jgzz_fiscal_code
                               ||'-TAX_PAYER_ID-'||l_tax_ref
                              );
               --v1.50 Added By Ankur for Intercompany CR Tax Details

              ELSE
               l_organization_rec.organization_name := UPPER(import_customers_rec.customer_acc_name_r12); --v1.41  Added by Ankur for IC CR, Added UPPER for 9134 v1.85

                 --v1.50 Added By Ankur for Intercompany CR Tax Details

                   IF import_customers_rec.leg_source_system = 'FSC' THEN

                      l_plant_tmp := SUBSTR (import_customers_rec.leg_customer_number, 3, 4);

                   ELSIF import_customers_rec.leg_source_system = 'SASC' THEN  -- 5880, V1.74

                    BEGIN
                      SELECT SUBSTR(leg_gl_id_rec,INSTR(leg_gl_id_rec,'.',1,5)+1,4)
                        INTO l_plant_tmp
                        FROM xxar_customer_site_stg
                       WHERE leg_customer_number = import_customers_rec.leg_customer_number
                         AND leg_site_use_code = 'BILL_TO'
                        -- AND leg_primary_site_use_flag = 'Y' -- Commented for v1.81
                         AND rownum=1;
                    EXCEPTION
                        WHEN OTHERS THEN
                            l_plant_tmp := NULL;
                    END;

                   ELSE-- for all other Source Systems

                    l_plant_tmp := SUBSTR (import_customers_rec.leg_customer_name, 1, 4);

                   END IF;

                    BEGIN

                      l_VAT_NUMBER := NULL;
                      l_TAX_PAYER_ID := NULL;
                      l_DUNS_NUMBER := NULL;

                       SELECT VAT_NUMBER, TAX_PAYER_ID, DUNS_NUMBER
                         INTO  l_VAT_NUMBER, l_TAX_PAYER_ID, l_DUNS_NUMBER
                         FROM xxar_cust_plant_site_details
                        WHERE plant_number = l_plant_tmp;
                      EXCEPTION
                       WHEN OTHERS THEN

                      l_VAT_NUMBER := NULL;
                      l_TAX_PAYER_ID := NULL;
                      l_DUNS_NUMBER := NULL;

                      END;

                debug_msg_p ('STEP:7.3',
                               'IMPORT_CUSTOMERS_P',
                                  'Tax details: l_DUNS_NUMBER -'
                               || l_DUNS_NUMBER || '-l_VAT_NUMBER-'||l_VAT_NUMBER ||'-l_TAX_PAYER_ID-'||l_TAX_PAYER_ID
                              );

               l_organization_rec.duns_number_c := l_DUNS_NUMBER;
               l_organization_rec.jgzz_fiscal_code := l_VAT_NUMBER;
               l_organization_rec.tax_reference := l_TAX_PAYER_ID;
                 --v1.50 Added By Ankur for Intercompany CR

              END IF;                 --v1.41  Added by Ankur for IC CR

               l_organization_rec.organization_name_phonetic :=
                                  import_customers_rec.leg_cust_name_phonetic;
               l_organization_rec.created_by_module := g_created_by_module;
--               l_organization_rec.jgzz_fiscal_code :=
--                                    import_customers_rec.leg_jgzz_fiscal_code;
--               l_organization_rec.tax_reference := l_tax_ref; -- Added for v1.37
--                                       --import_customers_rec.leg_tax_reference; --commented for v1.37

               l_organization_rec.party_rec.status :=
                                     import_customers_rec.leg_customer_status;
--               l_organization_rec.duns_number_c :=
--                                         import_customers_rec.leg_duns_number;
               l_organization_rec.known_as :=
                                      import_customers_rec.leg_alternate_name;
               -- ANKUR
               l_organization_rec.party_rec.orig_system_reference :=
                     import_customers_rec.leg_orig_sys_party_ref
                  || '-'
                  || import_customers_rec.leg_orig_sys_cust_ref;
                --  || '-MC3'; -- v1.53 Added by Ankur on 18th December for Mock 3 Conversion    --V1.74

              -- defect# 5880 V1.74
               SELECT lookup_code --meaning
                 INTO l_organization_rec.party_rec.category_code
                    FROM ar_lookups
                WHERE lookup_type = 'CUSTOMER_CATEGORY'
                  AND lookup_code = 'CUSTOMER'
                  AND enabled_flag = 'Y'
                  AND SYSDATE BETWEEN NVL(start_date_active,SYSDATE-1) AND NVL(end_date_active,SYSDATE+1);
                --l_organization_rec.party_rec.category_code := 'Customer';

               -- Create Oraganization API
               hz_party_v2pub.create_organization
                                    (p_init_msg_list         => fnd_api.g_true,
                                     p_organization_rec      => l_organization_rec,
                                     x_return_status         => l_return_status,
                                     x_msg_count             => l_msg_count,
                                     x_msg_data              => l_msg_data,
                                     x_party_id              => l_new_party_id,
                                     x_party_number          => l_party_number,
                                     x_profile_id            => l_profile_id
                                    );

               IF NVL (l_return_status, '-1') <> 'S'
               THEN
                  --- updating the error records
                  UPDATE xxar_customer_stg
                     SET process_flag = 'E',
                         run_sequence_id = g_new_run_seq_id,
                         ERROR_TYPE = g_imp_err_type,
                         request_id = g_request_id,
                         last_updated_date = SYSDATE,
                         last_updated_by = g_last_updated_by,
                         last_update_login = g_last_update_login
                   WHERE 1 = 1
                     AND interface_txn_id =
                                         import_customers_rec.interface_txn_id
                     AND process_flag = g_validated
                     AND batch_id = g_batch_id;

                  --   AND run_sequence_id = g_new_run_seq_id;

                  --- error msg
                  IF l_msg_count > 1
                  THEN
                     FOR i IN 1 .. (l_msg_count - 1)
                     LOOP
                        l_msg :=
                           apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                                 apps.fnd_api.g_false
                                                );
                        l_msg_data := l_msg_data || '-' || l_msg;
                     END LOOP;
                  ELSE
                     l_msg_data :=
                        apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_first,
                                              apps.fnd_api.g_false
                                             );
                  END IF;

                  debug_msg_p ('STEP:7.3',
                               'IMPORT_CUSTOMERS_P',
                                  'Inside API Error for create customers: '
                               || import_customers_rec.interface_txn_id
                               || ': Error - '
                               || l_msg_data
                              );
                  g_failed_count := g_failed_count + 1;
                  l_status := g_error;
                  source_rec.interface_staging_id :=
                                         import_customers_rec.interface_txn_id;
                  source_rec.source_column_name := NULL;
                  source_rec.source_column_value := NULL;
                  source_rec.ERROR_CODE := 'CUST_API_ERROR';
                  source_rec.error_message := l_data;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                          (   'Not able to Create Customer Record Using API '
                           || import_customers_rec.interface_txn_id
                           || 'Error: '
                           || l_log_err_msg
                          );
                  END IF;
               -- Below changes added for Mock3 Defect# 5206, v1.69 on 28-Mar-2016
               ELSIF import_customers_rec.leg_customer_type = 'I' AND import_customers_rec.leg_source_system = 'FSC' THEN

                    UPDATE xxar_customer_stg
                       SET party_id = l_new_party_id,
                           party_number = l_party_number,
                           process_flag = g_converted,
                           ERROR_TYPE = NULL,
                           request_id = g_request_id,
                           run_sequence_id = g_new_run_seq_id,
                           last_updated_date = SYSDATE,
                           last_updated_by = g_last_updated_by,
                           last_update_login = g_last_update_login
                     WHERE 1 = 1
                       --AND interface_txn_id = import_customers_rec.interface_txn_id
                       AND SUBSTR(leg_customer_number, 3, 4) = l_plant_tmp
                       AND leg_customer_type = 'I'
                       AND leg_source_system = 'FSC'
                       AND process_flag = g_validated
                       AND batch_id = g_batch_id;

                    UPDATE xxar_customer_site_stg
                       SET party_id = l_new_party_id,
                           party_number = l_party_number,
                           last_updated_date = SYSDATE,
                           last_updated_by = g_last_updated_by,
                           last_update_login = g_last_update_login
                     WHERE 1 = 1
                       AND SUBSTR(leg_customer_number, 3, 4) = l_plant_tmp
                       AND leg_customer_type = 'I'
                       AND leg_source_system = 'FSC';

              --ELSIF import_customers_rec.leg_customer_type = 'I' AND import_customers_rec.leg_source_system IN ('SASC','ISSC') THEN  Defect#5880, V1.74

               ELSIF import_customers_rec.leg_customer_type = 'I' AND import_customers_rec.leg_source_system ='ISSC' THEN   --Defect#5880, V1.74

                    UPDATE xxar_customer_stg
                       SET party_id = l_new_party_id,
                           party_number = l_party_number,
                           process_flag = g_converted,
                           ERROR_TYPE = NULL,
                           request_id = g_request_id,
                           run_sequence_id = g_new_run_seq_id,
                           last_updated_date = SYSDATE,
                           last_updated_by = g_last_updated_by,
                           last_update_login = g_last_update_login
                     WHERE 1 = 1
                       --AND interface_txn_id = import_customers_rec.interface_txn_id
                       AND SUBSTR(leg_customer_name, 1, 4) = l_plant_tmp
                       AND leg_customer_type = 'I'
                       AND leg_source_system = 'ISSC'
                       AND process_flag = g_validated
                       AND batch_id = g_batch_id;

                    UPDATE xxar_customer_site_stg
                         SET party_id = l_new_party_id,
                             party_number = l_party_number,
                             last_updated_date = SYSDATE,
                             last_updated_by = g_last_updated_by,
                             last_update_login = g_last_update_login
                       WHERE 1 = 1
                         AND SUBSTR(leg_customer_name, 1, 4) = l_plant_tmp
                         AND leg_customer_type = 'I'
                         AND leg_source_system ='ISSC';

                --Added below for Defect#5880, V1.74
                ELSIF import_customers_rec.leg_customer_type = 'I' AND import_customers_rec.leg_source_system = 'SASC' THEN

                    UPDATE xxar_customer_stg
                       SET party_id = l_new_party_id,
                           party_number = l_party_number,
                           process_flag = g_converted,
                           ERROR_TYPE = NULL,
                           request_id = g_request_id,
                           run_sequence_id = g_new_run_seq_id,
                           last_updated_date = SYSDATE,
                           last_updated_by = g_last_updated_by,
                           last_update_login = g_last_update_login
                     WHERE 1 = 1
                       --AND interface_txn_id = import_customers_rec.interface_txn_id
                       --AND SUBSTR(leg_customer_name, 1, 4) = l_plant_tmp
                       AND leg_customer_type = 'I'
                       AND leg_source_system ='SASC'
                       AND leg_orig_sys_cust_ref IN ( SELECT leg_orig_sys_cust_ref
                                                        FROM xxconv.xxar_customer_site_stg
                                                       WHERE leg_customer_number = import_customers_rec.leg_customer_number
                                                         AND leg_site_use_code = 'BILL_TO'
                                                         AND SUBSTR(leg_gl_id_rec,INSTR(leg_gl_id_rec,'.',1,5)+1,4) = l_plant_tmp
                                                      )
                       AND process_flag = g_validated
                       AND batch_id = g_batch_id;

                    UPDATE xxar_customer_site_stg
                         SET party_id = l_new_party_id,
                             party_number = l_party_number,
                             last_updated_date = SYSDATE,
                             last_updated_by = g_last_updated_by,
                             last_update_login = g_last_update_login
                       WHERE 1 = 1
                         --AND SUBSTR(leg_customer_name, 1, 4) = l_plant_tmp
                         AND leg_customer_type = 'I'
                         AND leg_source_system ='SASC'
                         AND leg_orig_sys_cust_ref IN ( SELECT leg_orig_sys_cust_ref
                                                        FROM xxconv.xxar_customer_site_stg
                                                       WHERE leg_customer_number = import_customers_rec.leg_customer_number
                                                         AND leg_site_use_code = 'BILL_TO'
                                                         AND SUBSTR(leg_gl_id_rec,INSTR(leg_gl_id_rec,'.',1,5)+1,4) = l_plant_tmp
                                                      );

               -- Changes End for Mock3 Defect# 5206, v1.69
               ELSE
                  --- Write Back details of Party and Account in the Staging Table ---
                  UPDATE xxar_customer_stg
                     SET party_id = l_new_party_id,
                         party_number = l_party_number,
                         process_flag = g_converted,
                         ERROR_TYPE = NULL,
                         request_id = g_request_id,
                         run_sequence_id = g_new_run_seq_id,
                         last_updated_date = SYSDATE,
                         last_updated_by = g_last_updated_by,
                         last_update_login = g_last_update_login
                   WHERE 1 = 1
                     AND interface_txn_id =
                                         import_customers_rec.interface_txn_id
                     AND process_flag = g_validated
                     AND batch_id = g_batch_id;

                  ---- Update the Party Details in Sites Staging table
                  UPDATE xxar_customer_site_stg
                     SET party_id = l_new_party_id,
                         party_number = l_party_number,
                         last_updated_date = SYSDATE,
                         last_updated_by = g_last_updated_by,
                         last_update_login = g_last_update_login
                   WHERE 1 = 1
                    /* AND leg_orig_sys_party_ref =
                                   import_customers_rec.leg_orig_sys_party_ref
                     AND leg_customer_number =
                                      import_customers_rec.leg_customer_number */ -- Off for Version 1.39
                     AND leg_orig_sys_cust_ref = import_customers_rec.leg_orig_sys_cust_ref -- ON for Version 1.39
                     AND leg_source_system =
                                        import_customers_rec.leg_source_system;
               END IF;
            -- END IF;
            ELSE
               UPDATE xxar_customer_stg
                  SET process_flag = 'E',
                      ERROR_TYPE = g_imp_err_type,
                      run_sequence_id = g_new_run_seq_id,
                      request_id = g_request_id,
                      last_updated_date = SYSDATE,
                      last_updated_by = g_last_updated_by,
                      last_update_login = g_last_update_login
                WHERE 1 = 1
                  AND interface_txn_id = import_customers_rec.interface_txn_id
                  AND process_flag = g_validated
                  AND batch_id = g_batch_id;

               debug_msg_p ('STEP:7.3',
                            'IMPORT_CUSTOMERS_P',
                               'Inside API Error for create customers: '
                            || import_customers_rec.interface_txn_id
                            || ': Error - '
                            || 'Party Already Exists for tax ref'
                           );
               g_failed_count := g_failed_count + 1;
               l_status := g_error;
               source_rec.interface_staging_id :=
                                         import_customers_rec.interface_txn_id;
               source_rec.source_column_name := 'LEG_TAX_REFERENCE';
               source_rec.source_column_value :=
                                     import_customers_rec.LEG_TAX_REFERENCE;
               source_rec.ERROR_CODE := 'CUST_API_ERROR';
               source_rec.error_message := 'Party Already Exists for tax ref';
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                          (   'Not able to Create Customer Record Using API '
                           || import_customers_rec.interface_txn_id
                           || 'Error: '
                           || l_log_err_msg
                          );
               END IF;
            END IF;
         -- Below changes added for Mock3 Defect# 5206, v1.69 on 28-Mar-2016
         ELSIF import_customers_rec.leg_customer_type = 'I' AND import_customers_rec.leg_source_system = 'FSC' THEN

              UPDATE xxar_customer_stg
                 SET party_id = l_new_party_id,
                     party_number = l_party_number,
                     process_flag = g_converted,
                     ERROR_TYPE = NULL,
                     request_id = g_request_id,
                     run_sequence_id = g_new_run_seq_id,
                     last_updated_date = SYSDATE,
                     last_updated_by = g_last_updated_by,
                     last_update_login = g_last_update_login
               WHERE 1 = 1
                 AND SUBSTR(leg_customer_number, 3, 4) = l_plant_tmp
                 AND leg_customer_type = 'I'
                 AND leg_source_system = 'FSC'
                 AND process_flag = g_validated
                 AND batch_id = g_batch_id;

              UPDATE xxar_customer_site_stg
                 SET party_id = l_new_party_id,
                     party_number = l_party_number,
                     last_updated_date = SYSDATE,
                     last_updated_by = g_last_updated_by,
                     last_update_login = g_last_update_login
               WHERE 1 = 1
                 AND SUBSTR(leg_customer_number, 3, 4) = l_plant_tmp
                 AND leg_customer_type = 'I'
                 AND leg_source_system = 'FSC';

         --ELSIF import_customers_rec.leg_customer_type = 'I' AND import_customers_rec.leg_source_system IN ('SASC','ISSC') THEN -- 5880, V1.74

         ELSIF import_customers_rec.leg_customer_type = 'I' AND import_customers_rec.leg_source_system ='ISSC' THEN

              UPDATE xxar_customer_stg
                 SET party_id = l_new_party_id,
                     party_number = l_party_number,
                     process_flag = g_converted,
                     ERROR_TYPE = NULL,
                     request_id = g_request_id,
                     run_sequence_id = g_new_run_seq_id,
                     last_updated_date = SYSDATE,
                     last_updated_by = g_last_updated_by,
                     last_update_login = g_last_update_login
               WHERE 1 = 1
                 AND SUBSTR(leg_customer_name, 1, 4) = l_plant_tmp
                 AND leg_customer_type = 'I'
                 AND leg_source_system ='ISSC'
                 AND process_flag = g_validated
                 AND batch_id = g_batch_id;

              UPDATE xxar_customer_site_stg
                 SET party_id = l_new_party_id,
                     party_number = l_party_number,
                     last_updated_date = SYSDATE,
                     last_updated_by = g_last_updated_by,
                     last_update_login = g_last_update_login
               WHERE 1 = 1
                 AND SUBSTR(leg_customer_name, 1, 4) = l_plant_tmp
                 AND leg_customer_type = 'I'
                 AND leg_source_system ='ISSC';

           ELSIF import_customers_rec.leg_customer_type = 'I' AND import_customers_rec.leg_source_system ='SASC' THEN

              UPDATE xxar_customer_stg
                 SET party_id = l_new_party_id,
                     party_number = l_party_number,
                     process_flag = g_converted,
                     ERROR_TYPE = NULL,
                     request_id = g_request_id,
                     run_sequence_id = g_new_run_seq_id,
                     last_updated_date = SYSDATE,
                     last_updated_by = g_last_updated_by,
                     last_update_login = g_last_update_login
               WHERE 1 = 1
                 --AND SUBSTR(leg_customer_name, 1, 4) = l_plant_tmp
                 AND leg_customer_type = 'I'
                 AND leg_source_system ='SASC'
                 AND leg_orig_sys_cust_ref IN ( SELECT leg_orig_sys_cust_ref
                                                        FROM xxconv.xxar_customer_site_stg
                                                       WHERE leg_customer_number = import_customers_rec.leg_customer_number
                                                         AND leg_site_use_code = 'BILL_TO'
                                                         AND SUBSTR(leg_gl_id_rec,INSTR(leg_gl_id_rec,'.',1,5)+1,4) = l_plant_tmp
                                                      )
                 AND process_flag = g_validated
                 AND batch_id = g_batch_id;

              UPDATE xxar_customer_site_stg
                 SET party_id = l_new_party_id,
                     party_number = l_party_number,
                     last_updated_date = SYSDATE,
                     last_updated_by = g_last_updated_by,
                     last_update_login = g_last_update_login
               WHERE 1 = 1
                 AND SUBSTR(leg_customer_name, 1, 4) = l_plant_tmp
                 AND leg_customer_type = 'I'
                 AND leg_source_system ='SASC'
                 AND leg_orig_sys_cust_ref IN ( SELECT leg_orig_sys_cust_ref
                                                        FROM xxconv.xxar_customer_site_stg
                                                       WHERE leg_customer_number = import_customers_rec.leg_customer_number
                                                         AND leg_site_use_code = 'BILL_TO'
                                                         AND SUBSTR(leg_gl_id_rec,INSTR(leg_gl_id_rec,'.',1,5)+1,4) = l_plant_tmp
                                                      );

         -- Changes End for Mock3 Defect# 5206, v1.69
         ELSE
            UPDATE xxar_customer_stg
               SET party_id = l_new_party_id,
                   party_number = l_party_number,
                   process_flag = g_converted,
                   ERROR_TYPE = NULL,
                   request_id = g_request_id,
                   run_sequence_id = g_new_run_seq_id,
                   last_updated_date = SYSDATE,
                   last_updated_by = g_last_updated_by,
                   last_update_login = g_last_update_login
             WHERE 1 = 1
               AND interface_txn_id = import_customers_rec.interface_txn_id
               AND process_flag = g_validated
               AND batch_id = g_batch_id;

            ---- Update the Party Details in Sites Staging table
            UPDATE xxar_customer_site_stg
               SET party_id = l_new_party_id,
                   party_number = l_party_number,
                   last_updated_date = SYSDATE,
                   last_updated_by = g_last_updated_by,
                   last_update_login = g_last_update_login
             WHERE 1 = 1
--               AND leg_orig_sys_party_ref =
--                                   import_customers_rec.leg_orig_sys_party_ref
               AND leg_customer_number =
                                      import_customers_rec.leg_customer_number
               AND leg_source_system = import_customers_rec.leg_source_system;
         END IF;

         -- Performing Batch Commit if Limit is reached
         IF l_count >= g_limit
         THEN
            l_count := 0;
            debug_msg_p ('STEP:7.4',
                         'IMPORT_CUSTOMERS_P',
                         'Performing Batch Commit'
                        );
            COMMIT;
         ELSE
            l_count := l_count + 1;
         END IF;
      END LOOP;

      -- Insert remaining errors into Error Table
      IF g_source_tab.COUNT > 0
      THEN
         debug_msg_p ('STEP:7.5',
                      'IMPORT_CUSTOMERS_P',
                      'Error Table Type Count: ' || g_source_tab.COUNT
                     );
         debug_msg_p ('STEP:7.6',
                      'IMPORT_CUSTOMERS_P',
                      'Logging Remaining Errors in Error table'
                     );
         g_err_cnt := 1;
         xxetn_common_error_pkg.add_error
                                        (pov_return_status      => l_log_ret_stats,
                                         pov_error_msg          => l_log_err_msg,
                                         pi_source_tab          => g_source_tab
                                        );

         IF l_log_ret_stats <> 'S'
         THEN
            pov_ret_stats := 'E';
            print_log_message_p
               (   'Not able to insert error details in Common Error Table: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;

         -- Flushing PLSQL Table
         g_source_tab.DELETE;
      END IF;

      -- Defect#5880, V1.74, Call procedure to update profile country code
      update_def_rpt_country();

      debug_msg_p ('STEP:7.7',
                   'IMPORT_CUSTOMERS_P',
                   'Performing Commit for API after Loop Ends'
                  );
      COMMIT;
      debug_msg_p ('STEP:7.8',
                   'IMPORT_CUSTOMERS_P',
                   'Processed Records during Import: ' || g_total_count
                  );
      debug_msg_p ('STEP:7.9',
                   'IMPORT_CUSTOMERS_P',
                   'Failed Records during Import: ' || g_failed_count
                  );

      IF g_failed_count > 0
      THEN
         pov_ret_stats := 'E';
      -- Program must complete in Warning if any of Import fails
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         pov_ret_stats := 'E';
         pov_err_msg :=
               'ERROR : XXAR_CUSTOMERS_PKG.IMPORT_CUSTOMERS_P->WHEN_OTHERS->'
            || SQLERRM;
   END import_customers_p;

--
-- =============================================================================
-- Procedure: import_sites_p
-- =============================================================================
-- This private procedure will create Customer Account Sites, Site Use, Party Site
-- and Location
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: MAIN_PROC_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters     :
--
--  Output Parameters    :
--  pov_ret_stats        : Returns Status
--  pov_err_msg          : Returns Error Message
--
--  Return               : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE import_sites_p (
      pov_ret_stats   OUT NOCOPY   VARCHAR2,
      pov_err_msg     OUT NOCOPY   VARCHAR2
   )
   IS
      -- l_return_status  VARCHAR2 (10);
      l_msg                    VARCHAR2 (1000);
      l_location_id            NUMBER;
      l_return_status          VARCHAR2 (2000);
      l_msg_count              NUMBER;
      l_msg_data               VARCHAR2 (2000);
      l_party_site_id          NUMBER;
      l_party_site_number      VARCHAR2 (2000);
      l_count                  NUMBER;
      l_log_ret_stats          VARCHAR2 (10);
      l_log_err_msg            VARCHAR2 (2000);
      l_data                   VARCHAR2 (2000);
      l_status                 VARCHAR2 (10);
      l_cust_acct_site_id      NUMBER;
      l_site_use_id            NUMBER;
      l_cust_account_id        NUMBER;
      l_cust_account_num       VARCHAR2 (50);
      l_statement_cycle_id     NUMBER;
      l_collector_id           NUMBER;
      l_cust_return_status     VARCHAR2 (10);
      l_bill_to_site_use_id    NUMBER;
      l_sold_to_bill_loc       VARCHAR2 (50);   -- v1.77
      --
      -- Record type decleration
      --
      l_location_rec           hz_location_v2pub.location_rec_type;
      l_party_site_rec         hz_party_site_v2pub.party_site_rec_type;
      l_cust_acct_site_rec     hz_cust_account_site_v2pub.cust_acct_site_rec_type;
      l_cust_site_use_rec      hz_cust_account_site_v2pub.cust_site_use_rec_type;
      l_customer_profile_rec   hz_customer_profile_v2pub.customer_profile_rec_type;

	  l_pay_method_rec         hz_payment_method_pub.payment_method_rec_type;    -- Added for v1.84
      l_pay_method_rec_null    hz_payment_method_pub.payment_method_rec_type;    -- Added for v1.84
      -- Error Table Record Type
      source_rec               xxetn_common_error_pkg.g_source_rec_type;
      l_plant_tmp              VARCHAR2 (10); -- V1.41
      l_is_issc_ind            NUMBER;
      l_r12_plant              VARCHAR2 (240); -- V1.56

      l_ship_to_flag           VARCHAR2(2) := 'Y';  --v1.70
      l_bill_to_party_site_id  NUMBER; --v1.76
      l_bill_to_location       VARCHAR2(240);
	  l_receipt_method_id      NUMBER;                -- Added for v1.84
	  l_cust_receipt_method_id NUMBER;                -- Added for v1.84
	  l_cust_rec_met_id        NUMBER;                -- Added for v1.84
	  l_ledger_currency        VARCHAR2(15); 	      -- Added for v1.94
	  
	  l_site_prof_error        NUMBER;                -- Added for v1.95
        --
        -- Cursor to loop through the Sites Data
        --
      -- Ankur
      -- This Change is done for 3PP and Credit Office related Customer Account Site Changes.
      -- Ankur
      CURSOR import_cust_sites_cur
      IS
         SELECT   xcss.*, xmu.organization_id new_org_id,
xcss.hcsu_attribute6 site,
                  xcss.leg_site_use_code site_order_by
                  , xcss.interface_txn_id interface_txn_id_order_by -- Added for v1.79
             FROM xxar_customer_site_stg xcss,
                  (SELECT DISTINCT operating_unit, hou.organization_id,
                                   ar_credit_office
                              FROM xxetn_map_unit xmu, hr_operating_units hou
                             WHERE UPPER (hou.NAME) =
                                                    UPPER (xmu.operating_unit)
                               AND TRUNC (SYSDATE)
                                      BETWEEN NVL (xmu.start_date_active,
                                                   SYSDATE - 1
                                                  )
                                          AND NVL (xmu.end_date_active,
                                                   SYSDATE + 1
                                                  )
                               AND TRUNC (NVL (hou.date_to, SYSDATE)) >=
                                                               TRUNC (SYSDATE)
                               AND xmu.enabled_flag = 'Y'
                               AND ar_credit_office IS NOT NULL) xmu
            WHERE xcss.process_flag = g_validated
              AND xcss.batch_id = NVL (g_batch_id, xcss.batch_id)
              AND party_id IS NOT NULL
              AND leg_source_system = NVL (g_leg_src_sys, leg_source_system)
              AND leg_operating_unit = NVL (g_leg_ou, leg_operating_unit)
              AND leg_source_system = 'FSC'
              --AND UPPER (xcss.leg_country) NOT IN ('MEXICO', 'MX')
              AND (UPPER (xcss.leg_operating_unit) NOT IN
                                           ('OU USD 1775 TCO', 'OU MXN CORP')
                  )
              AND SUBSTR (xcss.leg_location,
                          (INSTR (xcss.leg_location, '-')) + 1
                         ) = xmu.ar_credit_office
         UNION ALL
         SELECT   xcss.*, xcss.org_id new_org_id,
xcss.hcsu_attribute6 site,
                  xcss.leg_site_use_code site_order_by
                  , xcss.interface_txn_id interface_txn_id_order_by -- Added for v1.79
             FROM xxar_customer_site_stg xcss
            WHERE xcss.process_flag = g_validated
              AND xcss.batch_id = NVL (g_batch_id, xcss.batch_id)
              AND party_id IS NOT NULL
              AND leg_source_system = NVL (g_leg_src_sys, leg_source_system)
              AND leg_operating_unit = NVL (g_leg_ou, leg_operating_unit)
              AND NVL(hcs_attribute8, 'X') <> 'A' -- Added for v1.42
              AND leg_source_system IN ('ISSC','SASC')  -- Added as on 29-APR-2015 by Sanket to fix the issue - SASC records were not being picked up for the conversion. Only ISSC records were getting picked up.
         UNION ALL
         SELECT   xcss.*, xcss.org_id new_org_id,
xcss.hcsu_attribute6 site,
                  xcss.leg_site_use_code site_order_by
                  , xcss.interface_txn_id interface_txn_id_order_by -- Added for v1.79
             FROM xxar_customer_site_stg xcss
            WHERE xcss.process_flag = g_validated
              AND xcss.batch_id = NVL (g_batch_id, xcss.batch_id)
              AND party_id IS NOT NULL
              AND leg_source_system = NVL (g_leg_src_sys, leg_source_system)
              AND leg_operating_unit = NVL (g_leg_ou, leg_operating_unit)
              AND leg_source_system = 'FSC'
              -- AND UPPER (xcss.leg_country) IN ('MEXICO', 'MX')
              AND (UPPER (xcss.leg_operating_unit) IN
                                           ('OU USD 1775 TCO', 'OU MXN CORP')
                  )
         -- Added for v1.42 : START
         UNION ALL
         SELECT xcss.*, xmu.organization_id new_org_id  ,xmu.site,
           xcss.leg_site_use_code site_order_by
                  , xcss.interface_txn_id interface_txn_id_order_by -- Added for v1.79
     FROM xxar_customer_site_stg xcss,
         (SELECT DISTINCT operating_unit, hou.organization_id, xmu.site
           FROM xxetn_map_unit xmu, hr_operating_units hou
          WHERE UPPER (hou.NAME) = UPPER (xmu.operating_unit)
            AND (hou.NAME) IN (
                   SELECT description
                     FROM fnd_lookup_values
                    WHERE lookup_type = 'XXAR_CUST_CNV_BR_OU_MAP'-- Added lookup for v1.56
                      AND enabled_flag = 'Y'
                      AND meaning IN ('4685', '4470')
                      AND TRUNC (SYSDATE) BETWEEN NVL (start_date_active,
                                                       SYSDATE - 1
                                                      )
                                              AND NVL (end_date_active,
                                                       SYSDATE + 1
                                                      )
                      AND LANGUAGE = USERENV ('LANG'))
            AND TRUNC (SYSDATE) BETWEEN NVL (xmu.start_date_active,
                                             SYSDATE - 1
                                            )
                                    AND NVL (xmu.end_date_active, SYSDATE + 1)
            AND TRUNC (NVL (hou.date_to, SYSDATE)) >= TRUNC (SYSDATE)
            AND xmu.enabled_flag = 'Y'
            AND xmu.site IN ('4685', '4470')
          ) xmu
      WHERE xcss.process_flag = g_validated
        AND xcss.batch_id = NVL (g_batch_id, xcss.batch_id)
        AND party_id IS NOT NULL
        AND leg_source_system = NVL (g_leg_src_sys, leg_source_system)
        AND leg_operating_unit = NVL (g_leg_ou, leg_operating_unit)
        AND leg_source_system = 'SASC'
            AND xcss.hcs_attribute8 = 'A'
          -- Added for v1.42 : END
         ORDER BY site_order_by ASC
                  ,interface_txn_id_order_by; -- Added for v1.79

/*         SELECT *
           FROM xxar_customer_site_stg xcss
          WHERE xcss.process_flag = g_validated
            AND xcss.batch_id = NVL (g_batch_id, xcss.batch_id)
            AND party_id IS NOT NULL
            AND leg_source_system = NVL (g_leg_src_sys, leg_source_system)
            AND leg_operating_unit = NVL (g_leg_ou, leg_operating_unit)
            Order by leg_site_use_code asc;
            */

      --
      -- Cusor to pick up sites not imported
      --
      CURSOR error_cust_sites_cur
      IS
         SELECT *
           FROM xxar_customer_site_stg xcss
          WHERE xcss.process_flag = g_validated
            AND xcss.batch_id = NVL (g_batch_id, xcss.batch_id)
            AND party_id IS NULL                        -- Where party is null
            AND leg_source_system = NVL (g_leg_src_sys, leg_source_system)
            AND leg_operating_unit = NVL (g_leg_ou, leg_operating_unit)
            AND 1 = 2;                                         -- Not Required

--- Cursor to fetch Site Profile Data --
      CURSOR site_profile_cur (
         pin_leg_site_use_id       NUMBER,
         piv_leg_customer_number   VARCHAR2,
         piv_source_system         VARCHAR2
      )
      IS
         SELECT leg_collector_name, leg_credit_checking, leg_tolerance,
                leg_discount_term, leg_dunning_letters, leg_interest_charges,
                leg_credit_bal_stmt, leg_credit_hold, leg_credit_rating,
                leg_risk_code, leg_override_term, leg_dunning_letter_set_name,
                leg_interest_period_days, leg_payment_grace_days,
                leg_discount_grace_days, leg_stmt_cycle_name,

                --credit_balance_statements,
                leg_account_status, leg_percent_collectible,
                leg_tax_printing_option, leg_charge_on_fin_flag,
                leg_clearing_days, leg_cons_inv_flag, leg_cons_inv_type,
                leg_lockbox_matching_option, leg_credit_classification,
                -- NVL(leg_currency_code,'USD') leg_currency_code -- 5880, V1.74 commented for v1.94
			   leg_currency_code --added for v1.94
           FROM xxar_customer_prof_amnt_stg xcss
          WHERE xcss.leg_site_use_id = pin_leg_site_use_id
            AND xcss.leg_customer_number = piv_leg_customer_number
            AND xcss.leg_source_system = piv_source_system
            AND NVL (xcss.process_flag, 'X') IN ('C', 'V') --<> ('C'); -- modified for v1.34
            AND ROWNUM = 1;
--- Putting Rownum = 1 because profile table can have multiple records because of
--- Profile amounts, Bur we need to create only one profile
--- Profile amounts will be created in a seperate loop

      -- Below Cursor added for Mock3 Defect# 4181 to create DRAWEE and LEGAL Site uses v1.71
      CURSOR cust_sites_cur
      IS
       SELECT interface_txn_id,leg_location,org_id,cust_account_id,customer_number,hcsu_attribute6,
              leg_customer_number,leg_site_use_code,leg_site_use_id,leg_source_system,process_flag,cust_acct_site_use_id,cust_acct_site_id,error_type
         FROM xxar_customer_site_stg xcss
        WHERE xcss.batch_id = NVL (g_batch_id, xcss.batch_id)
          AND xcss.leg_site_use_code = 'BILL_TO'
          AND xcss.leg_source_system = 'ISSC'
          AND xcss.leg_process_flag <> 'C' --  added for 1.80
          AND xcss.process_flag IN ('C', 'E')
          AND xcss.cust_acct_site_use_id IS NOT NULL
          AND xcss.cust_acct_site_id IS NOT NULL
          AND xcss.hcsu_attribute6 IS NOT NULL
          AND EXISTS (SELECT 1
                        FROM ar_lookups al
                       WHERE xcss.hcsu_attribute6 = al.externally_visible_flag
                         AND al.lookup_type = 'XXAR_PLANT_SITE_USE_CODE'
                         AND al.enabled_flag = 'Y'
                         AND TRUNC(SYSDATE) BETWEEN TRUNC(al.start_date_active) AND TRUNC(NVL(al.end_date_active, TRUNC(SYSDATE))));


       l_term_id NUMBER := NULL; -- Added v1.27
       l_leg_format    VARCHAR2(1) := NULL; -- Added v1.42
       l_ou_name    VARCHAR2(240) := NULL;    -- Added v1.42

       l_cnt1       NUMBER := 0; --v1.71
   BEGIN
      pov_ret_stats := 'S';
      pov_err_msg := NULL;
      g_total_count := 0;
      g_failed_count := 0;
      l_count := 0;
	  
      debug_msg_p ('STEP:7.1',
                   'IMPORT_SITES_P',
                   'In Begin of Proc: IMPORT_SITES_P'
                  );
      g_new_run_seq_id := xxetn_run_sequences_s.NEXTVAL;
      -- Intialize Run Sequence Id Only for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_batch_id;             -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;
                                                            -- run sequence id
      -- Intialize Common variables for Record Type
      source_rec.ERROR_TYPE := g_imp_err_type;
      debug_msg_p ('STEP:7.2',
                   'IMPORT_SITES_P',
                   'Run Sequence Id: ' || g_new_run_seq_id
                  );

      --- Open Cursor For Customers
      fnd_file.put_line (fnd_file.LOG,'before loop start');
      FOR import_cust_sites_rec IN import_cust_sites_cur
      LOOP
         -- Reset Local Variables
         l_location_id := NULL;
         l_cust_account_id := NULL;
         l_cust_account_num := NULL;
         l_party_site_id := NULL;
         l_party_site_number := NULL;
         l_site_use_id := NULL;
         l_cust_acct_site_id := NULL;
         l_ship_to_flag := 'Y';          --v1.70
		 l_ledger_currency := NULL;      --v1.94

         -- Check if the Location Already Exists
         BEGIN
            debug_msg_p ('STEP:7.3',
                         'IMPORT_SITES_P',
                            'Check if location exists  '
                         || import_cust_sites_rec.interface_txn_id
                        );

            -- Fetch Location id from the HZ tables

            --    Start Added V1.36
            --  Address elements are not deriving the existing address from HZ_LOCATION table. So removed those and kept orig system reference check only.
            fnd_file.put_line (fnd_file.LOG, 'interface_txn_id=' || import_cust_sites_rec.interface_txn_id);
            fnd_file.put_line (fnd_file.LOG, '...leg_orig_sys_add_ref=' || import_cust_sites_rec.leg_orig_sys_add_ref || ', PartyID=' || import_cust_sites_rec.party_id);
            SELECT location_id
              INTO l_location_id
              FROM hz_locations hl
             WHERE 1=1
               AND orig_system_reference = import_cust_sites_rec.leg_orig_sys_add_ref
               AND EXISTS (
                      SELECT 1
                        FROM hz_party_sites hps
                       WHERE hps.party_id = import_cust_sites_rec.party_id
                         AND hps.location_id = hl.location_id)
               AND ROWNUM = 1;
               fnd_file.put_line (fnd_file.LOG,'LocationID Found- ' || l_location_id);
            --    End V1.36

            -- Off  below query in V1.36
            /*
            SELECT location_id
              INTO l_location_id
              FROM hz_locations hl
             WHERE UPPER (address1) =
                                    UPPER (import_cust_sites_rec.leg_address1)
               AND NVL (address2, 'Y') =
                                 NVL (import_cust_sites_rec.leg_address2, 'Y')
               AND NVL (address3, 'Y') =
                                 NVL (import_cust_sites_rec.leg_address3, 'Y')
               AND NVL (address4, 'Y') =
                                 NVL (import_cust_sites_rec.leg_address4, 'Y')
               AND NVL (city, 'Y') = NVL (import_cust_sites_rec.leg_city, 'Y')
               AND NVL (state, 'Y') =
                                    NVL (import_cust_sites_rec.leg_state, 'Y')
               AND NVL (province, 'Y') =                                                    --    Added V1.19
                                    NVL (import_cust_sites_rec.leg_province, 'Y')            --    Added V1.19
               AND NVL (postal_code, 'Y') =
                              NVL (import_cust_sites_rec.leg_postal_code, 'Y')
               AND country = import_cust_sites_rec.leg_country
               AND NVL (county, 'Y') =
                                   NVL (import_cust_sites_rec.leg_county, 'Y')
               AND orig_system_reference = import_cust_sites_rec.leg_orig_sys_add_ref        -- Added V1.25
               AND EXISTS (
                      SELECT 1
                        FROM hz_party_sites hps
                       WHERE hps.party_id = import_cust_sites_rec.party_id
                         AND hps.location_id = hl.location_id)
               AND ROWNUM = 1;
               */ -- Off this portion in V1.36
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               l_location_id := NULL;
               fnd_file.put_line (fnd_file.LOG,'location NO_DATA_FOUND');
            WHEN OTHERS
            THEN
               fnd_file.put_line (fnd_file.LOG,'location others');
               pov_ret_stats := g_error;
               pov_err_msg :=
                     'SQL Error occured while fetching Location: ' || SQLERRM;
         END;

         IF l_location_id IS NULL
         THEN
            debug_msg_p ('STEP:7.4',
                         'IMPORT_SITES_P',
                            'Create new Location '
                         || import_cust_sites_rec.leg_address1
                        );
           -- Start Changed by Ankur for Version 1.41 IC Customer CR
            IF NVL(import_cust_sites_rec.leg_customer_type, 'X') = 'I'
            THEN

             IF import_cust_sites_rec.leg_source_system = 'FSC'
              THEN
              l_plant_tmp := SUBSTR (import_cust_sites_rec.leg_customer_number, 3, 4);
              ELSE
              l_plant_tmp := SUBSTR (import_cust_sites_rec.leg_customer_name, 1, 4);
             END IF;

                BEGIN
                   SELECT address1, address2,
                          address3, address4,
                          city, state,
                          postal_code, province,
                          county, country_name
                     INTO l_location_rec.address1, l_location_rec.address2,
                          l_location_rec.address3, l_location_rec.address4,
                          l_location_rec.city, l_location_rec.state,
                          l_location_rec.postal_code, l_location_rec.province,
                          l_location_rec.county,                           l_location_rec.country
                     FROM xxar_cust_plant_site_details
                    WHERE plant_number = l_plant_tmp;
                EXCEPTION
                 WHEN OTHERS THEN
                    l_location_rec.country := import_cust_sites_rec.leg_country;
                    l_location_rec.county := import_cust_sites_rec.leg_county;
                    l_location_rec.address1 := import_cust_sites_rec.leg_address1;
                    l_location_rec.address2 := import_cust_sites_rec.leg_address2;
                    l_location_rec.address3 := import_cust_sites_rec.leg_address3;
                    l_location_rec.address4 := import_cust_sites_rec.leg_address4;
                    l_location_rec.city := import_cust_sites_rec.leg_city;
                    l_location_rec.state := import_cust_sites_rec.leg_state;
                    l_location_rec.postal_code :=
                                                 import_cust_sites_rec.leg_postal_code;
                    l_location_rec.province := import_cust_sites_rec.leg_province;
                END;

            ELSE

            l_location_rec.country := import_cust_sites_rec.leg_country;
            l_location_rec.county := import_cust_sites_rec.leg_county;
            l_location_rec.address1 := import_cust_sites_rec.leg_address1;
            l_location_rec.address2 := import_cust_sites_rec.leg_address2;
            l_location_rec.address3 := import_cust_sites_rec.leg_address3;
            l_location_rec.address4 := import_cust_sites_rec.leg_address4;
            l_location_rec.city := import_cust_sites_rec.leg_city;
            l_location_rec.state := import_cust_sites_rec.leg_state;
            l_location_rec.postal_code :=
                                         import_cust_sites_rec.leg_postal_code;
            l_location_rec.province := import_cust_sites_rec.leg_province;

            END IF;
          -- Start Changed by Ankur for Version 1.41 IC Customer CR

            l_location_rec.created_by_module := g_created_by_module;
            -- Commented by Ankur for DFF rationalisation
            /*
            l_location_rec.attribute_category :=
                                   import_cust_sites_rec.hl_attribute_category;
            l_location_rec.attribute1 := import_cust_sites_rec.hl_attribute1;
            l_location_rec.attribute2 := import_cust_sites_rec.hl_attribute2;
            l_location_rec.attribute3 := import_cust_sites_rec.hl_attribute3;
            l_location_rec.attribute4 := import_cust_sites_rec.hl_attribute4;
            l_location_rec.attribute5 := import_cust_sites_rec.hl_attribute5;
            l_location_rec.attribute6 := import_cust_sites_rec.hl_attribute6;
            l_location_rec.attribute7 := import_cust_sites_rec.hl_attribute7;
            l_location_rec.attribute8 := import_cust_sites_rec.hl_attribute8;
            l_location_rec.attribute9 := import_cust_sites_rec.hl_attribute9;
            l_location_rec.attribute10 := import_cust_sites_rec.hl_attribute10;
            l_location_rec.attribute11 := import_cust_sites_rec.hl_attribute11;
            l_location_rec.attribute12 := import_cust_sites_rec.hl_attribute12;
            l_location_rec.attribute13 := import_cust_sites_rec.hl_attribute13;
            l_location_rec.attribute14 := import_cust_sites_rec.hl_attribute14;
            l_location_rec.attribute15 := import_cust_sites_rec.hl_attribute15;*/
            l_location_rec.orig_system_reference :=
                                    import_cust_sites_rec.leg_orig_sys_add_ref;
			--v1.85, Defect#9134
			l_location_rec.country  := UPPER(l_location_rec.country);
            l_location_rec.county   := UPPER(l_location_rec.county);
            l_location_rec.address1 := UPPER(l_location_rec.address1);
            l_location_rec.address2 := UPPER(l_location_rec.address2);
            l_location_rec.address3 := UPPER(l_location_rec.address3);
            l_location_rec.address4 := UPPER(l_location_rec.address4);
            l_location_rec.city     := UPPER(l_location_rec.city);
            l_location_rec.state    := UPPER(l_location_rec.state);
            l_location_rec.province := UPPER(l_location_rec.province);
			
            --- API Call --
            fnd_file.put_line (fnd_file.LOG,'location ID NULL, creating location');
            hz_location_v2pub.create_location
                                          (p_init_msg_list      => fnd_api.g_true,
                                           p_location_rec       => l_location_rec,
                                           x_location_id        => l_location_id,
                                           x_return_status      => l_return_status,
                                           x_msg_count          => l_msg_count,
                                           x_msg_data           => l_msg_data
                                          );
            --commit;        --    here
            IF NVL (l_return_status, '-1') <> 'S'
            THEN
               --- updating the error records
                --               UPDATE xxar_customer_site_stg
                --                  SET process_flag = 'E',
                --                      ERROR_TYPE = g_imp_err_type,
                --                      request_id = g_request_id,
                --                      last_updated_date = SYSDATE,
                --                      last_updated_by = g_last_updated_by,
                --                      last_update_login = g_last_update_login
                --                WHERE 1 = 1
                --                  AND interface_txn_id =
                --                                        import_cust_sites_rec.interface_txn_id
                --                  AND batch_id = g_batch_id;
               import_cust_sites_rec.process_flag := 'E';
               import_cust_sites_rec.ERROR_TYPE := g_imp_err_type;
               fnd_file.put_line (fnd_file.LOG,' location l_return_status: '|| l_return_status);

               --   AND run_sequence_id = g_new_run_seq_id;

               --- error msg
               IF l_msg_count > 1
               THEN
                  FOR i IN 1 .. (l_msg_count - 1)
                  LOOP
                     l_msg :=
                        apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                              apps.fnd_api.g_false
                                             );
                     l_msg_data := l_msg_data || '-' || l_msg;
                  END LOOP;
               ELSE
                  l_msg_data :=
                     apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_first,
                                           apps.fnd_api.g_false
                                          );
               END IF;

               debug_msg_p ('STEP:7.5',
                            'IMPORT_SITES_P',
                               'Inside API Error for create customers: '
                            || import_cust_sites_rec.interface_txn_id
                            || ' Error-'
                            || l_msg_data
                           );
               g_failed_count := g_failed_count + 1;
               l_status := g_error;
               source_rec.interface_staging_id :=
                                        import_cust_sites_rec.interface_txn_id;
               source_rec.source_column_name := NULL;
               source_rec.source_column_value := NULL;
               source_rec.ERROR_CODE := 'LOCATION_API_ERROR';
               source_rec.error_message := l_msg_data;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                          (   'Not able to Create Customer Record Using API '
                           || import_cust_sites_rec.interface_txn_id
                           || 'Error: '
                           || l_log_err_msg
                          );
               END IF;
            ELSE
               ---- Update the Location Details in Sites Staging table
                --               UPDATE xxar_customer_site_stg
                --                  SET location_id = l_location_id,
                --                      process_flag = g_converted,
                --                      ERROR_TYPE = NULL,
                --                      last_updated_date = SYSDATE,
                --                      last_updated_by = g_last_updated_by,
                --                      last_update_login = g_last_update_login
                --                WHERE 1 = 1
                --                  AND interface_txn_id =
                --                                        import_cust_sites_rec.interface_txn_id
                --                  AND batch_id = g_batch_id;
               import_cust_sites_rec.process_flag := g_converted;
               import_cust_sites_rec.ERROR_TYPE := NULL;
               import_cust_sites_rec.location_id := l_location_id;
               fnd_file.put_line (fnd_file.LOG,'location created successfully,l_location_id: '||l_location_id);
            END IF;
         ELSE
            debug_msg_p ('STEP:7.6',
                         'IMPORT_SITES_P',
                         'Location exists : ' || l_location_id
                        );
            --            UPDATE xxar_customer_site_stg
            --               SET location_id = l_location_id,
            --                   process_flag = g_converted,
            --                   ERROR_TYPE = NULL,
            --                   last_updated_date = SYSDATE,
            --                   last_updated_by = g_last_updated_by,
            --                   last_update_login = g_last_update_login
            --             WHERE 1 = 1
            --               AND interface_txn_id = import_cust_sites_rec.interface_txn_id
            --               AND batch_id = g_batch_id;
            import_cust_sites_rec.process_flag := g_converted;
            import_cust_sites_rec.ERROR_TYPE := NULL;
            import_cust_sites_rec.location_id := l_location_id;
            fnd_file.put_line (fnd_file.LOG,'location id is NOT NULL, location ID: '||l_location_id);
         END IF;

         -- Create Customer Account Site
         -- Check if the Customer Account exists or not, if the Account does not exist create a new Account
         BEGIN
            debug_msg_p ('STEP:7.7',
                         'IMPORT_SITES_P',
                            'Checking Customer account exists: '
                         || import_cust_sites_rec.interface_txn_id
                         || ' Name '
                         || import_cust_sites_rec.customer_acc_name_r12
                         || ' PartyID '
                         || import_cust_sites_rec.party_id
                        );

            --            SELECT cust_account_id, account_number
            --              INTO l_cust_account_id, l_cust_account_num
            --              FROM hz_cust_accounts
            --             WHERE party_id = import_cust_sites_rec.party_id
            --               AND UPPER (account_name) =
            --                           UPPER (import_cust_sites_rec.customer_acc_name_r12);
            SELECT cust_account_id, account_number
              INTO l_cust_account_id, l_cust_account_num
              FROM hz_cust_accounts
             WHERE party_id = import_cust_sites_rec.party_id
               AND account_name = import_cust_sites_rec.customer_acc_name_r12
--               AND orig_system_reference =
--                                    import_cust_sites_rec.leg_bill_to_orig_ref
               AND ROWNUM = 1;

            fnd_file.put_line (fnd_file.LOG,'l_cust_account_id: '||l_cust_account_id ||' l_cust_account_num: '||l_cust_account_num);
            debug_msg_p ('STEP:7.8',
                         'IMPORT_SITES_P',
                         'Customer account exists: ' || l_cust_account_id
                        );
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               l_cust_account_id := NULL;
               l_cust_account_num := NULL;
               fnd_file.put_line (fnd_file.LOG,' NO_DATA_FOUND l_cust_account_id');
            WHEN OTHERS
            THEN
               fnd_file.put_line (fnd_file.LOG,' OTHERS l_cust_account_id');
               pov_ret_stats := g_error;
               pov_err_msg :=
                      'SQL Error occured while fetching Account: ' || SQLERRM;
         END;

         IF l_cust_account_id IS NULL
         THEN
            l_cust_return_status := NULL;
            -- Call API to create Customer Account and then update the details in the Staging table.
            fnd_file.put_line (fnd_file.LOG,'l_cust_account_id IS NULL, creating it');
            debug_msg_p ('STEP:7.9',
                         'IMPORT_SITES_P',
                         'Create a Customer account '
                        );
            import_cust_accounts_p
               (pov_ret_stats                => pov_ret_stats,
                pov_err_msg                  => pov_err_msg,
                pon_cust_account_id          => l_cust_account_id,
                pov_account_number           => l_cust_account_num,
                pov_return_status            => l_cust_return_status,
                piv_cust_name                => import_cust_sites_rec.customer_acc_name_r12,
                piv_orig_sys_cust_ref        => import_cust_sites_rec.leg_orig_sys_cust_ref, --import_cust_sites_rec.leg_bill_to_orig_ref,
                piv_leg_cust_number          => import_cust_sites_rec.leg_customer_number,
                piv_customer_type            => import_cust_sites_rec.leg_customer_type,
                piv_customer_class_code      => import_cust_sites_rec.leg_customer_class_code,
                pin_party_id                 => import_cust_sites_rec.party_id,
                piv_party_number             => import_cust_sites_rec.party_number,
                pin_interface_txn_id         => import_cust_sites_rec.interface_txn_id,
                piv_leg_customer_num         => import_cust_sites_rec.leg_customer_number
               );

            IF NVL (l_cust_return_status, -1) <> 'S'
            THEN
               debug_msg_p ('STEP:7.9',
                            'IMPORT_SITES_P',
                            'Create a Customer account Error'
                           );
               import_cust_sites_rec.process_flag := 'E';
               import_cust_sites_rec.ERROR_TYPE := g_imp_err_type;
               fnd_file.put_line (fnd_file.LOG,'import_cust_accounts_p failed, l_cust_return_status: '||l_cust_return_status);
            END IF;
         END IF;

         debug_msg_p ('STEP:7.10', 'IMPORT_SITES_P',
                      'Check Party Site Exists');
         -- V1.25 Below portion comment out
         /*
         -- Check if Site already exists for the Account, for the location and Site use
         BEGIN
            SELECT hps.party_site_id,
                   hps.party_site_number
              INTO import_cust_sites_rec.party_site_id,
                   import_cust_sites_rec.party_site_number
              FROM hz_party_sites hps
             WHERE hps.party_id = import_cust_sites_rec.party_id
               AND hps.location_id = l_location_id
               AND ROWNUM = 1;

            fnd_file.put_line (fnd_file.output,'import_cust_sites_rec.party_site_id: '||import_cust_sites_rec.party_site_id ||
                                                'import_cust_sites_rec.party_site_number: '||import_cust_sites_rec.party_site_number);

            SELECT hcas.cust_acct_site_id,
                   hcsu.site_use_id
              INTO import_cust_sites_rec.cust_acct_site_id,
                   import_cust_sites_rec.cust_acct_site_use_id
              FROM hz_cust_acct_sites_all hcas, hz_cust_site_uses_all hcsu
             WHERE hcas.cust_account_id = l_cust_account_id
               --AND hcas.org_id = import_cust_sites_rec.org_id
               AND hcas.org_id = import_cust_sites_rec.new_org_id
               --AND hcas.cust_acct_site_id = hcas.cust_acct_site_id -- commented as on 26-May-2015
               AND hcas.cust_acct_site_id = hcsu.cust_acct_site_id -- Modified as on 26-May-2015 from hcas.cust_acct_site_id to hcsu.cust_acct_site_id
               AND hcsu.site_use_code =
                                       import_cust_sites_rec.leg_site_use_code
               AND hcas.party_site_id = import_cust_sites_rec.party_site_id
               AND ROWNUM = 1;
           fnd_file.put_line (fnd_file.output,'import_cust_sites_rec.cust_acct_site_id: '|| import_cust_sites_rec.cust_acct_site_id ||
                                                'import_cust_sites_rec.cust_acct_site_use_id: '|| import_cust_sites_rec.cust_acct_site_use_id);
            debug_msg_p ('STEP:7.10.1', 'IMPORT_SITES_P', 'Party Site exists');
         EXCEPTION
            WHEN OTHERS
            THEN
               fnd_file.put_line (fnd_file.output,'when others for selects: '||SQLERRM);
               debug_msg_p ('STEP:7.10.1',
                            'IMPORT_SITES_P',
                            'Party Site does not exists'
                           );
         END;
         */

         -- Start V1.25
         -- Check if PARTY_SITE already Exists
         BEGIN
            SELECT hps.party_site_id,
                   hps.party_site_number
              INTO import_cust_sites_rec.party_site_id,
                   import_cust_sites_rec.party_site_number
              FROM hz_party_sites hps
             WHERE hps.party_id = import_cust_sites_rec.party_id
               AND hps.location_id = l_location_id
               AND NVL(hps.orig_system_reference, 'ZZ') = NVL(import_cust_sites_rec.leg_orig_sys_party_site_ref    , 'ZZ')    -- this line is added in V1.5
               AND status = 'A' ;    -- this line is added in V1.5
               --AND ROWNUM = 1;    -- this line comment out
               debug_msg_p ('STEP:7.10.1', 'IMPORT_SITES_P', 'Party Site exists');
         EXCEPTION
            WHEN OTHERS
            THEN
                import_cust_sites_rec.party_site_id        := NULL;
                import_cust_sites_rec.party_site_number    := NULL;
               fnd_file.put_line (fnd_file.LOG,'when others for selects: '||SQLERRM);
               debug_msg_p ('STEP:7.10.1',
                            'IMPORT_SITES_P',
                            'Party Site does not exists'
                           );
         END;
         fnd_file.put_line (fnd_file.LOG,'import_cust_sites_rec.party_site_id: '||import_cust_sites_rec.party_site_id ||
                                            'import_cust_sites_rec.party_site_number: '||import_cust_sites_rec.party_site_number);
         -- End V1.25

         -- Start V1.25
         -- Check if CUST_ACCT_SITE_ID already Exists (previously derived PARTY_SITE_ID)
         IF import_cust_sites_rec.party_site_id IS NOT NULL THEN
             BEGIN
                SELECT hcas.cust_acct_site_id
                  INTO import_cust_sites_rec.cust_acct_site_id
                  FROM hz_cust_acct_sites_all hcas
                 WHERE hcas.cust_account_id = l_cust_account_id
                   AND hcas.org_id            = import_cust_sites_rec.new_org_id
                   AND hcas.party_site_id    = import_cust_sites_rec.party_site_id ;
                   debug_msg_p ('STEP:7.10.1', 'IMPORT_SITES_P', 'CUST ACCT SITE exists');
             EXCEPTION
               WHEN OTHERS
                THEN
                   fnd_file.put_line (fnd_file.LOG,'when others for selects: '||SQLERRM);
                   debug_msg_p ('STEP:7.10.1',
                                'IMPORT_SITES_P',
                                'CUST ACCT SITE does not exists'
                               );
             END;
         END IF;
         fnd_file.put_line (fnd_file.LOG,'import_cust_sites_rec.cust_acct_site_id: '|| import_cust_sites_rec.cust_acct_site_id);
         -- End V1.25

         -- If the Location is successfully created only Then Proceed to Site Creation
         IF l_location_id IS NOT NULL
         THEN
            IF import_cust_sites_rec.party_site_id IS NULL
            THEN
               --   IF l_party_site_id is null then
               debug_msg_p ('STEP:7.10',
                            'IMPORT_SITES_P',
                            'Create Party Site'
                           );
               fnd_file.put_line (fnd_file.LOG,'IF import_cust_sites_rec.party_site_id IS NULL');

               -- v1.41 Changed by Ankur for IC CR
               IF NVL(import_cust_sites_rec.leg_customer_type, 'X') = 'I' THEN
               l_party_site_rec.party_site_name := import_cust_sites_rec.leg_customer_name;
               ELSE
               l_party_site_rec.party_site_name := import_cust_sites_rec.leg_customer_name; -- Changed by Ankur for V1.43 --
               END IF;
               -- v1.41 Changed by Ankur for IC CR

               l_party_site_rec.party_id := import_cust_sites_rec.party_id;
               l_party_site_rec.location_id := l_location_id;
               l_party_site_rec.identifying_address_flag := 'Y';
               l_party_site_rec.created_by_module := g_created_by_module;
               --l_party_site_rec.duns_number_c := import_cust_sites_rec.leg_duns_number; --commented for cr 2085 - DnB into Cust Site Attribute2, v1.23
               -- Commented by Ankur for DFF rationalisation
                  /*l_party_site_rec.attribute_category :=
                                     import_cust_sites_rec.hcp_attribute_category;
                  l_party_site_rec.attribute1 :=
                                             import_cust_sites_rec.hcp_attribute1;
                  l_party_site_rec.attribute2 :=
                                             import_cust_sites_rec.hcp_attribute2;
                  l_party_site_rec.attribute3 :=
                                             import_cust_sites_rec.hcp_attribute3;
                  l_party_site_rec.attribute4 :=
                                             import_cust_sites_rec.hcp_attribute4;
                  l_party_site_rec.attribute5 :=
                                             import_cust_sites_rec.hcp_attribute5;
                  l_party_site_rec.attribute6 :=
                                             import_cust_sites_rec.hcp_attribute6;
                  l_party_site_rec.attribute7 :=
                                             import_cust_sites_rec.hcp_attribute7;
                  l_party_site_rec.attribute8 :=
                                             import_cust_sites_rec.hcp_attribute8;
                  l_party_site_rec.attribute9 :=
                                             import_cust_sites_rec.hcp_attribute9;
                  l_party_site_rec.attribute10 :=
                                            import_cust_sites_rec.hcp_attribute10;
                  l_party_site_rec.attribute11 :=
                                            import_cust_sites_rec.hcp_attribute11;
                  l_party_site_rec.attribute12 :=
                                            import_cust_sites_rec.hcp_attribute12;
                  l_party_site_rec.attribute13 :=
                                            import_cust_sites_rec.hcp_attribute13;
                  l_party_site_rec.attribute14 :=
                                            import_cust_sites_rec.hcp_attribute14;
                  l_party_site_rec.attribute15 :=
                                            import_cust_sites_rec.hcp_attribute15; */
               l_party_site_rec.orig_system_reference :=
                             import_cust_sites_rec.leg_orig_sys_party_site_ref;
               fnd_file.put_line (fnd_file.LOG,'creating party_site_id');
               hz_party_site_v2pub.create_party_site
                                  (p_init_msg_list          => 'T',
                                   p_party_site_rec         => l_party_site_rec,
                                   x_party_site_id          => l_party_site_id,
                                   x_party_site_number      => l_party_site_number,
                                   x_return_status          => l_return_status,
                                   x_msg_count              => l_msg_count,
                                   x_msg_data               => l_msg_data
                                  );

               IF NVL (l_return_status, '-1') <> 'S'
               THEN
                  --- updating the error records
                   --               UPDATE xxar_customer_site_stg
                   --                  SET process_flag = 'E',
                   --                      ERROR_TYPE = g_imp_err_type,
                   --                      request_id = g_request_id,
                   --                      last_updated_date = SYSDATE,
                   --                      last_updated_by = g_last_updated_by,
                   --                      last_update_login = g_last_update_login
                   --                WHERE 1 = 1
                   --                  AND interface_txn_id =
                   --                                        import_cust_sites_rec.interface_txn_id
                   --                  AND process_flag = g_validated
                   --                  AND batch_id = g_batch_id;
                  import_cust_sites_rec.process_flag := 'E';
                  import_cust_sites_rec.ERROR_TYPE := g_imp_err_type;

                  --   AND run_sequence_id = g_new_run_seq_id;

                  --- error msg
                  fnd_file.put_line (fnd_file.LOG,'creation of party site failed..');
                  IF l_msg_count > 1
                  THEN
                     FOR i IN 1 .. (l_msg_count - 1)
                     LOOP
                        l_msg :=
                           apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                                 apps.fnd_api.g_false
                                                );
                        l_msg_data := l_msg_data || '-' || l_msg;
                     END LOOP;
                  ELSE
                     l_msg_data :=
                        apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_first,
                                              apps.fnd_api.g_false
                                             );
                  END IF;

                  debug_msg_p
                       ('STEP:7.11',
                        'IMPORT_SITES_P',
                           'Inside API Error for create customer party site: '
                        || import_cust_sites_rec.interface_txn_id
                        || ' Error-'
                        || l_msg_data
                       );
                  g_failed_count := g_failed_count + 1;
                  l_status := g_error;
                  source_rec.interface_staging_id :=
                                        import_cust_sites_rec.interface_txn_id;
                  source_rec.source_column_name := NULL;
                  source_rec.source_column_value := NULL;
                  source_rec.ERROR_CODE := 'PARTY_SITE_API_ERROR';
                  source_rec.error_message := l_msg_data;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                          (   'Not able to Create Customer Record Using API '
                           || import_cust_sites_rec.interface_txn_id
                           || 'Error: '
                           || l_log_err_msg
                          );
                  END IF;
               ELSE
                  ---- Update the Party Details in Sites Staging table
                       --               UPDATE xxar_customer_site_stg
                       --                  SET party_site_id = l_party_site_id,
                       --                      party_site_number = l_party_site_number,
                       --                      process_flag = g_converted,
                       --                      ERROR_TYPE = NULL,
                       --                      last_updated_date = SYSDATE,
                       --                      last_updated_by = g_last_updated_by,
                       --                      last_update_login = g_last_update_login
                       --                WHERE 1 = 1
                       --                  AND interface_txn_id =
                       --                                        import_cust_sites_rec.interface_txn_id
                       --                  AND batch_id = g_batch_id;

                 IF import_cust_sites_rec.process_flag = 'C' THEN   -- Added v1.81 --
                  import_cust_sites_rec.process_flag := g_converted;
                  import_cust_sites_rec.ERROR_TYPE := NULL;
                 END IF;  -- Added v1.81 --

                  import_cust_sites_rec.party_site_id := l_party_site_id;
                  import_cust_sites_rec.party_site_number :=
                                                          l_party_site_number;

                  --- Update Contact Points Staging Table with Relevant Details
                  fnd_file.put_line (fnd_file.LOG,'party site successfully created..');
                  UPDATE xxar_customer_contact_stg
                     SET           --customer_acct_site_id = l_party_site_id,
                        customer_site_number = l_party_site_number,
                        last_updated_date = SYSDATE,
                        last_updated_by = g_last_updated_by,
                        last_update_login = g_last_update_login
                   WHERE 1 = 1
                     AND leg_customer_number =
                                     import_cust_sites_rec.leg_customer_number
                     AND leg_site_number =
                                   import_cust_sites_rec.leg_party_site_number;
                 fnd_file.put_line (fnd_file.LOG,'Updated xxar_customer_contact_stg...');
               END IF;
            ELSE
               l_party_site_id := import_cust_sites_rec.party_site_id;
               l_party_site_number := import_cust_sites_rec.party_site_number;
               debug_msg_p ('STEP:7.12',
                            'IMPORT_SITES_P',
                            'Party Site exists : ' || l_party_site_number
                           );
            END IF;
         END IF;

         -- Create Cust Account Site
         IF (l_cust_account_id IS NOT NULL AND l_party_site_id IS NOT NULL)
         THEN
            fnd_file.put_line (fnd_file.LOG,'IF (l_cust_account_id IS NOT NULL AND l_party_site_id IS NOT NULL)');
            IF import_cust_sites_rec.cust_acct_site_id IS NULL
            THEN
               debug_msg_p ('STEP:7.13',
                            'IMPORT_SITES_P',
                            'Create a Cust Account Site ' || l_return_status
                           );
               fnd_file.put_line (fnd_file.LOG,'IF import_cust_sites_rec.cust_acct_site_id IS NULL..');
               l_cust_acct_site_rec.cust_account_id := l_cust_account_id;
               l_cust_acct_site_rec.party_site_id := l_party_site_id;
               l_cust_acct_site_rec.territory :=
                                           import_cust_sites_rec.leg_territory;
               l_cust_acct_site_rec.territory_id :=
                                            import_cust_sites_rec.territory_id;
               --l_cust_acct_site_rec.org_id := import_cust_sites_rec.org_id;
               l_cust_acct_site_rec.org_id := import_cust_sites_rec.new_org_id;

               -- Modified code for changes requested in Defect#310
               IF (import_cust_sites_rec.leg_source_system = 'FSC'
                  AND   UPPER (import_cust_sites_rec.leg_operating_unit) NOT IN ('OU USD 1775 TCO', 'OU MXN CORP') -- Added v1.24

                  )
               THEN
                  l_cust_acct_site_rec.orig_system_reference :=
                        import_cust_sites_rec.leg_customer_number
                     || '-'
                     || SUBSTR (import_cust_sites_rec.leg_location,
                                  (INSTR (import_cust_sites_rec.leg_location,
                                          '-'
                                         )
                                  )
                                + 1
                               );
               ELSE
                  fnd_file.put_line (fnd_file.LOG,' ELSE IF import_cust_sites_rec.leg_source_system = FSC ');
                  -- v1.42 changes: START
                  IF  import_cust_sites_rec.leg_source_system = 'SASC'
                  THEN
                      l_ou_name := NULL;
                      SELECT name
                        INTO l_ou_name
                        FROM hr_operating_units
                       WHERE organization_id = import_cust_sites_rec.new_org_id;

                    IF  import_cust_sites_rec.hcs_attribute8 IN ('4234', 'A', '4470') THEN --- v1.81

                    -- v1.56 change : START
                     BEGIN
                       SELECT meaning
                         INTO l_r12_plant
                         FROM fnd_lookup_values
                        WHERE lookup_type = 'XXAR_CUST_CNV_BR_OU_MAP'
                          AND upper(description) = upper(l_ou_name)
                          AND enabled_flag = 'Y'
                          AND TRUNC (SYSDATE) BETWEEN NVL (start_date_active, SYSDATE - 1)
                                                  AND NVL (end_date_active, SYSDATE + 1)
                          AND LANGUAGE = USERENV ('LANG');
                     EXCEPTION
                       WHEN OTHERS
                       THEN
                          l_r12_plant := NULL;
                     END;
                    -- v1.56 change : END
                   ELSE -- v1.81

                   l_r12_plant:= null;-- v1.81

                   END IF;-- v1.81

                    --  IF UPPER(l_ou_name) = UPPER('Eaton EPS OU') -- commented for v1.56 change
                      IF UPPER(l_r12_plant) = UPPER('4470') -- Added for v1.56 change
                      THEN
                            BEGIN
                                l_leg_format := NULL;
                                SELECT 'Y'
                                  INTO l_leg_format
                                  FROM     dual
                                 WHERE REGEXP_LIKE (import_cust_sites_rec.leg_orig_sys_cust_site_ref , '[.]');
                                 l_cust_acct_site_rec.orig_system_reference := 'EPS.'||REGEXP_SUBSTR (import_cust_sites_rec.leg_orig_sys_cust_site_ref ,'[^."]+',6);
                            EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                l_cust_acct_site_rec.orig_system_reference := import_cust_sites_rec.leg_orig_sys_cust_site_ref;

                            END;
                      ELSE
                          l_cust_acct_site_rec.orig_system_reference :=
                                     import_cust_sites_rec.leg_orig_sys_cust_site_ref;

                      END IF;
                  ELSE
                  -- v1.42 changes: END
                      l_cust_acct_site_rec.orig_system_reference :=
                                 import_cust_sites_rec.leg_orig_sys_cust_site_ref;
                  END IF; -- Added for v1.42
               END IF;


               l_cust_acct_site_rec.ece_tp_location_code :=
                                   import_cust_sites_rec.leg_demand_class_code;

               -- Modified code for changes requested in Defect#310
               IF import_cust_sites_rec.leg_source_system = 'FSC'
               THEN
                  l_cust_acct_site_rec.attribute7 :=
                                      import_cust_sites_rec.leg_source_system;
                  l_cust_acct_site_rec.attribute8 :=
                     SUBSTR (import_cust_sites_rec.leg_location,
                               (INSTR (import_cust_sites_rec.leg_location,
                                       '-')
                               )
                             + 1
                            );
               END IF;

               IF import_cust_sites_rec.leg_source_system = 'ISSC'
               THEN
                  fnd_file.put_line (fnd_file.LOG,'IF import_cust_sites_rec.leg_source_system = ISSC');
                  l_cust_acct_site_rec.attribute7 :=
                                      import_cust_sites_rec.leg_source_system;
                  l_cust_acct_site_rec.attribute8 :=
                                        import_cust_sites_rec.hcsu_attribute6;
               END IF;

               IF import_cust_sites_rec.leg_source_system = 'SASC'
               THEN

                     l_cust_acct_site_rec.attribute7 :=
import_cust_sites_rec.leg_source_system;
                     l_cust_acct_site_rec.attribute8 :=
import_cust_sites_rec.hcsu_attribute6;

               END IF;

                --    Start V1.33
                IF import_cust_sites_rec.LEG_SITE_USE_TAX_CODE IS NOT NULL THEN
                    l_cust_acct_site_rec.attribute11 := import_cust_sites_rec.LEG_SITE_USE_TAX_CODE ;
                ELSE
                    l_cust_acct_site_rec.attribute11 :=  FND_API.G_MISS_CHAR ;
                END IF;
                --    End V1.33

               /* l_cust_acct_site_rec.attribute_category := import_cust_sites_rec.hcp_hcp_attribute_category; */
               --l_cust_acct_site_rec.attribute1 :=  import_cust_sites_rec.hcp_attribute1 ;
               l_cust_acct_site_rec.attribute2 := import_cust_sites_rec.hcs_attribute2;
               --l_cust_acct_site_rec.attribute3 :=  import_cust_sites_rec.hcp_attribute3 ;
               l_cust_acct_site_rec.attribute4 :=
                                          import_cust_sites_rec.hcs_attribute4;
               l_cust_acct_site_rec.attribute5 :=
                                          import_cust_sites_rec.hcs_attribute5;
               l_cust_acct_site_rec.attribute6 :=
                                          import_cust_sites_rec.hcs_attribute6;
               --l_cust_acct_site_rec.attribute7 :=  import_cust_sites_rec.hcp_attribute7 ;
               --l_cust_acct_site_rec.attribute8 :=  import_cust_sites_rec.hcp_attribute8 ;
               l_cust_acct_site_rec.attribute9 :=
                                          import_cust_sites_rec.hcs_attribute9;
               --l_cust_acct_site_rec.attribute10 := import_cust_sites_rec.hcp_attribute10;
               --l_cust_acct_site_rec.attribute11 := import_cust_sites_rec.hcp_attribute11;
             -- Changes for V1.43 Start --
             /*  l_cust_acct_site_rec.attribute12 :=
                                         import_cust_sites_rec.hcs_attribute12; */ -- Commented for Version 1.43
             IF (import_cust_sites_rec.leg_source_system = 'SASC') THEN
             ----Changes for 1.45 Start----
                l_cust_acct_site_rec.attribute12 := import_cust_sites_rec.leg_orig_sys_cust_ref;
             ----Changes for 1.45 End-------
             ----Chnages for 1.46 Start-----
             ELSIF (import_cust_sites_rec.leg_source_system = 'ISSC') THEN
                BEGIN
                    SELECT count(1)
                    INTO l_is_issc_ind
                    FROM fnd_lookup_values  flv
                    WHERE flv.lookup_type = 'XXAR_CUST_ISSC_IND_PLANT'
                      AND flv.lookup_code = import_cust_sites_rec.hcsu_attribute6
                      AND flv.language = userenv('lang');
                EXCEPTION
                    WHEN OTHERS THEN
                         NULL;
                END;
                IF (l_is_issc_ind > 0) THEN
                    l_cust_acct_site_rec.attribute12 := import_cust_sites_rec.hcs_attribute12;
                ELSE
                    l_cust_acct_site_rec.attribute12 := import_cust_sites_rec.leg_customer_number;
                END IF;
             ----Chnages for 1.46 End-----
             ELSE

                l_cust_acct_site_rec.attribute12 := import_cust_sites_rec.leg_customer_number;

             END IF;
             -- Changes for V1.43 END --
               -- l_cust_acct_site_rec.attribute13 := 'Global';    -- Commented for v1.54, Mock3 Defect# 4654
                                         -- Default the attribute 13 to Global

               l_cust_acct_site_rec.attribute13 := 'GLOBAL';       -- Added for v1.54, Mock3 Defect# 4654

               --l_cust_acct_site_rec.attribute14 := import_cust_sites_rec.hcp_attribute14;
               l_cust_acct_site_rec.attribute15 :=
                                         import_cust_sites_rec.hcs_attribute15;
               l_cust_acct_site_rec.created_by_module := g_created_by_module;

               -- Start Added for version 1.40
               IF ((import_cust_sites_rec.leg_source_system = 'SASC')
                  OR   (UPPER (import_cust_sites_rec.leg_operating_unit) IN ('OU USD 1775 TCO', 'OU MXN CORP') )

                  )
               THEN

                  -- Changes for v1.49 start
                  IF ( import_cust_sites_rec.hcs_attribute8 = 'A'
                   AND import_cust_sites_rec.site IS NOT NULL
                   AND import_cust_sites_rec.leg_source_system = 'SASC' ) THEN

                     l_cust_acct_site_rec.attribute8 := import_cust_sites_rec.site;

                  ELSE

                     l_cust_acct_site_rec.attribute8 := import_cust_sites_rec.hcsu_attribute6;
                  END IF;
                  -- Changes for v1.49 end

               END IF;
               -- End Added for version 1.40

               --- adding changes for v1.47  passing Global DFF at Customer Account site level only for Brazil
               IF import_cust_sites_rec.hcs_global_attr_cat ='JL.BR.ARXCUDCI.Additional' THEN

                 l_cust_acct_site_rec.GLOBAL_ATTRIBUTE_CATEGORY := 'JL.BR.ARXCUDCI.Additional';
               --  l_cust_acct_site_rec.global_attribute1  := import_cust_sites_rec.hcs_global_attribute1;
                 l_cust_acct_site_rec.global_attribute2  := import_cust_sites_rec.hcs_global_attribute2;
                 l_cust_acct_site_rec.global_attribute3  := import_cust_sites_rec.hcs_global_attribute3;
                 l_cust_acct_site_rec.global_attribute4  := import_cust_sites_rec.hcs_global_attribute4;
                 l_cust_acct_site_rec.global_attribute5  := import_cust_sites_rec.hcs_global_attribute5;
                 l_cust_acct_site_rec.global_attribute6  := import_cust_sites_rec.hcs_global_attribute6;
                 l_cust_acct_site_rec.global_attribute7  := import_cust_sites_rec.hcs_global_attribute7;
                 l_cust_acct_site_rec.global_attribute8  := import_cust_sites_rec.hcs_global_attribute8;
                 l_cust_acct_site_rec.global_attribute9  := import_cust_sites_rec.hcs_global_attribute9;
                 --l_cust_acct_site_rec.global_attribute10 := import_cust_sites_rec.hcs_global_attribute10;
                -- l_cust_acct_site_rec.global_attribute11 := import_cust_sites_rec.hcs_global_attribute11;
                 --l_cust_acct_site_rec.global_attribute12 := import_cust_sites_rec.hcs_global_attribute12;
                 --l_cust_acct_site_rec.global_attribute13 := import_cust_sites_rec.hcs_global_attribute13;
                -- l_cust_acct_site_rec.global_attribute14 := import_cust_sites_rec.hcs_global_attribute14;
                -- l_cust_acct_site_rec.global_attribute15 := import_cust_sites_rec.hcs_global_attribute15;
                -- l_cust_acct_site_rec.global_attribute16 := import_cust_sites_rec.hcs_global_attribute16;
                -- l_cust_acct_site_rec.global_attribute17 := import_cust_sites_rec.hcs_global_attribute17;
                -- l_cust_acct_site_rec.global_attribute18 := import_cust_sites_rec.hcs_global_attribute18;
                -- l_cust_acct_site_rec.global_attribute19 := import_cust_sites_rec.hcs_global_attribute19;
                -- l_cust_acct_site_rec.global_attribute20 := import_cust_sites_rec.hcs_global_attribute20;



               END IF; -- end of if import_cust_sites_rec.hcs_global_attr_cat ='JL.BR.ARXCUDCI.Additional'

               -- end of adding changes for v1.47  passing Global DFF at Customer Account site level only for Brazil

               fnd_file.put_line (fnd_file.LOG, 'calling create_cust_acct_site api..');
               hz_cust_account_site_v2pub.create_cust_acct_site
                                                        ('T',
                                                         l_cust_acct_site_rec,
                                                         l_cust_acct_site_id,
                                                         l_return_status,
                                                         l_msg_count,
                                                         l_msg_data
                                                        );

               IF NVL (l_return_status, '-1') <> 'S'
               THEN
                  -- updating the error records
                  --               UPDATE xxar_customer_site_stg
                  --                  SET process_flag = 'E',
                  --                      ERROR_TYPE = g_imp_err_type,
                  --                      request_id = g_request_id,
                  --                      last_updated_date = SYSDATE,
                  --                      last_updated_by = g_last_updated_by,
                  --                      last_update_login = g_last_update_login
                  --                WHERE 1 = 1
                  --                  AND interface_txn_id =
                  --                                        import_cust_sites_rec.interface_txn_id
                  --                  AND batch_id = g_batch_id;
                  import_cust_sites_rec.process_flag := 'E';
                  import_cust_sites_rec.ERROR_TYPE := g_imp_err_type;
                  --   AND run_sequence_id = g_new_run_seq_id;

                  --Reseting local Variable to avoid issues further Processing-
                  l_cust_acct_site_id := NULL;
                  debug_msg_p ('STEP:7.14',
                               'IMPORT_SITES_P',
                                  'l_return_status: '
                               || l_return_status
                               || ' l_msg_data:'
                               || l_msg_data
                               || ' l_msg_count:'
                               || l_msg_count
                               || 'l_cust_acct_site_id'
                               || l_cust_acct_site_id
                              );

                  -- error msg
                  fnd_file.put_line (fnd_file.LOG,' create_cust_acct_site failed');
                  IF l_msg_count > 1
                  THEN
                     FOR i IN 1 .. (l_msg_count - 1)
                     LOOP
                        l_msg :=
                           apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                                 apps.fnd_api.g_false
                                                );
                        l_msg_data := l_msg_data || '-' || l_msg;
                     END LOOP;
                  ELSE
                     l_msg_data :=
                        apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_first,
                                              apps.fnd_api.g_false
                                             );
                  END IF;

                  debug_msg_p
                       ('STEP:7.14',
                        'IMPORT_SITES_P',
                           'Inside API Error for create customers acct site: '
                        || import_cust_sites_rec.interface_txn_id
                        || ' Error-'
                        || l_msg_data
                       );
                  g_failed_count := g_failed_count + 1;
                  l_status := g_error;
                  source_rec.interface_staging_id :=
                                        import_cust_sites_rec.interface_txn_id;
                  source_rec.source_column_name := NULL;
                  source_rec.source_column_value := NULL;
                  source_rec.ERROR_CODE := 'PARTY_ACCT_SITE_API_ERROR';
                  source_rec.error_message := l_msg_data;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                        (   'Not able to Create Customer Account Site Record Using API '
                         || import_cust_sites_rec.interface_txn_id
                         || 'Error: '
                         || l_log_err_msg
                        );
                  END IF;
               ELSE
                  ---- Update the Party Details in Sites Staging table
                   --               UPDATE xxar_customer_site_stg
                   --                  SET cust_acct_site_id = l_cust_acct_site_id,
                   --                      --party_site_number = l_party_site_number,
                   --                      process_flag = g_converted,
                   --                      ERROR_TYPE = NULL,
                   --                      last_updated_date = SYSDATE,
                   --                      last_updated_by = g_last_updated_by,
                   --                      last_update_login = g_last_update_login
                   --                WHERE 1 = 1
                   --                  AND interface_txn_id =
                   --                                        import_cust_sites_rec.interface_txn_id
                   --                  AND batch_id = g_batch_id;
                  fnd_file.put_line (fnd_file.LOG,' create_cust_acct_site success, l_cust_acct_site_id: '||l_cust_acct_site_id);

                 IF import_cust_sites_rec.process_flag = 'C' THEN   -- Added v1.81 --
                  import_cust_sites_rec.process_flag := g_converted;
                  import_cust_sites_rec.ERROR_TYPE := NULL;
                 END IF;  -- Added v1.81 --
                  import_cust_sites_rec.cust_acct_site_id :=
                                                          l_cust_acct_site_id;
               END IF;
            ELSE
               l_cust_acct_site_id := import_cust_sites_rec.cust_acct_site_id;
               fnd_file.put_line (fnd_file.LOG,' ELSE for IF import_cust_sites_rec.cust_acct_site_id IS NULL: '||import_cust_sites_rec.cust_acct_site_id);
               debug_msg_p ('STEP:7.15',
                            'IMPORT_SITES_P',
                            'Cust Account Site Exists ' || l_cust_acct_site_id
                           );
            END IF;
         END IF;

         IF (l_cust_acct_site_id IS NOT NULL)
         THEN
            IF import_cust_sites_rec.cust_acct_site_use_id IS NULL
            THEN
               -- Update the data in Record Type
               fnd_file.put_line (fnd_file.LOG,'IF (l_cust_acct_site_id IS NOT NULL): '||l_cust_acct_site_id);
               debug_msg_p ('STEP:7.16',
                            'IMPORT_SITES_P',
                            'Creating Site Use'
                           );

               l_cust_site_use_rec.bill_to_site_use_id := NULL;
               l_cust_site_use_rec.attribute_category := NULL;

               l_ship_to_flag := 'Y';  -- Added for v1.70
               l_cust_site_use_rec.attribute11 := import_cust_sites_rec.hcsu_attribute11;  -- Added for v1.77

               /* Fetching Bill to site use id for Non Bill to site use */
               IF     import_cust_sites_rec.leg_site_use_code <> 'BILL_TO'
                  AND import_cust_sites_rec.leg_bill_to_site_use_id IS NOT NULL
               THEN
                 BEGIN
                 fnd_file.put_line (fnd_file.LOG,'import_cust_sites_rec.leg_site_use_code <> BILL_TO, leg_bill_to_site_use_id: '||import_cust_sites_rec.leg_bill_to_site_use_id);
                 l_sold_to_bill_loc := NULL;  -- v1.77

                 -- Start Commented for Version 1.66
                 /*
                  SELECT cust_acct_site_use_id
                    INTO l_bill_to_site_use_id            --l_cust_site_use_rec.bill_to_site_use_id
                    FROM xxar_customer_site_stg xcss
                   WHERE xcss.leg_site_use_id =
                                 import_cust_sites_rec.leg_bill_to_site_use_id
                     AND xcss.leg_site_use_code = 'BILL_TO'
                     AND xcss.leg_source_system =
                                       import_cust_sites_rec.leg_source_system
                     -- Changes Start By Ankur for defect# 1653 V1.29
                     -- Added Account check to ensure Bill_to/Ship_to relationship is done within same account
                     AND xcss.cust_account_id = l_cust_account_id
                     -- Changes End By Ankur for defect# 1653 V1.29
                     AND ROWNUM = 1;
                  */
                 -- End Commented for Version 1.66

                  BEGIN --  Added for v1.76


                  --Query to get the party_site_id for the Bill_to location
                  l_bill_to_party_site_id := null;

                   SELECT party_site_id, leg_location
                     INTO l_bill_to_party_site_id  , l_bill_to_location
                     FROM xxar_customer_site_stg xcss
                    WHERE xcss.leg_site_use_id = import_cust_sites_rec.leg_bill_to_site_use_id
                      AND xcss.leg_site_use_code = 'BILL_TO'
                      AND xcss.leg_source_system = import_cust_sites_rec.leg_source_system
                      AND xcss.cust_account_id = l_cust_account_id
                      AND xcss.leg_operating_unit = import_cust_sites_rec.leg_operating_unit
                      AND ROWNUM = 1;

                  -- Start Added for v1.66
                    SELECT hcsu.site_use_id
                      INTO l_bill_to_site_use_id
                      FROM apps.hz_cust_acct_sites_all hcas,
                           apps.hz_cust_site_uses_all hcsu
                     WHERE hcas.cust_account_id = l_cust_account_id
                       AND hcas.party_site_id = l_bill_to_party_site_id -- New Added for v1.76
                       AND hcsu.org_id = import_cust_sites_rec.new_org_id -- New Added for v1.76
                       AND hcsu.location = NVL(l_bill_to_location, hcsu.location)
                       AND hcas.cust_acct_site_id = hcsu.cust_acct_site_id
                       AND hcsu.SITE_USE_CODE = 'BILL_TO';
                  -- End Added for v1.66
                  -- Start Added for v1.76
                  EXCEPTION WHEN NO_DATA_FOUND THEN

                  SELECT cust_acct_site_use_id
                    INTO l_bill_to_site_use_id
                    FROM xxar_customer_site_stg xcss
                   WHERE xcss.leg_site_use_id = import_cust_sites_rec.leg_bill_to_site_use_id
                     AND xcss.leg_site_use_code = 'BILL_TO'
                     AND xcss.leg_source_system = import_cust_sites_rec.leg_source_system
                     AND xcss.cust_account_id = l_cust_account_id
                     AND xcss.leg_operating_unit = import_cust_sites_rec.leg_operating_unit
                     AND ROWNUM = 1;

                  END;
                  --  End Added for v1.76
                     fnd_file.put_line (fnd_file.LOG,'l_bill_to_site_use_id: '|| l_bill_to_site_use_id);

                     -- Below code added the exception to fix Mock2 Defect# 1899 v1.11 on 30-May-2015
                     IF l_bill_to_site_use_id IS NOT NULL THEN
                        l_cust_site_use_rec.bill_to_site_use_id := l_bill_to_site_use_id;
                        -- Changes Start By Ankur for defect# 1653 V1.29
                     ELSE
                        l_cust_site_use_rec.bill_to_site_use_id := Null; -- Resetting the record variable to deal with Loop keeping old values
                        -- Changes End By Ankur for defect# 1653 V1.29

                        l_ship_to_flag := 'N';          -- Added for v1.70
                     END IF;

                     -- Changes start for v1.77
                     IF import_cust_sites_rec.leg_site_use_code = 'SOLD_TO'
                     THEN
                        BEGIN
                            SELECT leg_location
                              INTO l_sold_to_bill_loc
                              FROM xxar_customer_site_stg xcss
                             WHERE xcss.leg_site_use_id =
                                           import_cust_sites_rec.leg_bill_to_site_use_id
                               AND xcss.leg_site_use_code = 'BILL_TO'
                               AND xcss.leg_source_system = import_cust_sites_rec.leg_source_system
                               AND xcss.leg_operating_unit = import_cust_sites_rec.leg_operating_unit
                               AND xcss.cust_account_id = l_cust_account_id;

                            fnd_file.put_line (fnd_file.LOG,'l_sold_to_bill_loc: '||l_sold_to_bill_loc);

                            l_cust_site_use_rec.bill_to_site_use_id := NULL;
                            l_cust_site_use_rec.attribute_category := 'Sold To';
                            l_cust_site_use_rec.attribute11 := l_sold_to_bill_loc;

                          EXCEPTION
                            WHEN OTHERS THEN
                                l_cust_site_use_rec.bill_to_site_use_id := NULL;
                                l_cust_site_use_rec.attribute_category := NULL;
                                l_cust_site_use_rec.attribute11 := NULL;
                                fnd_file.put_line (fnd_file.LOG,'Error while deriving BILL_TO link for SOLD_TO sites: '||SQLERRM);
                         END;

                     END IF;
                     -- Changes end for v1.77

                     fnd_file.put_line (fnd_file.LOG,'l_cust_site_use_rec.bill_to_site_use_id: '|| l_cust_site_use_rec.bill_to_site_use_id);

                 EXCEPTION
                     WHEN OTHERS THEN
                     -- Changes Start By Ankur for defect# 1653 V1.29
                      l_cust_site_use_rec.bill_to_site_use_id := Null; -- Resetting the record variable to deal with Loop keeping old values
                     -- Changes End By Ankur for defect# 1653 V1.29

                      l_ship_to_flag := 'N';          -- Added for v1.70

                      fnd_file.put_line (fnd_file.LOG,'bill_to_site_use_id not found for leg_bill_to_site_use_id: '||import_cust_sites_rec.leg_bill_to_site_use_id||', '||SQLERRM);
                    END;        -- Changes end for fix Mock2 Defect# 1899 v1.11 on 30-May-2015
                -- Changes Start By Ankur for defect# 1653 V1.29
               ELSE
                l_cust_site_use_rec.bill_to_site_use_id := Null; -- Resetting the record variable to deal with Loop keeping old values
                -- Changes End By Ankur for defect# 1653 V1.29
               END IF;

               -- bill_to_site_use_id
               --v1.27 Start
               BEGIN
                   l_term_id := NULL;
                   SELECT term_id
                     INTO l_term_id
                  FROM xxar_customer_prof_amnt_stg
                 WHERE 1=1
                   AND leg_customer_number =  import_cust_sites_rec.leg_customer_number
                   AND NVL(leg_site_use_id, -1) = NVL(import_cust_sites_rec.leg_site_use_id, -1)
                   AND leg_source_system =   import_cust_sites_rec.leg_source_system
                   AND ROWNUM =1 ;

               EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                      l_term_id := NULL;

               END;
               --v1.27 End

               l_cust_site_use_rec.cust_acct_site_id := l_cust_acct_site_id;
               l_cust_site_use_rec.site_use_code :=
                                       import_cust_sites_rec.leg_site_use_code;
               l_cust_site_use_rec.primary_flag :=
                               import_cust_sites_rec.leg_primary_site_use_flag;
               l_cust_site_use_rec.LOCATION :=
                                            import_cust_sites_rec.leg_location;
               l_cust_site_use_rec.payment_term_id :=l_term_id;        --Added v1.27
                               --   import_cust_sites_rec.term_id;  -- commented v1.27
               l_cust_site_use_rec.created_by_module := g_created_by_module;
               l_cust_site_use_rec.ship_via :=
                                       import_cust_sites_rec.leg_cust_ship_via;
               l_cust_site_use_rec.territory_id :=
                                            import_cust_sites_rec.territory_id;
               l_cust_site_use_rec.gl_id_rec :=
                                               import_cust_sites_rec.gl_id_rec;
               l_cust_site_use_rec.gl_id_rev :=
                                               import_cust_sites_rec.gl_id_rev;
               l_cust_site_use_rec.gl_id_tax :=
                                               import_cust_sites_rec.gl_id_tax;
               l_cust_site_use_rec.gl_id_freight :=
                                           import_cust_sites_rec.gl_id_freight;
               l_cust_site_use_rec.gl_id_clearing :=
                                          import_cust_sites_rec.gl_id_clearing;
               l_cust_site_use_rec.gl_id_unbilled :=
                                          import_cust_sites_rec.gl_id_unbilled;
               l_cust_site_use_rec.gl_id_unearned :=
                                          import_cust_sites_rec.gl_id_unearned;

--            l_cust_site_use_rec.tax_reference :=
--                                      import_cust_sites_rec.leg_tax_reference;
--            l_cust_site_use_rec.tax_code :=
--                                  import_cust_sites_rec.leg_site_use_tax_code;
                -- Commented for DFF Rationalisation
--
--               l_cust_site_use_rec.attribute_category :=
--                                 import_cust_sites_rec.hcsu_attribute_category;

               /* DFF mapping fo Ultimate Duns Number **/

/** Commented for v1.51 start
               IF import_cust_sites_rec.leg_source_system IN( 'FSC', 'SASC')
               THEN
                  BEGIN
                     --- Fetch the Attribute Values from xxar_customer_stg table
                     SELECT hca_attribute2,
                             hca_attribute1    -- Added v1.32
                       INTO l_cust_site_use_rec.attribute1,
                               l_cust_site_use_rec.attribute2   -- Added v1.32
                       FROM xxar_customer_stg
                      WHERE leg_customer_number = import_cust_sites_rec.leg_customer_number
                        AND party_id = import_cust_sites_rec.party_id
                        AND ROWNUM = 1;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        NULL;
                  END;
               ELSE
                  BEGIN
                     --- Fetch the Attribute Values from xxar_customer_stg table
                     SELECT hca_attribute10,
                             hca_attribute8        --Added v1.32
                       INTO l_cust_site_use_rec.attribute1,
                               l_cust_site_use_rec.attribute2   -- Added v1.32
                       FROM xxar_customer_stg
                      WHERE leg_customer_number = import_cust_sites_rec.leg_customer_number
                        AND party_id = import_cust_sites_rec.party_id
                        AND ROWNUM = 1;
                        fnd_file.put_line (fnd_file.LOG,'l_cust_site_use_rec.attribute1: '||l_cust_site_use_rec.attribute1);
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        NULL;
                  END;
               END IF;
Commented for v1.51 end **/


/** Commented for v1.51 start **/
               IF import_cust_sites_rec.leg_source_system ='FSC'
               THEN

                  BEGIN
                     --- Fetch the Ultimate,Parent and DUNS from xxar_customer_stg table
                    /** SELECT leg_attribute1,
                            leg_attribute2,
                            leg_attribute19
                       INTO l_cust_site_use_rec.attribute2,
                            l_cust_site_use_rec.attribute1,
                            l_cust_site_use_rec.attribute14
                       FROM xxar_customer_stg
                      WHERE --  Commented by Ankur for V1.55
                      /*leg_customer_number = import_cust_sites_rec.leg_customer_number
                        AND  party_id = import_cust_sites_rec.party_id
                        AND ROWNUM = 1; **/ --commented for v1.92
						
		--change starts for v1.92 						
		SELECT excust.leg_attribute1 duns_num,
		       excust.leg_attribute2 ultimate_duns_num,	
		       excust.leg_attribute19 parent_duns_num
		INTO   l_cust_site_use_rec.attribute2,                               
	 	       l_cust_site_use_rec.attribute1, 
                       l_cust_site_use_rec.attribute14
		FROM   xxextn.xxar_customer_site_stg exsite,
		       xxextn.xxar_customer_stg excust
		WHERE  exsite.leg_source_system= import_cust_sites_rec.leg_source_system
		AND    exsite.leg_site_use_id = import_cust_sites_rec.leg_site_use_id 
		AND    excust.leg_customer_number=exsite.leg_customer_number	
		AND    ROWNUM = 1;
		--change End for v1.92 

                  EXCEPTION
                     WHEN OTHERS
                     THEN
                     l_cust_site_use_rec.attribute2 := NULL;
                     l_cust_site_use_rec.attribute1 := NULL;
                     l_cust_site_use_rec.attribute14 := NULL;
                  END; 

               ELSIF import_cust_sites_rec.leg_source_system = 'ISSC'
               THEN

                  BEGIN
                     --- Fetch the Ultimate and Parent DUNS from xxar_customer_stg table
                    /** SELECT leg_attribute3,
                            leg_attribute10
                       INTO l_cust_site_use_rec.attribute14,
                            l_cust_site_use_rec.attribute1
                       FROM xxar_customer_stg
                      WHERE--  Commented by Ankur for V1.55
                      /*leg_customer_number = import_cust_sites_rec.leg_customer_number
                        AND  party_id = import_cust_sites_rec.party_id
                        AND ROWNUM = 1; **/--commented for v1.92 defect 12602 retaining customer duns wherther it is dedup or not									
			--change starts for v1.92 
		SELECT excust.leg_attribute3 parent_duns_num,
		       excust.leg_attribute10 ultimate_duns_num	
		INTO   l_cust_site_use_rec.attribute14, 
                       l_cust_site_use_rec.attribute1
		FROM   xxextn.xxar_customer_site_stg exsite,
		       xxextn.xxar_customer_stg excust	
		WHERE  exsite.leg_source_system= import_cust_sites_rec.leg_source_system
		AND    exsite.leg_site_use_id = import_cust_sites_rec.leg_site_use_id
		AND    excust.leg_customer_number=exsite.leg_customer_number
		AND    ROWNUM = 1;
		--change End for v1.92 

                  EXCEPTION
                     WHEN OTHERS
                     THEN
                     l_cust_site_use_rec.attribute14 := NULL;
                     l_cust_site_use_rec.attribute1 := NULL;
                  END;

                  l_cust_site_use_rec.attribute2 := import_cust_sites_rec.hcsu_gdf_attribute19;

               ELSIF import_cust_sites_rec.leg_source_system = 'SASC'
               THEN

                  BEGIN
                     --- Fetch the Ultimate and Parent DUNS from xxar_customer_stg table
/**
                     SELECT leg_attribute19,
                            leg_attribute2
                       INTO l_cust_site_use_rec.attribute14,
                            l_cust_site_use_rec.attribute1
                       FROM xxar_customer_stg
                      WHERE --  Commented by Ankur for V1.55
                      /*leg_customer_number = import_cust_sites_rec.leg_customer_number
                        AND   party_id = import_cust_sites_rec.party_id
                        AND ROWNUM = 1; **/ --commented for v1.92 defect 12602 retaining customer duns wherther it is dedup or not	

			--change starts for v1.92
		SELECT excust.leg_attribute19 parent_duns_num,
		       excust.leg_attribute2 ultimate_duns_num
		INTO   l_cust_site_use_rec.attribute14, 
                       l_cust_site_use_rec.attribute1
		FROM   xxextn.xxar_customer_site_stg exsite,
		       xxextn.xxar_customer_stg excust
		WHERE  exsite.leg_source_system= import_cust_sites_rec.leg_source_system
		AND    exsite.leg_site_use_id = import_cust_sites_rec.leg_site_use_id
		AND    excust.leg_customer_number=exsite.leg_customer_number
		AND    ROWNUM = 1;	
		--change End for v1.92 

                  EXCEPTION
                     WHEN OTHERS
                     THEN
                     l_cust_site_use_rec.attribute14 := NULL;
                     l_cust_site_use_rec.attribute1 := NULL;
                  END;

                  l_cust_site_use_rec.attribute2 := import_cust_sites_rec.hcsu_gdf_attribute19;

               END IF;
/** Commented for v1.51 end **/


          --     l_cust_site_use_rec.attribute2 := import_cust_sites_rec.leg_duns_number; --import_cust_sites_rec.hcsu_attribute2;  --modified for cr 2085 - DnB into Cust Site Attribute2, v1.23 --  Off v1.32
              /* l_cust_site_use_rec.attribute9 := import_cust_sites_rec.hcsu_attribute9;
               l_cust_site_use_rec.attribute10 := import_cust_sites_rec.hcsu_attribute10; */ -- Commented for v1.54, Mock3 Defect# 4654

               -- Below code added for v1.54, Mock3 Defect# 4654
               BEGIN

                   SELECT DECODE(import_cust_sites_rec.hcsu_attribute9,'Y','YES','N','NO',NULL),
                          DECODE(import_cust_sites_rec.hcsu_attribute10,'Y','YES','N','NO',NULL)
                     INTO l_cust_site_use_rec.attribute9,
                          l_cust_site_use_rec.attribute10
                     FROM DUAL;

                   EXCEPTION
                      WHEN OTHERS THEN
                         NULL;
               END;
               -- Changes end for v1.54, Mock3 Defect# 4654

               -- Start Added By Ankur for Version v1.65
               IF UPPER(import_cust_sites_rec.leg_operating_unit) = 'OU ECO ITALY-FEB 1998' THEN
               l_cust_site_use_rec.attribute13 :=
                                        import_cust_sites_rec.hcsu_attribute3;
               ELSE
               l_cust_site_use_rec.attribute13 := NULL;
               END IF;
               -- End Added By Ankur for Version v1.65

               --l_cust_site_use_rec.attribute11 := import_cust_sites_rec.hcsu_attribute11; -- v1.77 moved this statement to up

-- Commented by Ankur to  get the mapping ece_tp_code to work
--               l_cust_site_use_rec.demand_class_code := import_cust_sites_rec.leg_demand_class_code;

               --l_cust_site_use_rec.org_id := import_cust_sites_rec.org_id;
               l_cust_site_use_rec.org_id := import_cust_sites_rec.new_org_id;

                -- Commented for DFF Rationalisation
                /*

               l_cust_site_use_rec.global_attribute_category :=
                                    import_cust_sites_rec.hcsu_global_attr_cat;
               l_cust_site_use_rec.global_attribute1 :=
                                  import_cust_sites_rec.hcsu_global_attribute1;
               l_cust_site_use_rec.global_attribute2 :=
                                  import_cust_sites_rec.hcsu_global_attribute2;
               l_cust_site_use_rec.global_attribute3 :=
                                  import_cust_sites_rec.hcsu_global_attribute3;
               l_cust_site_use_rec.global_attribute4 :=
                                  import_cust_sites_rec.hcsu_global_attribute4;
               l_cust_site_use_rec.global_attribute5 :=
                                  import_cust_sites_rec.hcsu_global_attribute5;
               l_cust_site_use_rec.global_attribute6 :=
                                  import_cust_sites_rec.hcsu_global_attribute6;
               l_cust_site_use_rec.global_attribute7 :=
                                  import_cust_sites_rec.hcsu_global_attribute7;
               l_cust_site_use_rec.global_attribute8 :=
                                  import_cust_sites_rec.hcsu_global_attribute8;
               l_cust_site_use_rec.global_attribute9 :=
                                  import_cust_sites_rec.hcsu_global_attribute9;
               l_cust_site_use_rec.global_attribute10 :=
                                 import_cust_sites_rec.hcsu_global_attribute10;
               l_cust_site_use_rec.global_attribute11 :=
                                 import_cust_sites_rec.hcsu_global_attribute11;
               l_cust_site_use_rec.global_attribute12 :=
                                 import_cust_sites_rec.hcsu_global_attribute12;
               l_cust_site_use_rec.global_attribute13 :=
                                 import_cust_sites_rec.hcsu_global_attribute13;
               l_cust_site_use_rec.global_attribute14 :=
                                 import_cust_sites_rec.hcsu_global_attribute14;
               l_cust_site_use_rec.global_attribute15 :=
                                 import_cust_sites_rec.hcsu_global_attribute15;
               l_cust_site_use_rec.global_attribute16 :=
                                 import_cust_sites_rec.hcsu_global_attribute16;
               l_cust_site_use_rec.global_attribute17 :=
                                 import_cust_sites_rec.hcsu_global_attribute17;
               l_cust_site_use_rec.global_attribute18 :=
                                 import_cust_sites_rec.hcsu_global_attribute18;
               l_cust_site_use_rec.global_attribute19 :=
                                 import_cust_sites_rec.hcsu_global_attribute19;
               l_cust_site_use_rec.global_attribute20 :=
                                 import_cust_sites_rec.hcsu_global_attribute20;
                                 */

               -- Modified code for changes requested in Defect#310
               IF import_cust_sites_rec.leg_source_system = 'FSC'
               THEN
                  l_cust_site_use_rec.orig_system_reference :=
                        import_cust_sites_rec.leg_customer_number
                     || '|'
                     || SUBSTR (import_cust_sites_rec.leg_location,
                                  (INSTR (import_cust_sites_rec.leg_location,
                                          '-'
                                         )
                                  )
                                + 1
                               );
               ELSE
                  l_cust_site_use_rec.orig_system_reference :=
                        import_cust_sites_rec.leg_customer_number
                     || '|'
                     || import_cust_sites_rec.leg_site_use_code
                     || '|'
                     || import_cust_sites_rec.leg_location;
                  fnd_file.put_line (fnd_file.LOG,'l_cust_site_use_rec.orig_system_reference: '||l_cust_site_use_rec.orig_system_reference);
               END IF;

                --    Start V1.31
                IF import_cust_sites_rec.leg_site_use_code = 'BILL_TO' THEN
                    l_cust_site_use_rec.attribute12 := 'Skipped due to Conversion' ;
                ELSE
                    l_cust_site_use_rec.attribute12 :=  FND_API.G_MISS_CHAR ;
                END IF;
                --    End V1.31

               -- Adding code to include Profile at Site Level
               debug_msg_p ('STEP:7.16',
                            'IMPORT_SITES_P',
                            'Creating Site Use Profile'
                           );

               l_collector_id := NULL; --added for defect 2142 - collector bug fixes

               l_customer_profile_rec := NULL; -- Added for Version 1.80

               l_customer_profile_rec.attribute2 := 'PLANT'; -- Added for Version 1.83
			   
			   
			   --v1.95
			 SELECT count(1)
			   INTO l_site_prof_error
			   FROM xxar_customer_prof_amnt_stg xcss
			  WHERE xcss.leg_site_use_id = import_cust_sites_rec.leg_site_use_id
				AND xcss.leg_customer_number = import_cust_sites_rec.leg_customer_number
				AND xcss.batch_id = g_batch_id
				AND xcss.leg_source_system = import_cust_sites_rec.leg_source_system
				AND NVL (xcss.process_flag, 'X') = 'E'
				;
				
			IF l_site_prof_error = 0 THEN   --v1.95

               FOR site_profile_rec IN
                  site_profile_cur (import_cust_sites_rec.leg_site_use_id,
                                    import_cust_sites_rec.leg_customer_number,
                                    import_cust_sites_rec.leg_source_system
                                   )
               LOOP
                  -- Adding code to include Profile at Site Level
                  fnd_file.put_line (fnd_file.LOG,'site_profile_rec ');
                  IF site_profile_rec.leg_collector_name IS NOT NULL
                  THEN
                     BEGIN
                        SELECT collector_id
                          INTO l_collector_id
                          FROM ar_collectors
                         WHERE NAME = site_profile_rec.leg_collector_name;
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           l_collector_id := NULL;
                     END;
                  END IF;

                  IF site_profile_rec.leg_stmt_cycle_name IS NOT NULL
                  THEN
                     BEGIN
                        SELECT statement_cycle_id
                          INTO l_statement_cycle_id
                          FROM ar_statement_cycles arc
                         WHERE UPPER (arc.NAME) =
                                  UPPER (site_profile_rec.leg_stmt_cycle_name);
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           l_statement_cycle_id := NULL;
                     END;
                  END IF;

                  debug_msg_p ('STEP:7.16',
                               'IMPORT_SITES_P',
                               'Inside Profile Loop'
                              );
                  -- Adding Grace Period Columsn
                  -- l_customer_profile_rec.payment_grace_days := 3;
                  -- l_customer_profile_rec.discount_grace_days := 3; -- Commented for v1.82

                  -- Start Added for v1.82

                 IF import_cust_sites_rec.leg_source_system = 'FSC'
                 THEN
                  l_customer_profile_rec.discount_grace_days :=
                                      NVL(site_profile_rec.leg_discount_grace_days, 3);
                 ELSE
                  l_customer_profile_rec.discount_grace_days := 3;
                 END IF;
                  -- End Added for v1.82

                  --Updating Customer Profile Record Types
                  l_customer_profile_rec.collector_id := l_collector_id;
                  l_customer_profile_rec.credit_checking :=
                                          site_profile_rec.leg_credit_checking;
                  l_customer_profile_rec.tolerance :=
                                                site_profile_rec.leg_tolerance;
                  l_customer_profile_rec.discount_terms :=
                                            site_profile_rec.leg_discount_term;
                    -- Commented By Ankur for Version 1.52
--                  l_customer_profile_rec.dunning_letters :=
--                                          site_profile_rec.leg_dunning_letters;
                  l_customer_profile_rec.interest_charges :=
                                         site_profile_rec.leg_interest_charges;
                  l_customer_profile_rec.credit_balance_statements :=
                                          site_profile_rec.leg_credit_bal_stmt;
                  l_customer_profile_rec.credit_hold :=
                                              site_profile_rec.leg_credit_hold;
                  l_customer_profile_rec.credit_rating :=
                                            site_profile_rec.leg_credit_rating;
                  l_customer_profile_rec.risk_code :=
                                                site_profile_rec.leg_risk_code;
                  l_customer_profile_rec.override_terms :=
                                            site_profile_rec.leg_override_term;
                  l_customer_profile_rec.interest_period_days :=
                                     site_profile_rec.leg_interest_period_days;
                  l_customer_profile_rec.payment_grace_days :=
                                       site_profile_rec.leg_payment_grace_days;

                  -- Added as on 29-APR-2015 by Sanket to fix the issue - The value of send_statements is Y. Please enter a value for statement_cycle_id.

                  -- Start Commented by ANkur for v1.52
                  /*
                  l_customer_profile_rec.send_statements := 'N';

                  IF l_statement_cycle_id IS NOT NULL
                  THEN
                     l_customer_profile_rec.send_statements := 'Y';
                  ELSE
                     l_customer_profile_rec.credit_balance_statements := 'N';
                  --l_customer_profile_rec.send_statements := 'Y';
                  END IF;

                  */
                  -- End Commented by ANkur for v1.52
                  -- l_customer_profile_rec.account_status := site_profile_rec.leg_account_status; -- Commented for v1.44
                  l_customer_profile_rec.percent_collectable :=
                                      site_profile_rec.leg_percent_collectible;
                  l_customer_profile_rec.tax_printing_option :=
                                      site_profile_rec.leg_tax_printing_option;
                  l_customer_profile_rec.charge_on_finance_charge_flag :=
                                       site_profile_rec.leg_charge_on_fin_flag;
                  l_customer_profile_rec.clearing_days :=
                                            site_profile_rec.leg_clearing_days;
                  l_customer_profile_rec.cons_inv_flag :=
                                            site_profile_rec.leg_cons_inv_flag;
                  l_customer_profile_rec.cons_inv_type :=
                                            site_profile_rec.leg_cons_inv_type;
                  l_customer_profile_rec.lockbox_matching_option :=
                                  site_profile_rec.leg_lockbox_matching_option;
                  l_customer_profile_rec.credit_classification :=
                                    site_profile_rec.leg_credit_classification;
                  l_customer_profile_rec.created_by_module :=
                                                           g_created_by_module;
                  -- Added as on 29-APR-2015 for fixing the issue- You must enable balance forward billing for the account before You can enable it for the site.
                  l_customer_profile_rec.CONS_BILL_LEVEL :=
                                                           NULL;

                  l_customer_profile_rec.standard_terms := l_term_id; -- Added for v1.27 on 01-Oct-2015

               --l_customer_profile_rec.party_id := pin_party_id;
               --l_customer_profile_rec.cust_account_id := pin_cust_account_id;
               --l_customer_profile_rec.site_use_id := pin_site_use_id;

               -- 5880, V1.74
                 IF site_profile_rec.leg_currency_code IS NOT NULL THEN
                   BEGIN

                    SELECT profile_class_id
                     INTO l_customer_profile_rec.profile_class_id
                     FROM HZ_CUST_PROFILE_CLASSES
                    WHERE name = 'EATON DEFAULT'||' - '||site_profile_rec.leg_currency_code
                      AND status = 'A';
                   EXCEPTION
                    WHEN OTHERS
                    THEN
                       l_customer_profile_rec.profile_class_id := NULL;
                   END;
                 ELSE
				 
				 --change started for v1.94 
				 
					BEGIN
					
							SELECT ldg.currency_code
							INTO l_ledger_currency
							FROM 
							apps.hr_operating_units hou,
							apps.gl_ledgers ldg
							WHERE hou.organization_id = import_cust_sites_rec.new_org_id
							AND ldg.ledger_id = hou.set_of_books_id;

					EXCEPTION
					WHEN OTHERS THEN
						l_ledger_currency := NULL;
					END;
				 --end of v1.94
                  -- Start Added for v1.80
                   BEGIN

                    SELECT profile_class_id
                     INTO l_customer_profile_rec.profile_class_id
                     FROM HZ_CUST_PROFILE_CLASSES
                    WHERE --name = 'EATON DEFAULT'||' - '||'USD' --commented for v1.94
					name = 'EATON DEFAULT'||' - '||l_ledger_currency --added for v1.94
                      AND status = 'A';
                   EXCEPTION
                    WHEN OTHERS
                    THEN
                       l_customer_profile_rec.profile_class_id := NULL;
                   END;
                  -- End Added for v1.80

                 END IF;
               END LOOP;

                  -- Start Added for v1.82
               IF import_cust_sites_rec.leg_site_use_code = 'BILL_TO' THEN

                 IF l_customer_profile_rec.collector_id IS NULL THEN

                    BEGIN
                       SELECT collector_id
                         INTO l_customer_profile_rec.collector_id
                         FROM ar_collectors
                        WHERE NAME LIKE 'Default Collector';
                    EXCEPTION
                       WHEN OTHERS
                       THEN
                          l_customer_profile_rec.collector_id := NULL;
                    END;

                 END if;

                 IF l_term_id IS NULL THEN
                  l_cust_site_use_rec.payment_term_id := fnd_api.G_MISS_NUM;
                  l_customer_profile_rec.standard_terms := fnd_api.G_MISS_NUM;
                 END IF;

                 IF l_customer_profile_rec.discount_grace_days IS NULL THEN
                  l_customer_profile_rec.discount_grace_days := 3;
                 END IF;

               END IF;
                  -- End Added for v1.82
				 

				/*  -- Commenting, to be handled in extraction code
				-- Start v1.90 , defect#12463
				IF l_customer_profile_rec.discount_terms = 'N' OR l_customer_profile_rec.discount_terms IS NULL THEN
					l_customer_profile_rec.discount_grace_days := NULL;
				END IF;
				 -- End v1.90 */

                  -- Start Added for v1.80
                 IF l_customer_profile_rec.profile_class_id is NULL THEN
				 
					 --change started for v1.94 
				 
					BEGIN
					
							SELECT ldg.currency_code
							INTO l_ledger_currency
							FROM 
							apps.hr_operating_units hou,
							apps.gl_ledgers ldg
							WHERE hou.organization_id = import_cust_sites_rec.new_org_id
							AND ldg.ledger_id = hou.set_of_books_id;

					EXCEPTION
					WHEN OTHERS THEN
						l_ledger_currency := NULL;
					END;
				 --end of v1.94
				 
                   BEGIN

                    SELECT profile_class_id
                     INTO l_customer_profile_rec.profile_class_id
                     FROM HZ_CUST_PROFILE_CLASSES
                    WHERE --name = 'EATON DEFAULT'||' - '||'USD' commented for v1.94
					  name = 'EATON DEFAULT'||' - '||l_ledger_currency --added for v1.94
                      AND status = 'A';
                   EXCEPTION
                    WHEN OTHERS
                    THEN
                       l_customer_profile_rec.profile_class_id := NULL;
                   END;
                  -- End Added for v1.80
                 END IF;

               l_customer_profile_rec.account_status := 'CUSTOMER';   -- Added for v1.44

                  -- Start Change  by ANkur for v1.52
                 IF import_cust_sites_rec.leg_site_use_code = 'BILL_TO'
                 THEN
                    BEGIN
                        SELECT statement_cycle_id
                          INTO l_statement_cycle_id
                          FROM ar_statement_cycles arc
                         WHERE UPPER (arc.NAME) =
                                  UPPER ('MONTHLY');
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                           l_statement_cycle_id := NULL;
                    END;

                   l_customer_profile_rec.statement_cycle_id := l_statement_cycle_id;
                   l_customer_profile_rec.send_statements := 'Y';


                    IF NVL(import_cust_sites_rec.leg_customer_type, 'X') = 'I' THEN

                    l_customer_profile_rec.dunning_letter_set_id := NULL;
                    l_customer_profile_rec.dunning_letters := 'N';

                    ELSE

                     BEGIN

                      SELECT dunning_letter_set_id
                        INTO l_customer_profile_rec.dunning_letter_set_id
                        FROM ar_dunning_letter_sets
                       WHERE UPPER (NAME) = 'STANDARD';

                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           l_statement_cycle_id := NULL;
                     END;

                    l_customer_profile_rec.dunning_letters := 'Y';

                    END IF;

                 END IF;
                  -- End Change  by ANkur for v1.52
             IF l_ship_to_flag = 'Y'
             THEN                               -- IF Condition added for v1.70

               -- Calling API
               debug_msg_p ('STEP:7.16', 'IMPORT_SITES_P', 'Calling Site API');
               fnd_file.put_line (fnd_file.LOG,'calling the API, create_cust_site_use');
               hz_cust_account_site_v2pub.create_cust_site_use
                                                      ('T',
                                                       l_cust_site_use_rec,
                                                       l_customer_profile_rec,
                                                       -- fnd_api.g_false,
                                                       fnd_api.g_true,
                                                       fnd_api.g_false,
                                                       --fnd_api.g_true,
                                                       l_site_use_id,
                                                       l_return_status,
                                                       l_msg_count,
                                                       l_msg_data
                                                      );

               fnd_file.put_line (fnd_file.LOG,'Called hz_cust_account_site_v2pub.create_cust_site_use, l_site_use_id: '||l_site_use_id);
               IF NVL (l_return_status, '-1') <> 'S'
               THEN
                  --- updating the error records
                   --               UPDATE xxar_customer_site_stg
                   --                  SET process_flag = 'E',
                   --                      ERROR_TYPE = g_imp_err_type,
                   --                      request_id = g_request_id,
                   --                      last_updated_date = SYSDATE,
                   --                      last_updated_by = g_last_updated_by,
                   --                      last_update_login = g_last_update_login
                   --                WHERE 1 = 1
                   --                  AND interface_txn_id =
                   --                                        import_cust_sites_rec.interface_txn_id
                   --                  AND batch_id = g_batch_id;
                  import_cust_sites_rec.process_flag := 'E';
                  import_cust_sites_rec.ERROR_TYPE := g_imp_err_type;
                  fnd_file.put_line (fnd_file.LOG,'create_cust_site_use failed');

                  --- error msg
                  IF l_msg_count > 1
                  THEN
                     FOR i IN 1 .. (l_msg_count - 1)
                     LOOP
                        l_msg :=
                           apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                                 apps.fnd_api.g_false
                                                );
                        l_msg_data := l_msg_data || '-' || l_msg;
                     END LOOP;
                  ELSE
                     l_msg_data :=
                        apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_first,
                                              apps.fnd_api.g_false
                                             );
                  END IF;

                  debug_msg_p
                     ('STEP:7.17',
                      'IMPORT_SITES_P',
                         'Inside API Error for create customers acct site use: '
                      || import_cust_sites_rec.interface_txn_id
                      || ' Error-'
                      || l_msg_data
                     );
                  g_failed_count := g_failed_count + 1;
                  l_status := g_error;
                  source_rec.interface_staging_id :=
                                        import_cust_sites_rec.interface_txn_id;
                  source_rec.source_column_name := NULL;
                  source_rec.source_column_value := NULL;
                  source_rec.ERROR_CODE := 'CUST_ACCT_SITE_USE_API_ERROR';
                  source_rec.error_message := l_msg_data;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                        (   'Not able to Create Customer Account Site USe Record Using API '
                         || import_cust_sites_rec.interface_txn_id
                         || 'Error: '
                         || l_log_err_msg
                        );
                  END IF;
               ELSE
                  ---- Update the Party Details in Sites Staging table
                   --               UPDATE xxar_customer_site_stg
                   --                  SET cust_acct_site_use_id = l_site_use_id,
                   --                      process_flag = g_converted,
                   --                      ERROR_TYPE = NULL,
                   --                      last_updated_date = SYSDATE,
                   --                      last_updated_by = g_last_updated_by,
                   --                      last_update_login = g_last_update_login
                   --                WHERE 1 = 1
                   --                  AND interface_txn_id =
                   --                                        import_cust_sites_rec.interface_txn_id
                   --                  AND batch_id = g_batch_id;

                 IF import_cust_sites_rec.process_flag = 'C' THEN   -- Added v1.81 --
                  import_cust_sites_rec.process_flag := g_converted;
                  import_cust_sites_rec.ERROR_TYPE := NULL;
                 END IF;  -- Added v1.81 --
                  import_cust_sites_rec.cust_acct_site_use_id :=
                                                                l_site_use_id;
                  debug_msg_p ('STEP:7.16',
                               'IMPORT_SITES_P',
                               'Creating Site Use Amounts'
                              );
                  fnd_file.put_line (fnd_file.LOG,'calling import_profile_amounts_p');
                  import_profile_amounts_p
                     (pov_ret_stats                => pov_ret_stats,
                      pov_err_msg                  => pov_err_msg,
                      pin_site_use_id              => l_site_use_id,
                      pin_leg_site_use_id          => import_cust_sites_rec.leg_site_use_id,
                      piv_leg_customer_number      => import_cust_sites_rec.leg_customer_number,
                      piv_source_system            => import_cust_sites_rec.leg_source_system,
                      pin_cust_account_id          => l_cust_account_id,
                      pin_party_id                 => import_cust_sites_rec.party_id
                     ,pin_org_id                   => import_cust_sites_rec.new_org_id      -- Added for v1.42
                     ,piv_attribute8               => import_cust_sites_rec.hcs_attribute8  -- Added for v1.81
                     );
               END IF;

             -- ELSE condition added for v1.70
             ELSE
                  import_cust_sites_rec.process_flag := 'E';
                  import_cust_sites_rec.ERROR_TYPE := g_imp_err_type;
                  fnd_file.put_line (fnd_file.LOG,'SHIP_TO Site Creation Failed');

                  g_failed_count := g_failed_count + 1;
                  l_status := g_error;
                  source_rec.interface_staging_id := import_cust_sites_rec.interface_txn_id;
                  source_rec.source_column_name   := 'LEG_SITE_USE_CODE';
                  source_rec.error_type           := g_imp_err_type;
                  source_rec.source_column_value  := import_cust_sites_rec.leg_bill_to_site_use_id;
                  source_rec.error_code           := import_cust_sites_rec.leg_site_use_code;
                  source_rec.error_message        := 'For this SHIP_TO/SOLD_TO Site, corresponding linked BILL_TO site usage is not been Created in R12.';

                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

             END IF;      -- END IF l_ship_to_flag = 'Y'
             -- Changes end for v1.70
			 
			--v1.95 start
			ELSE 
				  import_cust_sites_rec.process_flag := 'E';
                  import_cust_sites_rec.ERROR_TYPE := g_imp_err_type;
                  fnd_file.put_line (fnd_file.LOG,'Site USe Creation Stopped');

                  g_failed_count := g_failed_count + 1;
                  l_status := g_error;
                  source_rec.interface_staging_id := import_cust_sites_rec.interface_txn_id;
                  source_rec.source_column_name   := 'LEG_SITE_USE_CODE';
                  source_rec.error_type           := g_imp_err_type;
                  source_rec.source_column_value  := import_cust_sites_rec.leg_bill_to_site_use_id;
                  source_rec.error_code           := import_cust_sites_rec.leg_site_use_code;
                  source_rec.error_message        := 'Error exists for current leg_site_use_id record in profile table.';

                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

			END IF;  --IF l_site_prof_error = 0      v1.95 end

            ELSE
               import_cust_sites_rec.process_flag := g_converted;
               import_cust_sites_rec.ERROR_TYPE := NULL;
               l_site_use_id := import_cust_sites_rec.cust_acct_site_use_id;
               fnd_file.put_line (fnd_file.LOG, 'calling import_profile_amounts_p 2');
               import_profile_amounts_p
                  (pov_ret_stats                => pov_ret_stats,
                   pov_err_msg                  => pov_err_msg,
                   pin_site_use_id              => import_cust_sites_rec.cust_acct_site_use_id,
                   pin_leg_site_use_id          => import_cust_sites_rec.leg_site_use_id,
                   piv_leg_customer_number      => import_cust_sites_rec.leg_customer_number,
                   piv_source_system            => import_cust_sites_rec.leg_source_system,
                   pin_cust_account_id          => l_cust_account_id,
                   pin_party_id                 => import_cust_sites_rec.party_id
                  ,pin_org_id                   => import_cust_sites_rec.new_org_id      -- Added for v1.42
                  ,piv_attribute8               => import_cust_sites_rec.hcs_attribute8  -- Added for v1.81
                  );
               debug_msg_p ('STEP:7.18',
                            'IMPORT_SITES_P',
                               'Data Created Successfully for '
                            || import_cust_sites_rec.interface_txn_id
                           );
            --            UPDATE xxar_customer_site_stg
            --               SET cust_acct_site_use_id = l_site_use_id,
            --                   process_flag = g_converted,
            --                   ERROR_TYPE = NULL,
            --                   last_updated_date = SYSDATE,
            --                   last_updated_by = g_last_updated_by,
            --                   last_update_login = g_last_update_login
            --             WHERE 1 = 1
            --               AND interface_txn_id = import_cust_sites_rec.interface_txn_id
            --               AND batch_id = g_batch_id;
            END IF;
         END IF;

		 -- Changes started for Defect# 9675 v1.84
		 IF UPPER(import_cust_sites_rec.hcs_attribute18) = UPPER('RIBA Enabled')
		     AND import_cust_sites_rec.leg_source_system = 'ISSC'
			 AND import_cust_sites_rec.leg_site_use_code = 'BILL_TO'
   		     AND import_cust_sites_rec.cust_acct_site_use_id IS NOT NULL
		 THEN

			BEGIN
			    l_receipt_method_id := NULL;
				l_cust_rec_met_id   := NULL;
			    SELECT DISTINCT arm.receipt_method_id
                  INTO l_receipt_method_id
                  FROM ar_receipt_methods arm,
                       ra_cust_trx_types_all rtta,
                       ar_receipt_classes arc
                 WHERE rtta.cust_trx_type_id = arm.br_cust_trx_type_id
                   AND rtta.org_id = import_cust_sites_rec.org_id
                   AND rtta.TYPE   = 'BR'
                   AND NVL (arm.end_date, SYSDATE) >= SYSDATE
                   AND arm.receipt_class_id = arc.receipt_class_id
                   AND UPPER(arc.name) = UPPER('RiBa Receipt Class');

				EXCEPTION
                   WHEN TOO_MANY_ROWS
                   THEN
                       l_receipt_method_id := NULL;
					   g_failed_count := g_failed_count + 1;
					   import_cust_sites_rec.process_flag := 'E';            -- Added for v1.89
					   import_cust_sites_rec.error_type := g_imp_err_type;   -- Added for v1.89
                       source_rec.interface_staging_id  := import_cust_sites_rec.interface_txn_id;
                       source_rec.source_column_name  := NULL;
                       source_rec.source_column_value := NULL;
                       source_rec.error_code := 'RIBA_PAY_MTHD_ERROR';
					   source_rec.error_type := g_imp_err_type;              -- Added for v1.89
                       source_rec.error_message := 'More than one Receipt method attached to Operating Unit: '||import_cust_sites_rec.operating_unit
					                                ||', Customer site use ID: '||import_cust_sites_rec.cust_acct_site_use_id;

                       log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                     pov_err_msg        => l_log_err_msg,
                                     pi_err_rec         => source_rec
                                    );

                   WHEN OTHERS
                   THEN
                       l_receipt_method_id := NULL;
					   g_failed_count := g_failed_count + 1;
					   import_cust_sites_rec.process_flag := 'E';            -- Added for v1.89
					   import_cust_sites_rec.error_type := g_imp_err_type;   -- Added for v1.89
                       source_rec.interface_staging_id := import_cust_sites_rec.interface_txn_id;
                       source_rec.source_column_name  := NULL;
                       source_rec.source_column_value := NULL;
                       source_rec.error_code := 'RIBA_PAY_MTHD_ERROR';
					   source_rec.error_type := g_imp_err_type;              -- Added for v1.89
                       source_rec.error_message := 'No Receipt method attached to Operating Unit: '||import_cust_sites_rec.operating_unit
					                                ||', Customer site use ID: '||import_cust_sites_rec.cust_acct_site_use_id;

                       log_errors_p (pov_ret_stats => l_log_ret_stats,
                                     pov_err_msg   => l_log_err_msg,
                                     pi_err_rec    => source_rec
                                    );
			END;

			-- verifying whether the payment method already attached to the customer or not.
			BEGIN
			    SELECT cust_receipt_method_id
                  INTO l_cust_rec_met_id
                  FROM ra_cust_receipt_methods
                 WHERE customer_id       = l_cust_account_id
                   AND site_use_id       = import_cust_sites_rec.cust_acct_site_use_id
                   AND receipt_method_id = l_receipt_method_id;

				EXCEPTION
				   WHEN OTHERS
				   THEN
				       fnd_file.put_line(fnd_file.LOG,'Creating Payment method..');

			END;

			IF l_receipt_method_id IS NOT NULL
			   AND l_cust_rec_met_id IS NULL
			THEN
			    l_pay_method_rec := l_pay_method_rec_null;

				l_pay_method_rec.cust_account_id := l_cust_account_id;
                l_pay_method_rec.receipt_method_id := l_receipt_method_id;
                l_pay_method_rec.primary_flag := 'Y';
                l_pay_method_rec.site_use_id := import_cust_sites_rec.cust_acct_site_use_id;
                l_pay_method_rec.start_date := '01-JAN-2000';
                l_pay_method_rec.end_date := NULL;

                hz_payment_method_pub.create_payment_method
                                                           (p_init_msg_list          => fnd_api.g_true,
                                                            p_payment_method_rec     => l_pay_method_rec,
                                                            x_cust_receipt_method_id => l_cust_receipt_method_id,
                                                            x_return_status          => l_return_status,
                                                            x_msg_count              => l_msg_count,
                                                            x_msg_data               => l_msg_data
                                                            );

                IF NVL (l_return_status, '-1') <> 'S'
                THEN
                   import_cust_sites_rec.process_flag := 'E';
                   import_cust_sites_rec.error_type := g_imp_err_type;

                   IF l_msg_count > 1
                   THEN
                      FOR i IN 1 .. (l_msg_count - 1)
                      LOOP
                         l_msg :=
                            apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                                  apps.fnd_api.g_false
                                                 );
                         l_msg_data := l_msg_data || '-' || l_msg;
                      END LOOP;
                   ELSE
                      l_msg_data :=
                         apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_first,
                                               apps.fnd_api.g_false
                                              );
                   END IF;

                   g_failed_count := g_failed_count + 1;
                   source_rec.interface_staging_id := import_cust_sites_rec.interface_txn_id;
                   source_rec.source_column_name := NULL;
                   source_rec.source_column_value := NULL;
                   source_rec.error_code := 'RIBA_PAY_MTHD_API_ERROR';
                   source_rec.error_message := l_msg_data;
				   source_rec.error_type    := g_imp_err_type;              -- Added for v1.89

                   log_errors_p (pov_ret_stats => l_log_ret_stats,
                                 pov_err_msg   => l_log_err_msg,
                                 pi_err_rec    => source_rec
                                );
                ELSE
			        import_cust_sites_rec.process_flag := g_converted;
                    import_cust_sites_rec.ERROR_TYPE := NULL;
		        END IF;
			END IF;  -- IF l_receipt_method_id IS NOT NULL
		 END IF;
		 -- Changes end for Defect# 9675 v1.84
		 
		 -- Changes started for CR# 408846 v1.87
		 IF UPPER(import_cust_sites_rec.hcs_attribute18) = UPPER('N58 Enabled')
		     AND import_cust_sites_rec.leg_source_system = 'ISSC'
			 AND import_cust_sites_rec.leg_site_use_code = 'BILL_TO'
   		     AND import_cust_sites_rec.cust_acct_site_use_id IS NOT NULL
		 THEN

			BEGIN
			    l_receipt_method_id := NULL;
				l_cust_rec_met_id   := NULL;
				SELECT DISTINCT arm.receipt_method_id
                  INTO l_receipt_method_id
                  FROM ar_receipt_methods arm,
                       ar_receipt_method_accounts_all armc,
                       ar_receipt_classes arc
                 WHERE armc.receipt_method_id = arm.receipt_method_id
                   AND NVL(arm.end_date, SYSDATE)  >= SYSDATE
                   AND NVL(armc.end_date, SYSDATE) >= SYSDATE
                   AND armc.primary_flag = 'Y'
				   AND armc.org_id = import_cust_sites_rec.org_id
                   AND arm.receipt_class_id = arc.receipt_class_id
                   AND UPPER(arc.name) = UPPER('SEPA Receipt Class');

				EXCEPTION
                   WHEN TOO_MANY_ROWS
                   THEN
                       l_receipt_method_id := NULL;
					   g_failed_count := g_failed_count + 1;
					   import_cust_sites_rec.process_flag := 'E';            -- Added for v1.89
					   import_cust_sites_rec.error_type := g_imp_err_type;   -- Added for v1.89
                       source_rec.interface_staging_id := import_cust_sites_rec.interface_txn_id;
                       source_rec.source_column_name := NULL;
                       source_rec.source_column_value := NULL;
                       source_rec.error_code := 'SEPA_PAY_MTHD_ERROR';
					   source_rec.error_type := g_imp_err_type;              -- Added for v1.89
                       source_rec.error_message := 'More than one Receipt method attached to Operating Unit: '||import_cust_sites_rec.operating_unit
					                                ||', Customer site use ID: '||import_cust_sites_rec.cust_acct_site_use_id;

                       log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                     pov_err_msg        => l_log_err_msg,
                                     pi_err_rec         => source_rec
                                    );

                   WHEN OTHERS
                   THEN
                       l_receipt_method_id := NULL;
					   g_failed_count := g_failed_count + 1;
					   import_cust_sites_rec.process_flag := 'E';            -- Added for v1.89
					   import_cust_sites_rec.error_type := g_imp_err_type;   -- Added for v1.89
                       source_rec.interface_staging_id := import_cust_sites_rec.interface_txn_id;
                       source_rec.source_column_name  := NULL;
                       source_rec.source_column_value := NULL;
                       source_rec.error_code := 'SEPA_PAY_MTHD_ERROR';
					   source_rec.error_type := g_imp_err_type;              -- Added for v1.89
                       source_rec.error_message := 'No Receipt method attached to Operating Unit: '||import_cust_sites_rec.operating_unit
					                                ||', Customer site use ID: '||import_cust_sites_rec.cust_acct_site_use_id;

                       log_errors_p (pov_ret_stats => l_log_ret_stats,
                                     pov_err_msg   => l_log_err_msg,
                                     pi_err_rec    => source_rec
                                    );
			END;

			-- verifying whether the payment method already attached to the customer or not.
			BEGIN
			    SELECT cust_receipt_method_id
                  INTO l_cust_rec_met_id
                  FROM ra_cust_receipt_methods
                 WHERE customer_id       = l_cust_account_id
                   AND site_use_id       = import_cust_sites_rec.cust_acct_site_use_id
                   AND receipt_method_id = l_receipt_method_id;

				EXCEPTION
				   WHEN OTHERS
				   THEN
				       fnd_file.put_line(fnd_file.LOG,'Creating SEPA Payment method..');

			END;

			IF l_receipt_method_id IS NOT NULL
			   AND l_cust_rec_met_id IS NULL
			THEN
			    l_pay_method_rec := l_pay_method_rec_null;

				l_pay_method_rec.cust_account_id := l_cust_account_id;
                l_pay_method_rec.receipt_method_id := l_receipt_method_id;
                l_pay_method_rec.primary_flag := 'Y';
                l_pay_method_rec.site_use_id := import_cust_sites_rec.cust_acct_site_use_id;
                l_pay_method_rec.start_date := '01-JAN-2000';
                l_pay_method_rec.end_date := NULL;

                hz_payment_method_pub.create_payment_method
                                                           (p_init_msg_list          => fnd_api.g_true,
                                                            p_payment_method_rec     => l_pay_method_rec,
                                                            x_cust_receipt_method_id => l_cust_receipt_method_id,
                                                            x_return_status          => l_return_status,
                                                            x_msg_count              => l_msg_count,
                                                            x_msg_data               => l_msg_data
                                                            );

                IF NVL (l_return_status, '-1') <> 'S'
                THEN
                   import_cust_sites_rec.process_flag := 'E';
                   import_cust_sites_rec.error_type   := g_imp_err_type;

                   IF l_msg_count > 1
                   THEN
                      FOR i IN 1 .. (l_msg_count - 1)
                      LOOP
                         l_msg :=
                            apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                                  apps.fnd_api.g_false
                                                 );
                         l_msg_data := l_msg_data || '-' || l_msg;
                      END LOOP;
                   ELSE
                      l_msg_data :=
                         apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_first,
                                               apps.fnd_api.g_false
                                              );
                   END IF;

                   g_failed_count := g_failed_count + 1;
                   source_rec.interface_staging_id := import_cust_sites_rec.interface_txn_id;
                   source_rec.source_column_name   := NULL;
                   source_rec.source_column_value  := NULL;
                   source_rec.error_code := 'SEPA_PAY_MTHD_API_ERROR';
                   source_rec.error_message := l_msg_data;
				   source_rec.error_type    := g_imp_err_type;              -- Added for v1.89

                   log_errors_p (pov_ret_stats => l_log_ret_stats,
                                 pov_err_msg   => l_log_err_msg,
                                 pi_err_rec    => source_rec
                                );
                ELSE
			        import_cust_sites_rec.process_flag := g_converted;
                    import_cust_sites_rec.ERROR_TYPE := NULL;
		        END IF;
			END IF;  -- IF l_receipt_method_id IS NOT NULL
		 END IF;
		 -- Changes end for CR# 408846 v1.87

         -- Update Staging Table
         fnd_file.put_line(fnd_file.LOG,'updating customer stg1..');
         UPDATE xxar_customer_site_stg
            SET party_site_id = import_cust_sites_rec.party_site_id,
                party_site_number = import_cust_sites_rec.party_site_number,
                cust_acct_site_use_id =
                                   import_cust_sites_rec.cust_acct_site_use_id,
                cust_acct_site_id = import_cust_sites_rec.cust_acct_site_id,
                location_id = import_cust_sites_rec.location_id,
                customer_number = l_cust_account_num,
                cust_account_id = l_cust_account_id,
                process_flag = import_cust_sites_rec.process_flag,
                ERROR_TYPE = import_cust_sites_rec.ERROR_TYPE,
                request_id = g_request_id,
                run_sequence_id = g_new_run_seq_id,
                last_updated_date = SYSDATE,
                last_updated_by = g_last_updated_by,
                last_update_login = g_last_update_login
          WHERE 1 = 1
            AND interface_txn_id = import_cust_sites_rec.interface_txn_id
            AND batch_id = g_batch_id;

            --Added for v1.67

            IF import_cust_sites_rec.process_flag = 'E' THEN
               UPDATE xxar_customer_prof_amnt_stg
                  SET process_flag = g_error,
                      ERROR_TYPE = import_cust_sites_rec.ERROR_TYPE,
                      request_id = g_request_id,
                      last_updated_date = SYSDATE,
                      last_updated_by = g_last_updated_by,
                      last_update_login = g_last_update_login
                WHERE 1 = 1
                  AND leg_site_use_id = import_cust_sites_rec.leg_site_use_id ;

            END IF;
            --Added for v1.67

         -- Update Customer Staging Table
         UPDATE xxar_customer_contact_stg
            SET customer_acct_site_id =
                                       import_cust_sites_rec.cust_acct_site_id,
                customer_site_number = l_party_site_number,
                cust_account_id = l_cust_account_id,
                last_updated_date = SYSDATE,
                last_updated_by = g_last_updated_by,
                last_update_login = g_last_update_login
          WHERE 1 = 1
            AND leg_customer_number =
                                     import_cust_sites_rec.leg_customer_number
            AND leg_site_number = import_cust_sites_rec.leg_party_site_number;

         -- END IF;

         -- Performing Batch Commit if Limit is reached
         IF l_count >= 100
         --g_limit -- Reducing limit due to the number of Txns in the entity
         THEN
            l_count := 0;
            debug_msg_p ('STEP:7.19',
                         'IMPORT_SITES_P',
                         'Performing Batch Commit'
                        );
            COMMIT;
         ELSE
            l_count := l_count + 1;
         END IF;

         --fnd_file.put_line(fnd_file.output,'COMMIT executed for ' || import_cust_sites_rec.interface_txn_id);        --    9*
         --COMMIT;            --    added 9*
      END LOOP;

      -- Below code added for Mock3 Defect# 4181 v1.71
      FOR cust_sites_rec IN cust_sites_cur
      LOOP
            l_cust_site_use_rec:=NULL; --    added for 1.80
            l_customer_profile_rec:=NULL;-- added for    1.80

          l_count := 0;
          BEGIN
              l_term_id := NULL;
              SELECT term_id
                INTO l_term_id
                FROM xxar_customer_prof_amnt_stg
               WHERE 1=1
                 AND leg_customer_number = cust_sites_rec.leg_customer_number
                 AND NVL(leg_site_use_id, -1) = NVL(cust_sites_rec.leg_site_use_id, -1)
                 AND leg_source_system = cust_sites_rec.leg_source_system
                 AND ROWNUM =1 ;

            EXCEPTION
             WHEN OTHERS
             THEN
                 l_term_id := NULL;
          END;

          BEGIN

             --Derive Site use code DRAWEE or LEGAL
             SELECT description
               INTO l_cust_site_use_rec.site_use_code
               FROM ar_lookups
              WHERE externally_visible_flag = cust_sites_rec.hcsu_attribute6
                AND lookup_type  = 'XXAR_PLANT_SITE_USE_CODE'
                AND enabled_flag = 'Y'
                AND TRUNC(SYSDATE) BETWEEN TRUNC(start_date_active) AND TRUNC(NVL(end_date_active,TRUNC(SYSDATE)));

             -- Check the DRAWEE/LEGAL Site uses already created or not
             SELECT COUNT(*)
               INTO l_count
               FROM hz_cust_acct_sites_all hcas,
                    hz_cust_site_uses_all  hcsu
              WHERE hcsu.cust_acct_site_id = hcas.cust_acct_site_id
                AND hcsu.location       = cust_sites_rec.leg_location
                AND NVL(hcas.org_id, 1) = NVL(cust_sites_rec.org_id, 1)
                AND hcsu.status = 'A'
                AND hcas.status = 'A'
                AND hcsu.site_use_code     = l_cust_site_use_rec.site_use_code
                AND hcsu.cust_acct_site_id = cust_sites_rec.cust_acct_site_id
                AND hcas.cust_account_id   = cust_sites_rec.cust_account_id;

             EXCEPTION
                WHEN OTHERS THEN
                   l_count := 1;
                   fnd_file.put_line (fnd_file.LOG,'DRAWEE/ LEGAL Site use ');
          END;

          IF l_count = 0 THEN

              FOR drw_rec IN
                        (SELECT DISTINCT hcas.cust_acct_site_id,
                                hcsu.primary_flag, hcsu.location,
                                hcsu.site_use_code,
                                hcsu.created_by_module,
                                hcsu.ship_via, hcsu.territory_id,
                                hcsu.gl_id_rec, hcsu.gl_id_rev,
                                hcsu.gl_id_tax, hcsu.gl_id_freight,
                                hcsu.gl_id_clearing,
                                hcsu.gl_id_unbilled,
                                hcsu.gl_id_unearned
                           FROM hz_cust_acct_sites_all hcas,
                                hz_cust_site_uses_all hcsu
                          WHERE hcsu.cust_acct_site_id = hcas.cust_acct_site_id
                            AND hcsu.location          = cust_sites_rec.leg_location
                            AND NVL(hcas.org_id, 1)    = NVL(cust_sites_rec.org_id, 1)
                            AND hcsu.status = 'A'
                            AND hcas.status = 'A'
                            AND hcsu.site_use_code = 'BILL_TO'
                            AND hcas.cust_account_id = cust_sites_rec.cust_account_id)
              LOOP

                   l_cust_site_use_rec.cust_acct_site_id := drw_rec.cust_acct_site_id;
                   l_cust_site_use_rec.primary_flag  := drw_rec.primary_flag;
                   l_cust_site_use_rec.location      := drw_rec.location;
                   l_cust_site_use_rec.payment_term_id   := l_term_id;
                   l_cust_site_use_rec.created_by_module := drw_rec.created_by_module;
                   l_cust_site_use_rec.ship_via     := drw_rec.ship_via;
                   l_cust_site_use_rec.territory_id := drw_rec.territory_id;
                   l_cust_site_use_rec.gl_id_rec := drw_rec.gl_id_rec;
                   l_cust_site_use_rec.gl_id_rev := drw_rec.gl_id_rev;
                   l_cust_site_use_rec.gl_id_tax := drw_rec.gl_id_tax;
                   l_cust_site_use_rec.gl_id_freight  := drw_rec.gl_id_freight;
                   l_cust_site_use_rec.gl_id_clearing := drw_rec.gl_id_clearing;
                   l_cust_site_use_rec.gl_id_unbilled := drw_rec.gl_id_unbilled;
                   l_cust_site_use_rec.gl_id_unearned := drw_rec.gl_id_unearned;

              END LOOP;  -- DRAWEE Sites end loop

              FOR site_profile_rec IN
                       (SELECT DISTINCT NVL(collector_id, 0) collector_id,
                               credit_checking, tolerance, discount_terms,
                               dunning_letters, interest_charges,
                               credit_balance_statements, credit_hold,
                               credit_rating, risk_code, override_terms,
                               dunning_letter_set_id, interest_period_days,
                               NVL(payment_grace_days,
                                    0) payment_grace_days,
                               discount_grace_days,
                               NVL(statement_cycle_id,
                                    0) statement_cycle_id, account_status,
                               percent_collectable, tax_printing_option,
                               charge_on_finance_charge_flag, clearing_days,
                               cons_inv_flag, cons_inv_type,
                               lockbox_matching_option,
                               credit_classification, created_by_module
                          FROM hz_customer_profiles
                         WHERE cust_account_id = cust_sites_rec.cust_account_id
                           AND site_use_id = cust_sites_rec.cust_acct_site_use_id
                           AND site_use_id IS NOT NULL)
                           --AND ROWNUM = 1)
              LOOP
                   l_customer_profile_rec.collector_id :=
                                           site_profile_rec.collector_id;
                   l_customer_profile_rec.credit_checking :=
                                           site_profile_rec.credit_checking;
                   l_customer_profile_rec.tolerance :=
                                           site_profile_rec.tolerance;
                   l_customer_profile_rec.discount_terms :=
                                           site_profile_rec.discount_terms;
                   l_customer_profile_rec.dunning_letters :=
                                           site_profile_rec.dunning_letters;
                   l_customer_profile_rec.interest_charges :=
                                           site_profile_rec.interest_charges;
                   l_customer_profile_rec.credit_balance_statements :=
                                           site_profile_rec.credit_balance_statements;
                   l_customer_profile_rec.credit_hold :=
                                           site_profile_rec.credit_hold;
                   l_customer_profile_rec.credit_rating :=
                                           site_profile_rec.credit_rating;
                   l_customer_profile_rec.risk_code :=
                                           site_profile_rec.risk_code;
                   l_customer_profile_rec.override_terms :=
                                           site_profile_rec.override_terms;
                   l_customer_profile_rec.interest_period_days :=
                                           site_profile_rec.interest_period_days;
                   l_customer_profile_rec.payment_grace_days :=
                                           site_profile_rec.payment_grace_days;
                   l_customer_profile_rec.discount_grace_days :=
                                           site_profile_rec.discount_grace_days;
                   l_customer_profile_rec.statement_cycle_id :=
                                           site_profile_rec.statement_cycle_id;
                   l_customer_profile_rec.send_statements := 'Y';
                   l_customer_profile_rec.account_status :=
                                           site_profile_rec.account_status;
                   l_customer_profile_rec.percent_collectable :=
                                           site_profile_rec.percent_collectable;
                   l_customer_profile_rec.tax_printing_option :=
                                           site_profile_rec.tax_printing_option;
                   l_customer_profile_rec.charge_on_finance_charge_flag :=
                                           site_profile_rec.charge_on_finance_charge_flag;
                   l_customer_profile_rec.clearing_days :=
                                           site_profile_rec.clearing_days;
                   l_customer_profile_rec.cons_inv_flag :=
                                           site_profile_rec.cons_inv_flag;
                   l_customer_profile_rec.cons_inv_type :=
                                           site_profile_rec.cons_inv_type;
                   l_customer_profile_rec.lockbox_matching_option :=
                                           site_profile_rec.lockbox_matching_option;
                   l_customer_profile_rec.credit_classification :=
                                           site_profile_rec.credit_classification;
                   l_customer_profile_rec.created_by_module :=
                                           site_profile_rec.created_by_module;
                   l_customer_profile_rec.cons_bill_level := NULL;

              END LOOP;  -- site_profile_rec end loop

                hz_cust_account_site_v2pub.create_cust_site_use
                                                      ('T',
                                                       l_cust_site_use_rec,
                                                       l_customer_profile_rec,
                                                       fnd_api.g_true,
                                                       fnd_api.g_false,
                                                       l_site_use_id,
                                                       l_return_status,
                                                       l_msg_count,
                                                       l_msg_data
                                                      );
                IF NVL (l_return_status, '-1') <> 'S'
                THEN
                   fnd_file.put_line (fnd_file.LOG,'DRAWEE/ LEGAL Site use Creation failed for Customer: '||cust_sites_rec.customer_number
                   ||' and cust account site id :'||l_cust_site_use_rec.cust_acct_site_id);

                   --- error msg
                   IF l_msg_count > 1
                   THEN
                      FOR i IN 1 .. (l_msg_count - 1)
                      LOOP
                         l_msg := apps.fnd_msg_pub.get(apps.fnd_msg_pub.g_next,
                                                       apps.fnd_api.g_false
                                                       );
                         l_msg_data := l_msg_data || '-' || l_msg;
                      END LOOP;
                   ELSE
                      l_msg_data := apps.fnd_msg_pub.get(apps.fnd_msg_pub.g_first,
                                                         apps.fnd_api.g_false
                                                         );
                   END IF;

                   debug_msg_p
                      ('STEP:7.26',
                       'IMPORT_SITES_P',
                          'Inside API Error for create customers acct site use DRAWEE/LEGAL: '
                       || cust_sites_rec.interface_txn_id
                       || ' Error-'
                       || l_msg_data
                      );

                   IF l_log_ret_stats <> 'S'
                   THEN
                      print_log_message_p
                         (   'Not able to Create Site Use DRAWEE/ LEGAL Record Using API '
                          || cust_sites_rec.interface_txn_id
                          || 'Error: '
                          || l_log_err_msg
                         );
                   END IF;

                   cust_sites_rec.process_flag := 'E';
                   cust_sites_rec.error_type   := g_imp_err_type;

                   source_rec.interface_staging_id := cust_sites_rec.interface_txn_id;
                   source_rec.source_column_name  := 'LEG_SITE_USE_CODE';
                   source_rec.source_column_value := cust_sites_rec.leg_site_use_code;
                   source_rec.error_code := 'DRAWEE/LEGAL_CREATION_ERROR';
                   source_rec.error_type := g_imp_err_type;
                   source_rec.error_message := l_msg_data;

                   log_errors_p (pov_ret_stats => l_log_ret_stats,
                                 pov_err_msg   => l_log_err_msg,
                                 pi_err_rec    => source_rec
                                );

                   UPDATE xxar_customer_site_stg
                      SET leg_process_flag = cust_sites_rec.process_flag, -- 1.80 added for
                          error_type = cust_sites_rec.error_type
                    WHERE interface_txn_id = cust_sites_rec.interface_txn_id;

                ELSE

                   UPDATE xxar_customer_site_stg
                      SET leg_process_flag = 'C', --1.80 added for
                          error_type   = NULL
                    WHERE interface_txn_id = cust_sites_rec.interface_txn_id;

                   debug_msg_p ('STEP:7.27',
                                'IMPORT_SITES_P',
                                'Creating DRAWEE/ LEGAL Site Use'
                               );
                  -- fnd_file.put_line(fnd_file.LOG, 'DRAWEE/ LEGAL Site Use created successfully..');

                END IF;

               -- If Batch Commit Limit is reached
               IF l_cnt1 >= g_limit
               THEN
                  l_cnt1 := 0;
                  debug_msg_p ('STEP:7.28',
                               'validate_sites_p',
                               'Performing Batch Commit'
                              );
                  COMMIT;
               ELSE
                  l_cnt1 := l_cnt1 + 1;
               END IF;

         ELSE
             fnd_file.put_line(fnd_file.LOG, 'DRAWEE/ LEGAL Site Use already created for site ID: '|| cust_sites_rec.cust_acct_site_id);
         END IF;

      END LOOP;      -- cust_sites_cur end loop
      -- Changes end Defect# 4181 v1.71

      FOR error_cust_sites_rec IN error_cust_sites_cur
      LOOP
         fnd_file.put_line(fnd_file.LOG,'updating customer stg 15883');
         UPDATE xxar_customer_site_stg
            SET process_flag = 'E',
                ERROR_TYPE = 'VAL_ERR',
                run_sequence_id = g_new_run_seq_id,
                request_id = g_request_id,
                last_updated_date = SYSDATE,
                last_updated_by = g_last_updated_by,
                last_update_login = g_last_update_login
          WHERE 1 = 1
            AND interface_txn_id = error_cust_sites_rec.interface_txn_id
            -- AND process_flag = g_validated
            AND batch_id = g_batch_id;

         debug_msg_p ('STEP:7.19',
                      'IMPORT_SITES_P',
                         'Account Site was not Imported for record  '
                      || error_cust_sites_rec.interface_txn_id
                      || ' Error-'
                      || 'Party Does not exist'
                     );
         g_failed_count := g_failed_count + 1;
         l_status := g_error;
         source_rec.interface_staging_id :=
                                         error_cust_sites_rec.interface_txn_id;
         source_rec.source_column_name := NULL;
         source_rec.source_column_value := NULL;
         source_rec.ERROR_CODE := 'PARTY_NOT_FOUND';
         source_rec.error_message := 'Party Does not exist';
         log_errors_p (pov_ret_stats      => l_log_ret_stats,
                       pov_err_msg        => l_log_err_msg,
                       pi_err_rec         => source_rec
                      );
      END LOOP;

      -- Insert remaining errors into Error Table
      IF g_source_tab.COUNT > 0
      THEN
         debug_msg_p ('STEP:7.20',
                      'IMPORT_SITES_P',
                      'Error Table Type Count: ' || g_source_tab.COUNT
                     );
         debug_msg_p ('STEP:7.21',
                      'IMPORT_SITES_P',
                      'Logging Remaining Errors in Error table'
                     );
         g_err_cnt := 1;
         xxetn_common_error_pkg.add_error
                                        (pov_return_status      => l_log_ret_stats,
                                         pov_error_msg          => l_log_err_msg,
                                         pi_source_tab          => g_source_tab
                                        );

         IF l_log_ret_stats <> 'S'
         THEN
            pov_ret_stats := 'E';
            print_log_message_p
               (   'Not able to insert error details in Common Error Table: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;

         -- Flushing PLSQL Table
         g_source_tab.DELETE;
      END IF;

      debug_msg_p ('STEP:7.22',
                   'IMPORT_SITES_P',
                   'Performing Commit for API after Loop Ends'
                  );
      COMMIT;
      debug_msg_p ('STEP:7.23',
                   'IMPORT_SITES_P',
                   'Processed Records during Import: ' || g_total_count
                  );
      debug_msg_p ('STEP:7.24',
                   'IMPORT_SITES_P',
                   'Failed Records during Import: ' || g_failed_count
                  );

      IF g_failed_count > 0
      THEN
         pov_ret_stats := 'E';
      -- Program must complete in Warning if any of Import fails
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         debug_msg_p ('STEP:7.25', 'IMPORT_SITES_P',
                      'When Others' || SQLERRM);
         pov_ret_stats := 'E';
         pov_err_msg :=
               'ERROR : XXAR_CUSTOMERS_PKG.IMPORT_SITES_P->WHEN_OTHERS->'
            || SQLERRM;
   END import_sites_p;

--
-- =============================================================================
-- Procedure: CREATE_PERSON_P
-- =============================================================================
-- This private procedure will create Customer Parties
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: MAIN_PROC_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters     :
--
--  Output Parameters    :
--  pov_ret_stats        : Returns Status
--  pov_err_msg          : Returns Error Message
--
--  Return               : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE create_person_p (
      pov_ret_stats              OUT NOCOPY      VARCHAR2,
      pov_err_msg                OUT NOCOPY      VARCHAR2,
      p_leg_person_fist_name     IN              VARCHAR2,
      p_leg_person_last_name     IN              VARCHAR2,
      p_leg_orig_sys_party_ref   IN              VARCHAR2,
      p_party_id                 OUT             NUMBER
   )
   IS
      -- Local Variables Declerations
      l_return_status          VARCHAR2 (10);
      l_msg_count              VARCHAR2 (100)                    DEFAULT NULL;
      l_msg_data               VARCHAR2 (2000)                   DEFAULT NULL;
      l_msg                    VARCHAR2 (1000);
      l_msg_index_out          NUMBER;
      l_data                   VARCHAR2 (2000)                   DEFAULT NULL;
      l_err_msg                VARCHAR2 (1000);
      l_count                  NUMBER                               DEFAULT 0;
      l_status                 xxar_customer_stg.process_flag%TYPE;
      l_idx                    NUMBER                                    := 0;
      l_wf_started             VARCHAR2 (1)                            := 'Y';
      l_log_ret_stats          VARCHAR2 (10);
      l_log_err_msg            VARCHAR2 (2000);
      l_new_party_id           NUMBER;
      l_party_number           VARCHAR2 (2000);
      --l_profile_id           NUMBER;
      l_cust_account_id        NUMBER;
      l_account_number         VARCHAR2 (2000);
      l_profile_id             NUMBER;
      -- Customer Records
      l_organization_rec       hz_party_v2pub.organization_rec_type;
      l_person_rec             hz_party_v2pub.person_rec_type;
      l_cust_account_rec       hz_cust_account_v2pub.cust_account_rec_type;
      l_customer_profile_rec   hz_customer_profile_v2pub.customer_profile_rec_type;
      -- Error Table Record Type
      source_rec               xxetn_common_error_pkg.g_source_rec_type;
   BEGIN
      pov_ret_stats := 'S';
      pov_err_msg := NULL;
      g_total_count := 0;
      g_failed_count := 0;
      debug_msg_p ('STEP:7.1',
                   'CREATE_PERSON_P',
                   'In Begin of Proc: CREATE_PERSON_P'
                  );
      --g_new_run_seq_id := xxetn_run_sequences_s.NEXTVAL;
      -- Intialize Run Sequence Id Only for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_batch_id;             -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;
                                                            -- run sequence id
      -- Intialize Common variables for Record Type
      source_rec.ERROR_TYPE := g_imp_err_type;
      debug_msg_p ('STEP:7.2',
                   'CREATE_PERSON_P',
                   'Run Sequence Id: ' || g_new_run_seq_id
                  );
      -- l_person_rec.party_rec.party_number :=  rec_conv_parties.customer_number;
      l_person_rec.person_first_name := p_leg_person_fist_name;
      l_person_rec.person_last_name := p_leg_person_last_name;
      /*  l_person_rec.person_title :=
           rec_conv_parties.HP_PER_title;*/
      l_person_rec.party_rec.status := 'A';
      l_person_rec.created_by_module := g_created_by_module;
      l_person_rec.party_rec.orig_system_reference := p_leg_orig_sys_party_ref;
      --Calling the API to create Person
      hz_party_v2pub.create_person ('T',
                                    l_person_rec,
                                    l_new_party_id,
                                    l_party_number,
                                    l_profile_id,
                                    l_return_status,
                                    l_msg_count,
                                    l_msg_data
                                   );

      IF NVL (l_return_status, '-1') <> 'S'
      THEN
         --- error msg
         IF l_msg_count > 1
         THEN
            FOR i IN 1 .. (l_msg_count - 1)
            LOOP
               l_msg :=
                  apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                        apps.fnd_api.g_false
                                       );
               l_msg_data := l_msg_data || '-' || l_msg;
            END LOOP;
         ELSE
            l_msg_data :=
               apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_first,
                                     apps.fnd_api.g_false
                                    );
         END IF;

         debug_msg_p ('STEP:7.3',
                      'CREATE_PERSON_P',
                         'Inside API Error for create customers: '
                      || ': Error - '
                      || l_msg_data
                     );
         g_failed_count := g_failed_count + 1;
         l_status := g_error;

--         source_rec.interface_staging_id :=
--                                         import_customers_rec.interface_txn_id;
--         source_rec.source_column_name := NULL;
--         source_rec.source_column_value := NULL;
--         source_rec.ERROR_CODE := 'CUST_API_ERROR';
--         source_rec.error_message := l_data;
--         log_errors_p (pov_ret_stats      => l_log_ret_stats,
--                       pov_err_msg        => l_log_err_msg,
--                       pi_err_rec         => source_rec
--                      );
         IF l_log_ret_stats <> 'S'
         THEN
            print_log_message_p
                          (   'Not able to Create Customer Record Using API '
                           || 'Error: '
                           || l_log_err_msg
                          );
         END IF;
      ELSE
         --- Write Back details of Party and Account in the Staging Table ---
         p_party_id := l_new_party_id;
         debug_msg_p ('STEP:7.4',
                      'CREATE_PERSON_P',
                      'New Person Created with Party ID' || l_new_party_id
                     );
      END IF;

      -- Insert remaining errors into Error Table
      IF g_source_tab.COUNT > 0
      THEN
         debug_msg_p ('STEP:7.5',
                      'CREATE_PERSON_P',
                      'Error Table Type Count: ' || g_source_tab.COUNT
                     );
         debug_msg_p ('STEP:7.6',
                      'CREATE_PERSON_P',
                      'Logging Remaining Errors in Error table'
                     );
         g_err_cnt := 1;
         xxetn_common_error_pkg.add_error
                                        (pov_return_status      => l_log_ret_stats,
                                         pov_error_msg          => l_log_err_msg,
                                         pi_source_tab          => g_source_tab
                                        );

         IF l_log_ret_stats <> 'S'
         THEN
            pov_ret_stats := 'E';
            print_log_message_p
               (   'Not able to insert error details in Common Error Table: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;

         -- Flushing PLSQL Table
         g_source_tab.DELETE;
      END IF;

      IF g_failed_count > 0
      THEN
         pov_ret_stats := 'E';
      -- Program must complete in Warning if any of Import fails
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         pov_ret_stats := 'E';
         pov_err_msg :=
               'ERROR : XXAR_CUSTOMERS_PKG.CREATE_PERSON_P->WHEN_OTHERS->'
            || SQLERRM;
   END create_person_p;

--
-- =============================================================================
-- Procedure: import_contact_points_p
-- =============================================================================
-- This private procedure will create Customer Contact Points and Roles
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: MAIN_PROC_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters     :
--
--  Output Parameters    :
--  pov_ret_stats        : Returns Status
--  pov_err_msg          : Returns Error Message
--
--  Return               : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE import_contact_points_p (
      pov_ret_stats   OUT NOCOPY   VARCHAR2,
      pov_err_msg     OUT NOCOPY   VARCHAR2
   )
   IS
      --l_return_status  VARCHAR2 (10);
      l_new_contact_point_id   NUMBER;
      l_return_status          VARCHAR2 (20);
      l_msg_count              NUMBER;
      l_msg_index_out          NUMBER;
      l_msg_data               VARCHAR2 (1000);
      l_created_flag           VARCHAR2 (1)                            := 'S';
      l_log_ret_stats          VARCHAR2 (10);
      l_count                  NUMBER;
      l_log_err_msg            VARCHAR2 (2000);
      l_data                   VARCHAR2 (2000);
      l_msg                    VARCHAR2 (2000);
      l_status                 VARCHAR2 (10);
      -- Error Table Record Type
      source_rec               xxetn_common_error_pkg.g_source_rec_type;
      l_contact_point_rec      hz_contact_point_v2pub.contact_point_rec_type;
      l_phone_rec              hz_contact_point_v2pub.phone_rec_type;
      l_email_rec              hz_contact_point_v2pub.email_rec_type;
      l_web_rec                hz_contact_point_v2pub.web_rec_type;
      l_telex_rec              hz_contact_point_v2pub.telex_rec_type;
      l_miss_edi_rec           hz_contact_point_v2pub.edi_rec_type;
      l_miss_email_rec         hz_contact_point_v2pub.email_rec_type;
      l_miss_phone_rec         hz_contact_point_v2pub.phone_rec_type;
      l_miss_telex_rec         hz_contact_point_v2pub.telex_rec_type;
      l_miss_web_rec           hz_contact_point_v2pub.web_rec_type;
      l_org_contact_rec        hz_party_contact_v2pub.org_contact_rec_type;
      l_org_acc_role_rec       hz_party_contact_v2pub.org_contact_role_rec_type;
      l_cust_acc_role_rec      hz_cust_account_role_v2pub.cust_account_role_rec_type;
      l_cust_account_role_id   NUMBER;
      l_out_party_id           NUMBER;
      l_party_id               NUMBER;
      l_party_number           VARCHAR2 (240);
      l_org_account_role_id    NUMBER;
      l_org_contact_id         NUMBER;
      l_party_rel_id           NUMBER;
      -- v1.52 Start Variables
      l_cust_acct_role_resp   hz_cust_account_role_v2pub.role_responsibility_rec_type;
      l_resp_id               NUMBER                                DEFAULT NULL;
      l_stmt_count            NUMBER                                DEFAULT NULL;
      l_duns_count            NUMBER                                DEFAULT NULL;
      -- v1.52 End

--------------
      CURSOR contact_point_cur
      IS
         SELECT *
           FROM xxar_customer_contact_stg xcss
          WHERE xcss.process_flag = g_validated
            AND xcss.batch_id = NVL (g_batch_id, xcss.batch_id)
            -- AND xcss.leg_contact_type IS NOT NULL
            AND leg_source_system = NVL (g_leg_src_sys, leg_source_system)
            AND leg_operating_unit = NVL (g_leg_ou, leg_operating_unit);
   BEGIN
      pov_ret_stats := 'S';
      pov_err_msg := NULL;
      g_total_count := 0;
      l_count := 0;
      g_failed_count := 0;
      debug_msg_p ('STEP:7.1',
                   'IMPORT_CONTACT_POINTS_P',
                   'In Begin of Proc: IMPORT_CONTACT_POINTS_P'
                  );
      g_new_run_seq_id := xxetn_run_sequences_s.NEXTVAL;
      -- Intialize Run Sequence Id Only for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_batch_id;             -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;
                                                            -- run sequence id
      -- Intialize Common variables for Record Type
      source_rec.ERROR_TYPE := g_imp_err_type;
      debug_msg_p ('STEP:7.2',
                   'IMPORT_CONTACT_POINTS_P',
                   'Run Sequence Id: ' || g_new_run_seq_id
                  );

      --- Open Cursor For Customers
      FOR contact_point_rec IN contact_point_cur
      LOOP
         debug_msg_p ('STEP:7.5',
                      'IMPORT_CONTACT_POINTS_P',
                         'Start Processing Contact Person record : '
                      || contact_point_rec.interface_txn_id
                     );

         l_miss_web_rec.web_type := NULL;  -- Added for v1.72
         l_miss_web_rec.url := NULL;       -- Added for v1.72

         -- Create Person contact
         IF (   contact_point_rec.leg_person_first_name IS NOT NULL
             OR contact_point_rec.leg_person_last_name IS NOT NULL
            )
         --AND contact_point_rec.org_cont_party_id IS NULL
         THEN
            BEGIN
               l_party_id := NULL;

               SELECT party_id
                 INTO l_party_id
                 FROM hz_parties
                WHERE UPPER ( NVL(person_first_name, 'X') ) =
                               UPPER ( NVL(contact_point_rec.leg_person_first_name, 'X') )
                  AND UPPER ( NVL( person_last_name, 'X')) =
                                UPPER ( NVL(contact_point_rec.leg_person_last_name, 'X'))
                  AND party_type = 'PERSON'
				  --AND orig_system_reference = contact_point_rec.leg_orig_sys_customer_ref||'-'||contact_point_rec.leg_orig_system_address_ref; -- Defect#9095 v1.85
				  AND orig_system_reference = contact_point_rec.leg_orig_sys_customer_ref||'-'||contact_point_rec.leg_orig_sys_contact_ref;    --changed for def#11767 Defect#9095 v1.85
            EXCEPTION
               WHEN OTHERS
               THEN
                  l_party_id := NULL;
            END;

            debug_msg_p ('STEP:7.5',
                         'IMPORT_CONTACT_POINTS_P',
                         'Checking if Party Exists  : ' || l_party_id
                        );

            IF l_party_id IS NULL
            THEN
				-- v1.85,Def#9095 change:  priviously p_leg_orig_sys_party_ref was passed as NULL, passing new value to make it unique for customer and customer site combination
				-- this will ensure unique party for each combination and solve contact multiplication issue.
               create_person_p
                  (pov_ret_stats              => pov_ret_stats,
                   pov_err_msg                => pov_err_msg,
                   p_leg_person_fist_name     => contact_point_rec.leg_person_first_name,
                   p_leg_person_last_name     => contact_point_rec.leg_person_last_name,
                   --p_leg_orig_sys_party_ref   => contact_point_rec.leg_orig_sys_customer_ref||'-'||contact_point_rec.leg_orig_system_address_ref,   --NULL,  Defect#9095 v1.85
				   p_leg_orig_sys_party_ref   => contact_point_rec.leg_orig_sys_customer_ref||'-'||contact_point_rec.leg_orig_sys_contact_ref, --changed for def#11767 --NULL, Defect#9095 v1.85
                   p_party_id                 => l_party_id
                  );
            END IF;
         END IF;

         debug_msg_p ('STEP:7.2',
                      'IMPORT_CONTACT_POINTS_P',
                         'Start Processing Contact record : '
                      || contact_point_rec.interface_txn_id
                     );
         contact_point_rec.process_flag := 'C';
         contact_point_rec.ERROR_TYPE := NULL;

         --contact_point_rec.contact_party_id;
         IF     l_party_id IS NOT NULL
            AND contact_point_rec.org_cont_party_id IS NULL
         THEN
            l_out_party_id := NULL;
            debug_msg_p ('STEP:7.5',
                         'IMPORT_CONTACT_POINTS_P',
                         'Create Relation Ships  : ' || l_party_id
                        );

            BEGIN
               SELECT party_id
                 INTO l_out_party_id
                 FROM hz_relationships
                WHERE subject_id = l_party_id
                  AND subject_type = 'PERSON'
                  AND subject_table_name = 'HZ_PARTIES'
                  AND object_id = contact_point_rec.contact_party_id
                  AND object_type = 'ORGANIZATION'
                  AND object_table_name = 'HZ_PARTIES'
                  AND relationship_code = 'CONTACT_OF'
                  AND relationship_type = 'CONTACT';
            EXCEPTION
               WHEN OTHERS
               THEN
                  l_out_party_id := NULL;
            END;

            IF l_out_party_id IS NULL
            THEN
               -- l_org_contact_rec.title := contact_point_rec.leg_title;
               l_org_contact_rec.job_title := contact_point_rec.leg_job_title;
               l_org_contact_rec.job_title_code :=
                                         contact_point_rec.leg_job_title_code;
               l_org_contact_rec.created_by_module := g_created_by_module;
               l_org_contact_rec.party_rel_rec.subject_id := l_party_id;
               l_org_contact_rec.party_rel_rec.subject_type := 'PERSON';
               l_org_contact_rec.party_rel_rec.subject_table_name :=
                                                                 'HZ_PARTIES';
               l_org_contact_rec.party_rel_rec.object_id :=
                                           contact_point_rec.contact_party_id;
               l_org_contact_rec.party_rel_rec.object_type := 'ORGANIZATION';
               l_org_contact_rec.party_rel_rec.object_table_name :=
                                                                 'HZ_PARTIES';
               l_org_contact_rec.party_rel_rec.relationship_code :=
                                                                 'CONTACT_OF';
               l_org_contact_rec.party_rel_rec.relationship_type := 'CONTACT';
               l_org_contact_rec.party_rel_rec.start_date := SYSDATE;
               l_org_contact_rec.created_by_module := g_created_by_module;
               hz_party_contact_v2pub.create_org_contact ('T',
                                                          l_org_contact_rec,
                                                          l_org_contact_id,
                                                          l_party_rel_id,
                                                          l_out_party_id,
                                                          l_party_number,
                                                          l_return_status,
                                                          l_msg_count,
                                                          l_msg_data
                                                         );

               --  END IF;
               IF NVL (l_return_status, '-1') <> 'S'
               THEN
                  --- updating the error records
                  UPDATE xxar_customer_contact_stg
                     SET process_flag = 'E',
                         ERROR_TYPE = g_imp_err_type,
                         request_id = g_request_id,
                         last_updated_date = SYSDATE,
                         last_updated_by = g_last_updated_by,
                         last_update_login = g_last_update_login
                   WHERE 1 = 1
                     AND interface_txn_id = contact_point_rec.interface_txn_id
                     AND batch_id = g_batch_id;

                  contact_point_rec.process_flag := 'E';
                  contact_point_rec.ERROR_TYPE := g_imp_err_type;

                  --- error msg
                  IF l_msg_count > 1
                  THEN
                     FOR i IN 1 .. (l_msg_count - 1)
                     LOOP
                        l_msg :=
                           apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                                 apps.fnd_api.g_false
                                                );
                        l_msg_data := l_msg_data || '-' || l_msg;
                     END LOOP;
                  ELSE
                     l_msg_data :=
                        apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_first,
                                              apps.fnd_api.g_false
                                             );
                  END IF;

                  debug_msg_p
                     ('STEP:7.3',
                      'IMPORT_CONTACT_POINTS_P',
                         'Inside API Error for create Org Contacts Relation : '
                      || contact_point_rec.interface_txn_id
                      || ' Error-'
                      || l_msg_data
                     );
                  g_failed_count := g_failed_count + 1;
                  l_status := g_error;
                  source_rec.interface_staging_id :=
                                            contact_point_rec.interface_txn_id;
                  source_rec.source_column_name := NULL;
                  source_rec.source_column_value := NULL;
                  source_rec.ERROR_CODE := 'CUST_API_ERROR';
                  source_rec.error_message := l_msg_data;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                          (   'Not able to Create Customer Record Using API '
                           || contact_point_rec.interface_txn_id
                           || 'Error: '
                           || l_log_err_msg
                          );
                  END IF;
               ELSE
                  --- Write Back details of Party and Account in the Staging Table ---
                  --- updating the error records
                  contact_point_rec.org_cont_party_id := l_out_party_id;
                  contact_point_rec.process_flag := g_converted;
                  contact_point_rec.ERROR_TYPE := NULL;
               END IF;
            END IF;

            contact_point_rec.org_cont_party_id := l_out_party_id;
            contact_point_rec.process_flag := g_converted;
            contact_point_rec.ERROR_TYPE := NULL;
         ELSE
            l_out_party_id := contact_point_rec.org_cont_party_id;
            contact_point_rec.process_flag := g_converted;
            contact_point_rec.ERROR_TYPE := NULL;
         END IF;
		 
		-- v1.88 Defect#11767 , Added below cursor to assign contact to all sites of customer
		FOR cust_site_rec IN ( SELECT xcss.party_site_id party_site_id, hcas.cust_acct_site_id  cust_acct_site_id
								 FROM xxar_customer_site_stg xcss, hz_cust_acct_sites_all hcas
								WHERE xcss.leg_orig_sys_cust_ref = contact_point_rec.leg_orig_sys_customer_ref
								  AND xcss.leg_party_site_number = contact_point_rec.leg_site_number
								  AND xcss.leg_source_system = contact_point_rec.leg_source_system
								  AND xcss.leg_operating_unit = contact_point_rec.leg_operating_unit
								  AND xcss.party_id  =  contact_point_rec.contact_party_id
								  AND xcss.cust_account_id  = contact_point_rec.cust_account_id
								  AND hcas.cust_account_id = xcss.cust_account_id
								  AND hcas.party_site_id = xcss.party_site_id    --v1.90, Defect-12620
								  AND xcss.process_flag = 'C')       	
	    LOOP  

         IF contact_point_rec.cust_account_role_id IS NULL
         THEN
            IF l_out_party_id IS NOT NULL
            THEN
               debug_msg_p ('STEP:7.5',
                            'IMPORT_CONTACT_POINTS_P',
                            'Create Account Role'
                           );

               BEGIN
                  l_cust_account_role_id := NULL;

                  SELECT cust_account_role_id
                    INTO l_cust_account_role_id
                    FROM hz_cust_account_roles
                   WHERE party_id = l_out_party_id
                     AND cust_acct_site_id =   cust_site_rec.cust_acct_site_id   -- v1.88 Defect#11767 Modified
                                       --contact_point_rec.customer_acct_site_id  -- v1.88 Defect#11767
                     AND cust_account_id = contact_point_rec.cust_account_id
                     AND role_type = 'CONTACT';
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     l_cust_account_role_id := NULL;
               END;

               IF l_cust_account_role_id IS NULL
               THEN
                  l_cust_acc_role_rec.party_id := l_out_party_id;
                  l_cust_acc_role_rec.cust_acct_site_id := cust_site_rec.cust_acct_site_id;  -- v1.88 Defect#11767, Modified
                                      --contact_point_rec.customer_acct_site_id;   -- v1.88 Defect#11767
                  l_cust_acc_role_rec.cust_account_id :=
                                            contact_point_rec.cust_account_id;
                  -- l_cust_acc_role_rec.primary_flag := 'Y';
                  l_cust_acc_role_rec.role_type := 'CONTACT';
                  l_cust_acc_role_rec.created_by_module :=
                                                          g_created_by_module;
                  ---Calling API
                  hz_cust_account_role_v2pub.create_cust_account_role
                                                     ('T',
                                                      l_cust_acc_role_rec,
                                                      l_cust_account_role_id,
                                                      l_return_status,
                                                      l_msg_count,
                                                      l_msg_data
                                                     );
               ELSE
                  l_return_status := 'S';
               END IF;

               IF NVL (l_return_status, '-1') <> 'S'
               THEN
                  --- updating the error records
                  UPDATE xxar_customer_contact_stg
                     SET process_flag = 'E',
                         ERROR_TYPE = g_imp_err_type,
                         run_sequence_id = g_new_run_seq_id,
                         request_id = g_request_id,
                         last_updated_date = SYSDATE,
                         last_updated_by = g_last_updated_by,
                         last_update_login = g_last_update_login
                   WHERE 1 = 1
                     AND interface_txn_id = contact_point_rec.interface_txn_id
                     AND batch_id = g_batch_id;

                  contact_point_rec.process_flag := 'E';
                  contact_point_rec.ERROR_TYPE := g_imp_err_type;

                  --- error msg
                  IF l_msg_count > 1
                  THEN
                     FOR i IN 1 .. (l_msg_count - 1)
                     LOOP
                        l_msg :=
                           apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                                 apps.fnd_api.g_false
                                                );
                        l_msg_data := l_msg_data || '-' || l_msg;
                     END LOOP;
                  ELSE
                     l_msg_data :=
                        apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_first,
                                              apps.fnd_api.g_false
                                             );
                  END IF;

                  debug_msg_p
                         ('STEP:7.3',
                          'IMPORT_CONTACT_POINTS_P',
                             'Inside API Error for create cust account role: '
                          || contact_point_rec.interface_txn_id
                          || ' Error-'
                          || l_msg_data
                         );
                  g_failed_count := g_failed_count + 1;
                  l_status := g_error;
                  source_rec.interface_staging_id :=
                                            contact_point_rec.interface_txn_id;
                  source_rec.source_column_name := NULL;
                  source_rec.source_column_value := NULL;
                  source_rec.ERROR_CODE := 'CUST_API_ERROR';
                  source_rec.error_message := l_msg_data;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                          (   'Not able to Create Customer Record Using API '
                           || contact_point_rec.interface_txn_id
                           || 'Error: '
                           || l_log_err_msg
                          );
                  END IF;
               ELSE
                  --- Write Back details of Party and Account in the Staging Table ---
                  --- updating the error records
                  --contact_point_rec.cust_account_role_id :=                        -- v1.88 Defect#11767  Commented
                  --                                     l_cust_account_role_id;     -- v1.88 Defect#11767  Commented
                  contact_point_rec.process_flag := g_converted;
                  contact_point_rec.ERROR_TYPE := NULL;
               END IF;
            END IF;
         END IF;


       -- IF contact_point_rec.cust_account_role_id IS NOT NULL           -- v1.88 Defect#11767  Commented
	    IF l_cust_account_role_id IS NOT NULL                     -- v1.88 Defect#11767  Added
        AND upper(trim(contact_point_rec.leg_mail_stop)) = 'STATEMENT'
        THEN

        -- l_cust_account_role_id := contact_point_rec.cust_account_role_id;   -- v1.88 Defect#11767  Commented

        -- Start -- v1.52 Added by Ankur for creating Contact Account Role Responsibilities --
           SELECT COUNT (DECODE (responsibility_type, 'STMTS', 1, 0)),
                  COUNT (DECODE (responsibility_type, 'DUN', 1, 0))
             INTO l_stmt_count,
                  l_duns_count
             FROM hz_role_responsibility
            WHERE cust_account_role_id = l_cust_account_role_id;

           IF l_stmt_count = 0
           THEN
              l_cust_acct_role_resp.cust_account_role_id := l_cust_account_role_id;
              l_cust_acct_role_resp.responsibility_type := 'STMTS';
              l_cust_acct_role_resp.primary_flag := 'N';
              l_cust_acct_role_resp.created_by_module := g_created_by_module;
              -- API to create Contact Role
              hz_cust_account_role_v2pub.create_role_responsibility
                            (p_init_msg_list                => fnd_api.g_true    -- IN
                            ,p_role_responsibility_rec      => l_cust_acct_role_resp  -- IN
                            ,x_responsibility_id            => l_resp_id        -- OUT
                            ,x_return_status                => l_return_status  -- OUT
                            ,x_msg_count                    => l_msg_count      -- OUT
                            ,x_msg_data                     => l_msg_data       -- OUT
                            );

                IF NVL( l_return_status , '-1') <> 'S' THEN
                  FOR i IN 1 .. (l_msg_count - 1)
                  LOOP
                    l_msg :=
                       apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                             apps.fnd_api.g_false
                                            );
                    l_msg_data := l_msg_data || '-' || l_msg;
                  END LOOP;

                  print_log_message_p
                      (   'Not able to Create Contact Responsibility Statement : '
                       || l_msg_data
                      );

                 END IF;
           END IF;

           IF l_duns_count = 0
           THEN
              l_cust_acct_role_resp.cust_account_role_id := l_cust_account_role_id;
              l_cust_acct_role_resp.responsibility_type := 'DUN';
              l_cust_acct_role_resp.primary_flag := 'N';
              l_cust_acct_role_resp.created_by_module := g_created_by_module;
              -- API to create Contact Role
              hz_cust_account_role_v2pub.create_role_responsibility
                            (p_init_msg_list                => fnd_api.g_true    -- IN
                            ,p_role_responsibility_rec      => l_cust_acct_role_resp  -- IN
                            ,x_responsibility_id            => l_resp_id        -- OUT
                            ,x_return_status                => l_return_status  -- OUT
                            ,x_msg_count                    => l_msg_count      -- OUT
                            ,x_msg_data                     => l_msg_data       -- OUT
                            );

                IF NVL( l_return_status , '-1') <> 'S' THEN
                  FOR i IN 1 .. (l_msg_count - 1)
                  LOOP
                    l_msg :=
                       apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                             apps.fnd_api.g_false
                                            );
                    l_msg_data := l_msg_data || '-' || l_msg;
                  END LOOP;

                  print_log_message_p
                      (   'Not able to Create Contact Responsibility Duns : '
                       || l_msg_data
                      );

                 END IF;

           END IF;

        END IF;
          -- End -- v1.52
		
		END LOOP; --cust_site_rec loop end  -- v1.88 Defect#11767  Added

         IF     contact_point_rec.contact_role_id IS NULL
            AND contact_point_rec.leg_contact_type IS NOT NULL
            AND l_out_party_id IS NOT NULL
         THEN
--            IF contact_point_rec.leg_site_number IS NOT NULL
--            THEN
--               l_contact_point_rec.owner_table_id :=
--                                           contact_point_rec.customer_site_id;
--               l_contact_point_rec.owner_table_name := 'HZ_PARTY_SITES';
--            ELSE
            l_contact_point_rec.owner_table_id := l_out_party_id;
--                                           contact_point_rec.contact_party_id;
            l_contact_point_rec.owner_table_name := 'HZ_PARTIES';
--            END IF;
            l_contact_point_rec.orig_system_reference :=
                                   contact_point_rec.leg_orig_sys_contact_ref;
            l_contact_point_rec.created_by_module := g_created_by_module;
            l_contact_point_rec.attribute_category :=
                                     contact_point_rec.hcp_attribute_category;
            l_contact_point_rec.attribute1 :=
                                             contact_point_rec.hcp_attribute1;
            l_contact_point_rec.attribute2 :=
                                             contact_point_rec.hcp_attribute2;
            l_contact_point_rec.attribute3 :=
                                             contact_point_rec.hcp_attribute3;
            l_contact_point_rec.attribute4 :=
                                             contact_point_rec.hcp_attribute4;
            l_contact_point_rec.attribute5 :=
                                             contact_point_rec.hcp_attribute5;
            l_contact_point_rec.attribute6 :=
                                             contact_point_rec.hcp_attribute6;
            l_contact_point_rec.attribute7 :=
                                             contact_point_rec.hcp_attribute7;
            l_contact_point_rec.attribute8 :=
                                             contact_point_rec.hcp_attribute8;
            l_contact_point_rec.attribute9 :=
                                             contact_point_rec.hcp_attribute9;
            l_contact_point_rec.attribute10 :=
                                            contact_point_rec.hcp_attribute10;
            l_contact_point_rec.attribute11 :=
                                            contact_point_rec.hcp_attribute11;
            l_contact_point_rec.attribute12 :=
                                            contact_point_rec.hcp_attribute12;
            l_contact_point_rec.attribute13 :=
                                            contact_point_rec.hcp_attribute13;
            l_contact_point_rec.attribute14 :=
                                            contact_point_rec.hcp_attribute14;
            l_contact_point_rec.attribute15 :=
                                            contact_point_rec.hcp_attribute15;
            l_contact_point_rec.status := 'A';
            l_contact_point_rec.contact_point_purpose :=
               NVL (contact_point_rec.leg_saluation,
                    contact_point_rec.leg_sex_code
                   );

            IF contact_point_rec.leg_contact_type = 'PHONE'
            THEN
               --FND_FILE.put_line (FND_FILE.LOG, 'at line 6569' || g_err_msg);
               --Call the API to create record for contact point of type PHONE
               l_contact_point_rec.contact_point_type :=
                                           contact_point_rec.leg_contact_type;
               ---
               l_phone_rec.phone_area_code :=
                                        contact_point_rec.leg_phone_area_code;
               l_phone_rec.phone_country_code :=
                                     contact_point_rec.leg_phone_country_code;
               l_phone_rec.phone_number := contact_point_rec.leg_phone_number;
               l_phone_rec.phone_extension :=
                                        contact_point_rec.leg_phone_extension;
               l_phone_rec.phone_line_type :=
                                        contact_point_rec.leg_phone_line_type;
               -- Create Phone Contact point
               hz_contact_point_v2pub.create_contact_point
                               (p_init_msg_list          => fnd_api.g_true,
                                p_contact_point_rec      => l_contact_point_rec,
                                p_edi_rec                => l_miss_edi_rec,
                                p_email_rec              => l_miss_email_rec,
                                p_phone_rec              => l_phone_rec,
                                p_telex_rec              => l_miss_telex_rec,
                                p_web_rec                => l_miss_web_rec,
                                x_contact_point_id       => l_new_contact_point_id,
                                x_return_status          => l_return_status,
                                x_msg_count              => l_msg_count,
                                x_msg_data               => l_msg_data
                               );
            ELSIF contact_point_rec.leg_contact_type = 'EMAIL'
            THEN
               --FND_FILE.put_line (FND_FILE.LOG, 'at line 6585' || g_err_msg);
               --Call the API to create record for contact point of type EMAIL
               l_contact_point_rec.contact_point_type :=
                                           contact_point_rec.leg_contact_type;
                  ---
               --l_email_rec.email_format  := ;
               l_email_rec.email_address :=
                                          contact_point_rec.leg_email_address;
               -- Call API to create Contact
               hz_contact_point_v2pub.create_contact_point
                               (p_init_msg_list          => fnd_api.g_true,
                                p_contact_point_rec      => l_contact_point_rec,
                                p_edi_rec                => l_miss_edi_rec,
                                p_email_rec              => l_email_rec,
                                p_phone_rec              => l_miss_phone_rec,
                                p_telex_rec              => l_miss_telex_rec,
                                p_web_rec                => l_miss_web_rec,
                                x_contact_point_id       => l_new_contact_point_id,
                                x_return_status          => l_return_status,
                                x_msg_count              => l_msg_count,
                                x_msg_data               => l_msg_data
                               );
            ELSIF contact_point_rec.leg_contact_type = 'WEB'
            THEN
               --FND_FILE.put_line (FND_FILE.LOG, 'at line 6585' || g_err_msg);
               --Call the API to create record for contact point of type EMAIL
               l_contact_point_rec.contact_point_type := contact_point_rec.leg_contact_type;

               l_web_rec.web_type := 'HTTP';                         -- Added for v1.72
               l_web_rec.url := contact_point_rec.leg_url;           -- Added for v1.72
               --
               l_web_rec.url := contact_point_rec.leg_url;
               hz_contact_point_v2pub.create_contact_point
                               (p_init_msg_list          => fnd_api.g_true,
                                p_contact_point_rec      => l_contact_point_rec,
                                p_edi_rec                => l_miss_edi_rec,
                                p_email_rec              => l_miss_email_rec,
                                p_phone_rec              => l_miss_phone_rec,
                                p_telex_rec              => l_miss_telex_rec, --l_telex_rec, v1.81 --
                                p_web_rec                => l_web_rec,
                                x_contact_point_id       => l_new_contact_point_id,
                                x_return_status          => l_return_status,
                                x_msg_count              => l_msg_count,
                                x_msg_data               => l_msg_data
                               );
            ELSIF contact_point_rec.leg_contact_type = 'TLX'
            THEN
               --FND_FILE.put_line (FND_FILE.LOG, 'at line 6585' || g_err_msg);
               --Call the API to create record for contact point of type EMAIL
               l_contact_point_rec.contact_point_type :=
                                           contact_point_rec.leg_contact_type;
               --
               l_telex_rec.telex_number := contact_point_rec.leg_telex_number;
               hz_contact_point_v2pub.create_contact_point
                               (p_init_msg_list          => fnd_api.g_true,
                                p_contact_point_rec      => l_contact_point_rec,
                                p_edi_rec                => l_miss_edi_rec,
                                p_email_rec              => l_miss_email_rec,
                                p_phone_rec              => l_miss_phone_rec,
                                p_telex_rec              => l_telex_rec, -- l_miss_telex_rec, -- v1.81
                                p_web_rec                => l_miss_web_rec,
                                x_contact_point_id       => l_new_contact_point_id,
                                x_return_status          => l_return_status,
                                x_msg_count              => l_msg_count,
                                x_msg_data               => l_msg_data
                               );
            ELSE
               --FND_FILE.put_line (FND_FILE.LOG, 'at line 6606' || g_err_msg);
               debug_msg_p ('STEP:7.3',
                            'IMPORT_CONTACT_POINTS_P',
                               'Invalid Contact Point Type Error '
                            || contact_point_rec.leg_contact_type
                           );
            END IF;

            IF NVL (l_return_status, '-1') <> 'S'
            THEN
               --- updating the error records
               UPDATE xxar_customer_contact_stg
                  SET process_flag = 'E',
                      ERROR_TYPE = g_imp_err_type,
                      run_sequence_id = g_new_run_seq_id,
                      request_id = g_request_id,
                      last_updated_date = SYSDATE,
                      last_updated_by = g_last_updated_by,
                      last_update_login = g_last_update_login
                WHERE 1 = 1
                  AND interface_txn_id = contact_point_rec.interface_txn_id
                  AND batch_id = g_batch_id;

               contact_point_rec.process_flag := 'E';
               contact_point_rec.ERROR_TYPE := g_imp_err_type;

               --   AND run_sequence_id = g_new_run_seq_id;

               --- error msg
               IF l_msg_count > 1
               THEN
                  FOR i IN 1 .. (l_msg_count - 1)
                  LOOP
                     l_msg :=
                        apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                              apps.fnd_api.g_false
                                             );
                     l_msg_data := l_msg_data || '-' || l_msg;
                  END LOOP;
               ELSE
                  l_msg_data :=
                     apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_first,
                                           apps.fnd_api.g_false
                                          );
               END IF;

               debug_msg_p
                         ('STEP:7.3',
                          'IMPORT_CONTACT_POINTS_P',
                             'Inside API Error for create customer Contacts: '
                          || contact_point_rec.interface_txn_id
                          || ' Error-'
                          || l_msg_data
                         );
               g_failed_count := g_failed_count + 1;
               l_status := g_error;
               source_rec.interface_staging_id :=
                                            contact_point_rec.interface_txn_id;
               source_rec.source_column_name := NULL;
               source_rec.source_column_value := NULL;
               source_rec.ERROR_CODE := 'CUST_API_ERROR';
               source_rec.error_message := l_msg_data;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                          (   'Not able to Create Customer Record Using API '
                           || contact_point_rec.interface_txn_id
                           || 'Error: '
                           || l_log_err_msg
                          );
               END IF;
            ELSE
               --- Write Back details of Party and Account in the Staging Table ---
               --- updating the error records
               contact_point_rec.contact_role_id := l_new_contact_point_id;
               contact_point_rec.process_flag := g_converted;
               contact_point_rec.ERROR_TYPE := NULL;
            END IF;
         ELSE
            l_new_contact_point_id := contact_point_rec.contact_role_id;
         END IF;

         -- END IF;
         UPDATE xxar_customer_contact_stg
            SET process_flag = contact_point_rec.process_flag,
                ERROR_TYPE = contact_point_rec.ERROR_TYPE,
                contact_role_id = contact_point_rec.contact_role_id,
                org_cont_party_id = contact_point_rec.org_cont_party_id,           -- v1.88 Defect#11767  Added
               -- cust_account_role_id = contact_point_rec.cust_account_role_id,    -- v1.88 Defect#11767  Commented
				cust_account_role_id = l_cust_account_role_id, 
                request_id = g_request_id,
                run_sequence_id = g_new_run_seq_id,
                last_updated_date = SYSDATE,
                last_updated_by = g_last_updated_by,
                last_update_login = g_last_update_login
          WHERE 1 = 1
            AND interface_txn_id = contact_point_rec.interface_txn_id
            AND batch_id = g_batch_id;

         -- Performing Batch Commit if Limit is reached
         IF l_count >= g_limit
         THEN
            l_count := 0;
            debug_msg_p ('STEP:7.4',
                         'IMPORT_CONTACT_POINTS_P',
                         'Performing Batch Commit'
                        );
            COMMIT;
         ELSE
            l_count := l_count + 1;
         END IF;
      --END IF;
      END LOOP;

      -- Insert remaining errors into Error Table
      IF g_source_tab.COUNT > 0
      THEN
         debug_msg_p ('STEP:7.5',
                      'IMPORT_CONTACT_POINTS_P',
                      'Error Table Type Count: ' || g_source_tab.COUNT
                     );
         debug_msg_p ('STEP:7.6',
                      'IMPORT_CONTACT_POINTS_P',
                      'Logging Remaining Errors in Error table'
                     );
         g_err_cnt := 1;
         xxetn_common_error_pkg.add_error
                                        (pov_return_status      => l_log_ret_stats,
                                         pov_error_msg          => l_log_err_msg,
                                         pi_source_tab          => g_source_tab
                                        );

         IF l_log_ret_stats <> 'S'
         THEN
            pov_ret_stats := 'E';
            print_log_message_p
               (   'Not able to insert error details in Common Error Table: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;

         -- Flushing PLSQL Table
         g_source_tab.DELETE;
      END IF;

      debug_msg_p ('STEP:7.7',
                   'IMPORT_CONTACT_POINTS_P',
                   'Performing Commit for API after Loop Ends'
                  );
      COMMIT;
      debug_msg_p ('STEP:7.8',
                   'IMPORT_CONTACT_POINTS_P',
                   'Processed Records during Import: ' || g_total_count
                  );
      debug_msg_p ('STEP:7.18',
                   'IMPORT_CONTACT_POINTS_P',
                   'Failed Records during Import: ' || g_failed_count
                  );

      IF g_failed_count > 0
      THEN
         pov_ret_stats := 'E';
      -- Program must complete in Warning if any of Import fails
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         pov_ret_stats := 'E';
         pov_err_msg :=
               'ERROR : XXAR_CUSTOMERS_PKG.IMPORT_CONTACT_POINTS_P->WHEN_OTHERS->'
            || SQLERRM;
   END import_contact_points_p;

--
-- =============================================================================
-- Procedure: import_org_contacts_p
-- =============================================================================
-- This private procedure will create Customer Contact Points and Roles
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: MAIN_PROC_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters     :
--
--  Output Parameters    :
--  pov_ret_stats        : Returns Status
--  pov_err_msg          : Returns Error Message
--
--  Return               : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE import_org_contacts_p (
      pov_ret_stats   OUT NOCOPY   VARCHAR2,
      pov_err_msg     OUT NOCOPY   VARCHAR2
   )
   IS
      --l_return_status  VARCHAR2 (10);
      l_new_contact_point_id   NUMBER;
      l_return_status          VARCHAR2 (20);
      l_msg_count              NUMBER;
      l_msg_index_out          NUMBER;
      l_msg_data               VARCHAR2 (1000);
      l_created_flag           VARCHAR2 (1)                            := 'S';
      l_log_ret_stats          VARCHAR2 (10);
      l_count                  NUMBER;
      l_log_err_msg            VARCHAR2 (2000);
      l_data                   VARCHAR2 (2000);
      l_msg                    VARCHAR2 (2000);
      l_status                 VARCHAR2 (10);
      l_subject_party_id       NUMBER;
      l_object_party_id        NUMBER;
      l_party_id               NUMBER;
      l_party_number           VARCHAR2 (240);
      -- Error Table Record Type
      source_rec               xxetn_common_error_pkg.g_source_rec_type;
      l_org_contact_rec        hz_party_contact_v2pub.org_contact_rec_type;
      l_org_acc_role_rec       hz_party_contact_v2pub.org_contact_role_rec_type;
      l_org_account_role_id    NUMBER;
      l_org_contact_id         NUMBER;
      l_party_rel_id           NUMBER;

--------------
      CURSOR contact_point_cur
      IS
         SELECT *
           FROM xxar_entity_relation_stg xcss
          WHERE xcss.process_flag = g_validated
            AND xcss.batch_id = NVL (g_batch_id, xcss.batch_id)
            AND leg_source_system = NVL (g_leg_src_sys, leg_source_system);
              --AND leg_operating_unit =   NVL (g_leg_ou, leg_operating_unit) ;
   --AND xcss.LEG_PARTY_TYPE = 'PERSON';
   BEGIN
      pov_ret_stats := 'S';
      pov_err_msg := NULL;
      g_total_count := 0;
      g_failed_count := 0;
      debug_msg_p ('STEP:7.1',
                   'IMPORT_CONTACT_POINTS_P',
                   'In Begin of Proc: IMPORT_ORG_CONTACTS_P'
                  );
      g_new_run_seq_id := xxetn_run_sequences_s.NEXTVAL;
      -- Intialize Run Sequence Id Only for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_batch_id;             -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;
                                                            -- run sequence id
      -- Intialize Common variables for Record Type
      source_rec.ERROR_TYPE := g_imp_err_type;
      debug_msg_p ('STEP:7.2',
                   'IMPORT_ORG_CONTACTS_P',
                   'Run Sequence Id: ' || g_new_run_seq_id
                  );

      --- Open Cursor For Customers
      FOR contact_point_rec IN contact_point_cur
      LOOP
         l_subject_party_id := NULL;
         l_object_party_id := NULL;
         debug_msg_p ('STEP:7.3',
                      'IMPORT_ORG_CONTACTS_P',
                         'Start Processing Contact record : '
                      || contact_point_rec.interface_txn_id
                     );

         -- Fetch details of Person
         BEGIN
            SELECT party_id
              INTO l_subject_party_id
              FROM hz_parties
             WHERE orig_system_reference =
                                  contact_point_rec.subject_orig_sys_party_ref
               AND party_type = contact_point_rec.hr_subject_type;
         EXCEPTION
            WHEN OTHERS
            THEN
               l_subject_party_id := NULL;
         END;

         IF l_subject_party_id IS NULL
         THEN
            debug_msg_p ('STEP:7.3.1',
                         'IMPORT_ORG_CONTACTS_P',
                         'Create Subject'
                        );
            create_person_p
               (pov_ret_stats                 => pov_ret_stats,
                pov_err_msg                   => pov_err_msg,
                p_leg_person_fist_name        => contact_point_rec.hr_sub_first_name,
                p_leg_person_last_name        => contact_point_rec.hr_sub_last_name,
                p_leg_orig_sys_party_ref      => contact_point_rec.subject_orig_sys_party_ref,
                p_party_id                    => l_subject_party_id
               );
         END IF;

         --- Fetch the details of Org
         BEGIN
            SELECT party_id
              INTO l_object_party_id
              FROM hz_parties
             WHERE orig_system_reference =
                                   contact_point_rec.object_orig_sys_party_ref
               AND party_type = contact_point_rec.hr_object_type;
         EXCEPTION
            WHEN OTHERS
            THEN
               l_object_party_id := NULL;
         END;

         --         IF l_object_party_id IS NULL
         --         THEN
         --                     debug_msg_p ('STEP:7.3.1',
         --                      'IMPORT_ORG_CONTACTS_P',
         --                         'Create Object'
         --                     );
         --            create_person_p
         --               (pov_ret_stats                 => pov_ret_stats,
         --                pov_err_msg                   => pov_err_msg,
         --                p_leg_person_fist_name        => contact_point_rec.hr_obj_first_name,
         --                p_leg_person_last_name        => contact_point_rec.hr_obj_last_name,
         --                p_leg_orig_sys_party_ref      => contact_point_rec.object_orig_sys_party_ref,
         --                p_party_id                    => l_object_party_id
         --               );
         --         END IF;
         IF (l_subject_party_id IS NOT NULL AND l_object_party_id IS NOT NULL
            )
         THEN
            l_org_contact_rec.title := contact_point_rec.leg_title;
            l_org_contact_rec.job_title := contact_point_rec.leg_job_title;
            -- l_org_contact_rec.decision_maker_flag := 'y';
            l_org_contact_rec.job_title_code :=
                                         contact_point_rec.leg_job_title_code;
            l_org_contact_rec.created_by_module := g_created_by_module;
            -- l_org_contact_rec.orig_system_reference := LEG_ORIG_SYS_CONTACT_REF
            l_org_contact_rec.party_rel_rec.subject_id := l_subject_party_id;
            l_org_contact_rec.party_rel_rec.subject_type :=
                                            contact_point_rec.hr_subject_type;
            l_org_contact_rec.party_rel_rec.subject_table_name :=
                                      contact_point_rec.hr_subject_table_name;
            l_org_contact_rec.party_rel_rec.object_id := l_object_party_id;
            l_org_contact_rec.party_rel_rec.object_type :=
                                             contact_point_rec.hr_object_type;
            l_org_contact_rec.party_rel_rec.object_table_name :=
                                       contact_point_rec.hr_object_table_name;
            l_org_contact_rec.party_rel_rec.relationship_code :=
                                       contact_point_rec.hr_relationship_code;
            l_org_contact_rec.party_rel_rec.relationship_type :=
                                       contact_point_rec.hr_relationship_type;
            l_org_contact_rec.party_rel_rec.start_date :=
                               NVL (contact_point_rec.hr_start_date, SYSDATE);
            l_org_contact_rec.created_by_module := g_created_by_module;
            hz_party_contact_v2pub.create_org_contact ('T',
                                                       l_org_contact_rec,
                                                       l_org_contact_id,
                                                       l_party_rel_id,
                                                       l_party_id,
                                                       l_party_number,
                                                       l_return_status,
                                                       l_msg_count,
                                                       l_msg_data
                                                      );

            IF l_org_contact_id IS NOT NULL
            THEN
               l_org_acc_role_rec.role_type := 'CONTACT';
               --l_org_acc_role_rec.primary_flag := 'Y';
               l_org_acc_role_rec.org_contact_id := l_org_contact_id;
               l_org_acc_role_rec.status := 'A';
               l_org_acc_role_rec.created_by_module := g_created_by_module;
               hz_party_contact_v2pub.create_org_contact_role
                             (p_init_msg_list             => fnd_api.g_true,
                              p_org_contact_role_rec      => l_org_acc_role_rec,
                              x_org_contact_role_id       => l_org_account_role_id,
                              x_return_status             => l_return_status,
                              x_msg_count                 => l_msg_count,
                              x_msg_data                  => l_msg_data
                             );
            END IF;

            IF NVL (l_return_status, '-1') <> 'S'
            THEN
               --- updating the error records
               UPDATE xxar_customer_contact_stg
                  SET process_flag = 'E',
                      ERROR_TYPE = g_imp_err_type,
                      run_sequence_id = g_new_run_seq_id,
                      request_id = g_request_id,
                      last_updated_date = SYSDATE,
                      last_updated_by = g_last_updated_by,
                      last_update_login = g_last_update_login
                WHERE 1 = 1
                  AND interface_txn_id = contact_point_rec.interface_txn_id
                  AND batch_id = g_batch_id;

               --   AND run_sequence_id = g_new_run_seq_id;

               --- error msg
               IF l_msg_count > 1
               THEN
                  FOR i IN 1 .. (l_msg_count - 1)
                  LOOP
                     l_msg :=
                        apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                              apps.fnd_api.g_false
                                             );
                     l_msg_data := l_msg_data || '-' || l_msg;
                  END LOOP;
               ELSE
                  l_msg_data :=
                     apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_first,
                                           apps.fnd_api.g_false
                                          );
               END IF;

               debug_msg_p
                         ('STEP:7.4',
                          'IMPORT_ORG_CONTACTS_P',
                             'Inside API Error for create customer Contacts: '
                          || contact_point_rec.interface_txn_id
                          || ' Error-'
                          || l_msg_data
                         );
               g_failed_count := g_failed_count + 1;
               l_status := g_error;
               source_rec.interface_staging_id :=
                                            contact_point_rec.interface_txn_id;
               source_rec.source_column_name := NULL;
               source_rec.source_column_value := NULL;
               source_rec.ERROR_CODE := 'CONTACT_API_ERROR';
               source_rec.error_message := l_msg_data;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                          (   'Not able to Create Customer Record Using API '
                           || contact_point_rec.interface_txn_id
                           || 'Error: '
                           || l_log_err_msg
                          );
               END IF;
            ELSE
               --- Write Back details of Party and Account in the Staging Table ---
               --- updating the error records
               UPDATE xxar_customer_contact_stg
                  SET process_flag = g_converted,
                      ERROR_TYPE = NULL,
                      run_sequence_id = g_new_run_seq_id,
                      request_id = g_request_id,
                      last_updated_date = SYSDATE,
                      last_updated_by = g_last_updated_by,
                      last_update_login = g_last_update_login
                WHERE 1 = 1
                  AND interface_txn_id = contact_point_rec.interface_txn_id
                  AND batch_id = g_batch_id;
            END IF;

            -- Performing Batch Commit if Limit is reached
            IF l_count >= g_limit
            THEN
               l_count := 0;
               debug_msg_p ('STEP:7.5',
                            'IMPORT_ORG_CONTACTS_P',
                            'Performing Batch Commit'
                           );
               COMMIT;
            ELSE
               l_count := l_count + 1;
            END IF;
         ELSE
            debug_msg_p
               ('STEP:7.6',
                'IMPORT_ORG_CONTACTS_P',
                   'Subect or Object Party doest not exists l_subject_party_id :'
                || l_subject_party_id
                || ' -l_Object_party_id :'
                || l_object_party_id
               );
         END IF;
      END LOOP;

      -- Insert remaining errors into Error Table
      IF g_source_tab.COUNT > 0
      THEN
         debug_msg_p ('STEP:7.7',
                      'IMPORT_ORG_CONTACTS_P',
                      'Error Table Type Count: ' || g_source_tab.COUNT
                     );
         debug_msg_p ('STEP:7.8',
                      'IMPORT_ORG_CONTACTS_P',
                      'Logging Remaining Errors in Error table'
                     );
         g_err_cnt := 1;
         xxetn_common_error_pkg.add_error
                                        (pov_return_status      => l_log_ret_stats,
                                         pov_error_msg          => l_log_err_msg,
                                         pi_source_tab          => g_source_tab
                                        );

         IF l_log_ret_stats <> 'S'
         THEN
            pov_ret_stats := 'E';
            print_log_message_p
               (   'Not able to insert error details in Common Error Table: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;

         -- Flushing PLSQL Table
         g_source_tab.DELETE;
      END IF;

      debug_msg_p ('STEP:7.9',
                   'IMPORT_ORG_CONTACTS_P',
                   'Performing Commit for API after Loop Ends'
                  );
      COMMIT;
      debug_msg_p ('STEP:7.10',
                   'IMPORT_ORG_CONTACTS_P',
                   'Processed Records during Import: ' || g_total_count
                  );
      debug_msg_p ('STEP:7.11',
                   'IMPORT_ORG_CONTACTS_P',
                   'Failed Records during Import: ' || g_failed_count
                  );

      IF g_failed_count > 0
      THEN
         pov_ret_stats := 'E';
      -- Program must complete in Warning if any of Import fails
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         pov_ret_stats := 'E';
         pov_err_msg :=
               'ERROR : XXAR_CUSTOMERS_PKG.IMPORT_ORG_CONTACTS_P->WHEN_OTHERS->'
            || SQLERRM;
   END import_org_contacts_p;

--
-- =============================================================================
-- Procedure: import_pay_method_p
-- =============================================================================
-- This private procedure will attach payment Method to the Customer Account Sites
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: MAIN_PROC_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters     :
--
--  Output Parameters    :
--  pov_ret_stats        : Returns Status
--  pov_err_msg          : Returns Error Message
--
--  Return               : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE import_pay_method_p (
      pov_ret_stats   OUT NOCOPY   VARCHAR2,
      pov_err_msg     OUT NOCOPY   VARCHAR2
   )
   IS
      --l_return_status  VARCHAR2 (10);
      l_receipt_method_id        NUMBER;
      l_cust_account_id          NUMBER;
      l_cust_acct_site_use_id    NUMBER;
      l_cust_receipt_method_id   NUMBER;
      l_return_status            VARCHAR2 (20);
      l_msg_count                NUMBER;
      l_msg_index_out            NUMBER;
      l_msg_data                 VARCHAR2 (1000);
      l_created_flag             VARCHAR2 (1)                          := 'S';
      l_log_ret_stats            VARCHAR2 (10);
      l_count                    NUMBER;
      l_log_err_msg              VARCHAR2 (2000);
      l_data                     VARCHAR2 (2000);
      l_msg                      VARCHAR2 (2000);
      l_status                   VARCHAR2 (10);
      -- Error Table Record Type
      source_rec                 xxetn_common_error_pkg.g_source_rec_type;
      l_pay_method_rec           hz_payment_method_pub.payment_method_rec_type;
      l_pay_method_rec_null      hz_payment_method_pub.payment_method_rec_type;

--------------
      CURSOR payment_method_cur
      IS
         SELECT *
           FROM xxar_cust_pay_method_stg xcpms
          WHERE xcpms.process_flag = g_validated
            AND xcpms.batch_id = NVL (g_batch_id, xcpms.batch_id)
            AND leg_source_system = NVL (g_leg_src_sys, leg_source_system);

      --AND leg_operating_unit =   NVL (g_leg_ou, leg_operating_unit) ;
      CURSOR customer_acct_cur (
         p_leg_customer_number   VARCHAR2,
         p_leg_source_system     VARCHAR2
      )
      IS
         SELECT DISTINCT xccs.cust_account_id
           FROM xxar_customer_site_stg xccs
          WHERE (    xccs.leg_customer_number = p_leg_customer_number
                 AND xccs.leg_source_system = p_leg_source_system
                 AND xccs.process_flag = 'C'
                );
   BEGIN
      pov_ret_stats := 'S';
      pov_err_msg := NULL;
      g_total_count := 0;
      g_failed_count := 0;
      l_count := 0;
      debug_msg_p ('STEP:7.1',
                   'IMPORT_PAY_METHOD_P',
                   'In Begin of Proc: IMPORT_PAY_METHOD_P'
                  );
      g_new_run_seq_id := xxetn_run_sequences_s.NEXTVAL;
      -- Intialize Run Sequence Id Only for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_batch_id;             -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;
                                                            -- run sequence id
      -- Intialize Common variables for Record Type
      source_rec.ERROR_TYPE := g_imp_err_type;
      debug_msg_p ('STEP:7.2',
                   'IMPORT_PAY_METHOD_P',
                   'Run Sequence Id: ' || g_new_run_seq_id
                  );

      --- Open Cursor For payment Methods
      FOR payment_method_rec IN payment_method_cur
      LOOP
         debug_msg_p ('STEP:7.2',
                      'IMPORT_PAY_METHOD_P',
                         'Start Processing Pay Method record : '
                      || payment_method_rec.interface_txn_id
                     );
         source_rec.interface_staging_id :=
                                           payment_method_rec.interface_txn_id;

        -- reset Record Type v1.56
        l_pay_method_rec :=   l_pay_method_rec_null;

         BEGIN
         -- Commented for version v1.56
            /*SELECT receipt_method_id
              INTO l_receipt_method_id
              FROM ar_receipt_methods
             WHERE NAME = payment_method_rec.leg_pay_method_name
               AND SYSDATE BETWEEN (NVL (start_date, SYSDATE - 1))
                               AND (NVL (end_date, SYSDATE + 1)); */

            -- Start for version v1.56

           SELECT arm.receipt_method_id
             INTO l_receipt_method_id
             FROM fnd_lookup_values flv, ar_receipt_methods arm
            WHERE lookup_type = 'XXAR_CUST_CNV_PAY_METH_MAP'
              AND UPPER (flv.description) = UPPER (arm.NAME)
              AND enabled_flag = 'Y'
              AND UPPER (flv.meaning) = upper(payment_method_rec.leg_pay_method_name)
              AND TRUNC (SYSDATE) BETWEEN NVL (start_date_active, SYSDATE - 1)
                                      AND NVL (end_date_active, SYSDATE + 1)
              AND LANGUAGE = USERENV ('LANG')
              AND SYSDATE BETWEEN (NVL (arm.start_date, SYSDATE - 1))
                              AND (NVL (arm.end_date, SYSDATE + 1));
            -- End for version v1.56
         EXCEPTION
            WHEN OTHERS
            THEN
               l_status := g_error;
               pov_ret_stats := g_error;
               pov_err_msg :=
                     'SQL Error occured while fetching Receipt Methods: '
                  || SQLERRM;
         END;

         --         BEGIN
         --            SELECT xcss.cust_account_id, xcss.cust_acct_site_use_id
         --              INTO l_cust_account_id, l_cust_acct_site_use_id
         --              FROM xxar_customer_site_stg xcss
         --             WHERE xcss.leg_customer_number =
         --                                        payment_method_rec.leg_customer_number
         --               AND xcss.leg_party_site_number =
         --                                            payment_method_rec.leg_site_number;
         --         EXCEPTION
         --            WHEN NO_DATA_FOUND
         --            THEN
         --               pov_ret_stats := g_error;
         --               pov_err_msg :=
         --                      'SQL Error occured while fetching Account: ' || SQLERRM;
         --            WHEN OTHERS
         --            THEN
         --               pov_ret_stats := g_error;
         --               pov_err_msg :=
         --                      'SQL Error occured while fetching Account: ' || SQLERRM;
         --         END;
         IF payment_method_rec.customer_site_use_id IS NOT NULL
         THEN
            debug_msg_p ('STEP:7.2',
                         'IMPORT_PAY_METHOD_P',
                            'Payment Method is at Site Level : '
                         || payment_method_rec.interface_txn_id
                        );
            l_pay_method_rec.cust_account_id :=
                                            payment_method_rec.cust_account_id;
            l_pay_method_rec.receipt_method_id := l_receipt_method_id;
            l_pay_method_rec.primary_flag :=
                                           payment_method_rec.leg_primary_flag;
            --l_pay_method_rec.site_use_id := l_cust_acct_site_use_id;                 -- Commented for Mock2 Defect# 1997 v1.18 on 29-Jun-2015
            l_pay_method_rec.site_use_id := payment_method_rec.customer_site_use_id;   -- Added for Mock2 Defect# 1997 v1.18 on 29-Jun-2015
            l_pay_method_rec.start_date := NVL(payment_method_rec.leg_start_date, SYSDATE);
            l_pay_method_rec.end_date := NULL;
            hz_payment_method_pub.create_payment_method
                        (p_init_msg_list               => fnd_api.g_true,
                         p_payment_method_rec          => l_pay_method_rec,
                         x_cust_receipt_method_id      => l_cust_receipt_method_id,
                         x_return_status               => l_return_status,
                         x_msg_count                   => l_msg_count,
                         x_msg_data                    => l_msg_data
                        );

            IF NVL (l_return_status, '-1') <> 'S'
            THEN
               --- updating the error records
               UPDATE xxar_cust_pay_method_stg
                  SET process_flag = 'E',
                      ERROR_TYPE = g_imp_err_type,
                      run_sequence_id = g_new_run_seq_id,
                      request_id = g_request_id,
                      last_updated_date = SYSDATE,
                      last_updated_by = g_last_updated_by,
                      last_update_login = g_last_update_login
                WHERE 1 = 1
                  AND interface_txn_id = payment_method_rec.interface_txn_id
                  AND batch_id = g_batch_id;

               --   AND run_sequence_id = g_new_run_seq_id;

               --- error msg
               IF l_msg_count > 1
               THEN
                  FOR i IN 1 .. (l_msg_count - 1)
                  LOOP
                     l_msg :=
                        apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                              apps.fnd_api.g_false
                                             );
                     l_msg_data := l_msg_data || '-' || l_msg;
                  END LOOP;
               ELSE
                  l_msg_data :=
                     apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_first,
                                           apps.fnd_api.g_false
                                          );
               END IF;

               debug_msg_p ('STEP:7.3',
                            'IMPORT_PAY_METHOD_P',
                               'Inside API Error for Payment Method: '
                            || payment_method_rec.interface_txn_id
                            || '- Error: '
                            || l_msg_data
                           );
               g_failed_count := g_failed_count + 1;
               l_status := g_error;
               source_rec.interface_staging_id :=
                                           payment_method_rec.interface_txn_id;
               source_rec.source_column_name := NULL;
               source_rec.source_column_value := NULL;
               source_rec.ERROR_CODE := 'PAY_API_ERROR1';
               source_rec.error_message := l_msg_data;
               log_errors_p (pov_ret_stats      => l_log_ret_stats,
                             pov_err_msg        => l_log_err_msg,
                             pi_err_rec         => source_rec
                            );

               IF l_log_ret_stats <> 'S'
               THEN
                  print_log_message_p
                          (   'Not able to Create Customer Record Using API '
                           || payment_method_rec.interface_txn_id
                           || 'Error: '
                           || l_log_err_msg
                          );
               END IF;
            ELSE
               --- Write Back details of Party and Account in the Staging Table ---
               --- updating the error records
               UPDATE xxar_cust_pay_method_stg
                  SET process_flag = g_converted,
                      ERROR_TYPE = NULL,
                      run_sequence_id = g_new_run_seq_id,
                      request_id = g_request_id,
                      last_updated_date = SYSDATE,
                      last_updated_by = g_last_updated_by,
                      last_update_login = g_last_update_login
                WHERE 1 = 1
                  AND interface_txn_id = payment_method_rec.interface_txn_id
                  AND batch_id = g_batch_id;
            END IF;
         ELSE
            FOR customer_acct_rec IN
               customer_acct_cur (payment_method_rec.leg_customer_number,
                                  payment_method_rec.leg_source_system
                                 )
            LOOP
               debug_msg_p
                         ('STEP:7.2',
                          'IMPORT_PAY_METHOD_P',
                             'Payment Method is at Customer Account Level : '
                          || payment_method_rec.interface_txn_id
                         );
               l_pay_method_rec.cust_account_id :=
                                             customer_acct_rec.cust_account_id;
               l_pay_method_rec.receipt_method_id := l_receipt_method_id;
               l_pay_method_rec.site_use_id := NULL; -- Added for V1.56
               l_pay_method_rec.primary_flag :=
                                           payment_method_rec.leg_primary_flag;
               l_pay_method_rec.start_date := NVL(payment_method_rec.leg_start_date, SYSDATE);
               l_pay_method_rec.end_date := NULL;
               hz_payment_method_pub.create_payment_method
                        (p_init_msg_list               => fnd_api.g_true,
                         p_payment_method_rec          => l_pay_method_rec,
                         x_cust_receipt_method_id      => l_cust_receipt_method_id,
                         x_return_status               => l_return_status,
                         x_msg_count                   => l_msg_count,
                         x_msg_data                    => l_msg_data
                        );

               IF NVL (l_return_status, '-1') <> 'S'
               THEN
                  --- updating the error records
                  UPDATE xxar_cust_pay_method_stg
                     SET process_flag = 'E',
                         ERROR_TYPE = g_imp_err_type,
                         run_sequence_id = g_new_run_seq_id,
                         request_id = g_request_id,
                         last_updated_date = SYSDATE,
                         last_updated_by = g_last_updated_by,
                         last_update_login = g_last_update_login
                   WHERE 1 = 1
                     AND interface_txn_id =
                                           payment_method_rec.interface_txn_id
                     AND batch_id = g_batch_id;

                  --   AND run_sequence_id = g_new_run_seq_id;

                  --- error msg
                  IF l_msg_count > 1
                  THEN
                     FOR i IN 1 .. (l_msg_count - 1)
                     LOOP
                        l_msg :=
                           apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                                 apps.fnd_api.g_false
                                                );
                        l_msg_data := l_msg_data || '-' || l_msg;
                     END LOOP;
                  ELSE
                     l_msg_data :=
                        apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_first,
                                              apps.fnd_api.g_false
                                             );
                  END IF;

                  debug_msg_p ('STEP:7.3',
                               'IMPORT_PAY_METHOD_P',
                                  'Inside API Error for Payment Method: '
                               || payment_method_rec.interface_txn_id
                               || '- Error: '
                               || l_msg_data
                              );
                  g_failed_count := g_failed_count + 1;
                  l_status := g_error;
                  source_rec.interface_staging_id :=
                                           payment_method_rec.interface_txn_id;
                  source_rec.source_column_name := NULL;
                  source_rec.source_column_value := NULL;
                  source_rec.ERROR_CODE := 'PAY_API_ERROR2';
                  source_rec.error_message := l_msg_data;
                  log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                pov_err_msg        => l_log_err_msg,
                                pi_err_rec         => source_rec
                               );

                  IF l_log_ret_stats <> 'S'
                  THEN
                     print_log_message_p
                          (   'Not able to Create Customer Record Using API '
                           || payment_method_rec.interface_txn_id
                           || 'Error: '
                           || l_log_err_msg
                          );
                  END IF;
               ELSE
                  --- Write Back details of Party and Account in the Staging Table ---
                  --- updating the error records
                  UPDATE xxar_cust_pay_method_stg
                     SET process_flag = g_converted,
                         ERROR_TYPE = NULL,
                         run_sequence_id = g_new_run_seq_id,
                         request_id = g_request_id,
                         last_updated_date = SYSDATE,
                         last_updated_by = g_last_updated_by,
                         last_update_login = g_last_update_login
                   WHERE 1 = 1
                     AND interface_txn_id =
                                           payment_method_rec.interface_txn_id
                     AND batch_id = g_batch_id;
               END IF;
            END LOOP;
         END IF;

         -- Performing Batch Commit if Limit is reached
         IF l_count >= g_limit
         THEN
            l_count := 0;
            debug_msg_p ('STEP:7.4',
                         'IMPORT_PAY_METHOD_P',
                         'Performing Batch Commit'
                        );
            COMMIT;
         ELSE
            l_count := l_count + 1;
         END IF;
      --END IF;
      END LOOP;

      -- Insert remaining errors into Error Table
      IF g_source_tab.COUNT > 0
      THEN
         debug_msg_p ('STEP:7.5',
                      'IMPORT_PAY_METHOD_P',
                      'Error Table Type Count: ' || g_source_tab.COUNT
                     );
         debug_msg_p ('STEP:7.6',
                      'IMPORT_PAY_METHOD_P',
                      'Logging Remaining Errors in Error table'
                     );
         g_err_cnt := 1;
         xxetn_common_error_pkg.add_error
                                        (pov_return_status      => l_log_ret_stats,
                                         pov_error_msg          => l_log_err_msg,
                                         pi_source_tab          => g_source_tab
                                        );

         IF l_log_ret_stats <> 'S'
         THEN
            pov_ret_stats := 'E';
            print_log_message_p
               (   'Not able to insert error details in Common Error Table: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;

         -- Flushing PLSQL Table
         g_source_tab.DELETE;
      END IF;

      debug_msg_p ('STEP:7.7',
                   'IMPORT_PAY_METHOD_P',
                   'Performing Commit for API after Loop Ends'
                  );
      COMMIT;
      debug_msg_p ('STEP:7.8',
                   'IMPORT_PAY_METHOD_P',
                   'Processed Records during Import: ' || g_total_count
                  );
      debug_msg_p ('STEP:7.18',
                   'IMPORT_PAY_METHOD_P',
                   'Failed Records during Import: ' || g_failed_count
                  );

      IF g_failed_count > 0
      THEN
         pov_ret_stats := 'E';
      -- Program must complete in Warning if any of Import fails
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         pov_ret_stats := 'E';
         pov_err_msg :=
               'ERROR : XXAR_CUSTOMERS_PKG.IMPORT_PAY_METHOD_P->WHEN_OTHERS->'
            || SQLERRM;
   END import_pay_method_p;

--
-- =============================================================================
-- Procedure: import_cust_relations_p
-- =============================================================================
-- This private procedure will create Customer Relationships
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: MAIN_PROC_P
-- -----------------------------------------------------------------------------
--
--  Input Parameters     :
--
--  Output Parameters    :
--  pov_ret_stats        : Returns Status
--  pov_err_msg          : Returns Error Message
--
--  Return               : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE import_cust_relations_p (
      pov_ret_stats   OUT NOCOPY   VARCHAR2,
      pov_err_msg     OUT NOCOPY   VARCHAR2
   )
   IS
      --l_return_status  VARCHAR2 (10);
      l_receipt_method_id        NUMBER;
      l_cust_account_id          NUMBER;
      l_cust_acct_site_use_id    NUMBER;
      l_cust_receipt_method_id   NUMBER;
      l_return_status            VARCHAR2 (20);
      l_msg_count                NUMBER;
      l_msg_index_out            NUMBER;
      l_msg_data                 VARCHAR2 (1000);
      l_created_flag             VARCHAR2 (1)                          := 'S';
      l_log_ret_stats            VARCHAR2 (10);
      --l_count                    NUMBER;                --  Off V1.14
      l_count                    NUMBER :=0 ;           --  Added V1.14
      l_log_err_msg              VARCHAR2 (2000);
      l_data                     VARCHAR2 (2000);
      l_msg                      VARCHAR2 (2000);
      l_status                   VARCHAR2 (10);
      l_parent_acct_flag         VARCHAR2 (1);
      l_child_acct_flag          VARCHAR2 (1);
      l_rel_count                NUMBER;
      -- Error Table Record Type
      source_rec                 xxetn_common_error_pkg.g_source_rec_type;
      l_cust_acct_relate_rec     hz_cust_account_v2pub.cust_acct_relate_rec_type;

--------------
      CURSOR cust_acct_relation_cur
      IS
         SELECT *
           FROM xxar_cust_acct_relation_stg xcpms
          WHERE xcpms.process_flag = g_validated
            AND xcpms.batch_id = NVL (g_batch_id, xcpms.batch_id)
            AND leg_source_system = NVL (g_leg_src_sys, leg_source_system);

      -- AND leg_operating_unit =   NVL (g_leg_ou, leg_operating_unit) ;

      ---------------
-- Cusror to fetch parent acct numbers
      CURSOR parent_cust_acct_cur
      (
       p_orig_sys_cust_ref VARCHAR2
      )
      IS
              /*  SELECT xccs.org_id, xccs.cust_account_id
                  FROM xxar_customer_site_stg xccs
                 WHERE (    xccs.leg_orig_sys_cust_ref = p_orig_sys_cust_ref
                        AND xccs.process_flag = 'C'
                       ); */
         -- Ankur
         -- This Change is done for 3PP and Credit Office related Customer Account Relation Ship Changes.
         -- Ankur
         SELECT DISTINCT hcas.org_id, hcas.cust_account_id
                    FROM xxar_customer_site_stg xccs,
                         hz_cust_acct_sites_all hcas
                   WHERE ( xccs.leg_orig_sys_cust_ref = p_orig_sys_cust_ref
                          AND xccs.process_flag = 'C'
                          AND hcas.cust_account_id = xccs.cust_account_id
                         );

      --         SELECT DISTINCT hcasa.org_id, hcasa.cust_account_id
      --                    FROM hz_cust_acct_sites_all hcasa
      --                   WHERE EXISTS (
      --                            SELECT 1
      --                              FROM hz_cust_accounts hca
      --                             WHERE (    (   (orig_system_reference LIKE
      --                                                   p_orig_sys_cust_ref || '-%'
      --                                            )
      --                                         OR (orig_system_reference =
      --                                                           p_orig_sys_cust_ref
      --                                            )
      --                                        )
      --                                    AND hca.cust_account_id =
      --                                                         hcasa.cust_account_id
      --                                   ));

      -- Cusror to fetch Child acct numbers -- Will be fetching the account only if any site exists for the
      -- account in the OU where the Parent Account has sites created --
      CURSOR child_cust_acct_cur (
         p_rel_orig_sys_cust_ref   VARCHAR2,
         p_org_id                  NUMBER
      )
      IS
--         SELECT xccs.cust_account_id
--           FROM xxar_customer_site_stg xccs
--          WHERE (    xccs.leg_orig_sys_cust_ref = p_orig_sys_cust_ref
--                 AND xccs.process_flag = 'C'
--                 AND xccs.org_id = p_org_id
--                );
    -- Ankur
    -- This Change is done for 3PP and Credit Office related Customer Account Relation Ship Changes.
    -- Ankur
         SELECT DISTINCT hcas.org_id, hcas.cust_account_id
                    FROM xxar_customer_site_stg xccs,
                         hz_cust_acct_sites_all hcas
                   WHERE (    xccs.leg_orig_sys_cust_ref =
                                                       p_rel_orig_sys_cust_ref
                          AND xccs.process_flag = 'C'
                          AND hcas.cust_account_id = xccs.cust_account_id
                          AND hcas.org_id = p_org_id
                         );
   --         SELECT DISTINCT hcasa.cust_account_id
   --                    FROM hz_cust_acct_sites_all hcasa
   --                   WHERE hcasa.org_id = p_org_id
   --                     AND EXISTS (
   --                            SELECT 1
   --                              FROM hz_cust_accounts hca
   --                             WHERE (    (   (orig_system_reference LIKE
   --                                                   p_orig_sys_cust_ref || '-%'
   --                                            )
   --                                         OR (orig_system_reference =
   --                                                           p_orig_sys_cust_ref
   --                                            )
   --                                        )
   --                                    AND hca.cust_account_id =
   --                                                         hcasa.cust_account_id
   --                                   ));
   BEGIN
      pov_ret_stats := 'S';
      pov_err_msg := NULL;
      g_total_count := 0;
      g_failed_count := 0;
     print_log_message_p('STEP:7.1' ||
                   'IMPORT_CUST_RELATIONS_P' ||
                   'In Begin of Proc: IMPORT_CUST_RELATIONS_P'
                  );
      g_new_run_seq_id := xxetn_run_sequences_s.NEXTVAL;
      -- Intialize Run Sequence Id Only for Error Framework
      xxetn_common_error_pkg.g_batch_id := g_batch_id;             -- batch id
      xxetn_common_error_pkg.g_run_seq_id := g_new_run_seq_id;
                                                            -- run sequence id
      -- Intialize Common variables for Record Type
      source_rec.ERROR_TYPE := g_imp_err_type;
      print_log_message_p ('STEP:7.2'||
                   'IMPORT_CUST_RELATIONS_P'||
                   'Run Sequence Id: ' || g_new_run_seq_id
                  );

      --- Open Cursor For payment Methods
      FOR cust_acct_relation_rec IN cust_acct_relation_cur
      LOOP
         print_log_message_p ('STEP:7.2'||
                      'IMPORT_CUST_RELATIONS_P'||
                         'Start Processing Contact record : '
                      || cust_acct_relation_rec.interface_txn_id
                     );
         l_parent_acct_flag := 'N';
         l_child_acct_flag := 'N';

         --fnd_file.put_line (FND_FILE.LOG, '*****************************************************************************');                  --  Added V1.15
         --fnd_file.put_line (FND_FILE.LOG, 'Creating for LEG_ORIG_SYS_CUST_REF: ' ||cust_acct_relation_rec.leg_orig_sys_cust_ref);             --  Added V1.15

         --  BEGIN
           -- Open Cursor for parent Record --
         FOR parent_cust_acct_rec IN
            parent_cust_acct_cur (cust_acct_relation_rec.leg_orig_sys_cust_ref
                                )
         LOOP
            l_parent_acct_flag := 'Y';
            print_log_message_p ('STEP:7.3'||
                         'IMPORT_CUST_RELATIONS_P'||
                         'Parent Account Exists'
                        );
            --fnd_file.put_line (FND_FILE.LOG, '..........................................................');                                                                  --  Added V1.15
            --fnd_file.put_line (FND_FILE.LOG, 'Parent Cursor:: CUST_ACCOUNT_ID/Org_ID: ' || parent_cust_acct_rec.cust_account_id || '/' || parent_cust_acct_rec.org_id);   --  Added V1.15

            -- Open Cursor for parent Record --
            FOR child_cust_acct_rec IN
               child_cust_acct_cur
                            (cust_acct_relation_rec.leg_rel_orig_sys_cust_ref,
                             parent_cust_acct_rec.org_id
                            )
            LOOP
               -- V1.14 comment out below line which initialize zero to l_count variable
               --l_count:=0; -- Added by Sanket as on 1-Jun-2015 as Customer Account Realtionship program is not getting completed Defect 1938
                             -- V1.14 previous initialize comment out
               l_child_acct_flag := 'Y';
               l_rel_count := 0;
               print_log_message_p ('STEP:7.3'||
                            'IMPORT_CUST_RELATIONS_P'||
                            'Child Account Exists'
                           );

               --V1.16 : Off the below query due to performance and allowing API to call for all VALID records
               --V1.62 Uncommenting starts - the code below--
               SELECT COUNT (1)
                 INTO l_rel_count
                 FROM hz_cust_acct_relate_all
                WHERE (   (    cust_account_id =
                                          parent_cust_acct_rec.cust_account_id
                           AND related_cust_account_id =
                                           child_cust_acct_rec.cust_account_id
                          )
                       OR (    cust_account_id =
                                           child_cust_acct_rec.cust_account_id
                           AND related_cust_account_id =
                                          parent_cust_acct_rec.cust_account_id
                          )
                      )
                  AND customer_reciprocal_flag =
                          cust_acct_relation_rec.hcar_customer_reciprocal_flag
                  AND bill_to_flag = cust_acct_relation_rec.hcar_bill_to_flag
                  AND ship_to_flag = cust_acct_relation_rec.hcar_ship_to_flag
                  AND org_id = parent_cust_acct_rec.org_id
                  AND status = 'A'; -- V1.62 -- Added for Performance

               --V1.62 uncommenting ends--
               --l_rel_count := 0;        --    Added V1.16 -- V1.63 Commenting
               IF l_rel_count = 0
               THEN
                  print_log_message_p ('STEP:7.4'||
                               'IMPORT_CUST_RELATIONS_P'||
                               'Creating Relation'
                              );

                  --fnd_file.put_line (FND_FILE.LOG, '.....Related Child : CUST_ACCOUNT_ID: ' || child_cust_acct_rec.cust_account_id);   --  Added V1.15

                  l_cust_acct_relate_rec.cust_account_id :=
                                          parent_cust_acct_rec.cust_account_id;
                  l_cust_acct_relate_rec.related_cust_account_id :=
                                           child_cust_acct_rec.cust_account_id;
                  l_cust_acct_relate_rec.relationship_type :=
                                 cust_acct_relation_rec.hcar_relationship_type;
                  l_cust_acct_relate_rec.created_by_module :=
                                                           g_created_by_module;
                  -- l_cust_acct_relate_rec.comments := 'test API';
                  l_cust_acct_relate_rec.customer_reciprocal_flag :=
                          cust_acct_relation_rec.hcar_customer_reciprocal_flag;
                  l_cust_acct_relate_rec.bill_to_flag :=
                                      cust_acct_relation_rec.hcar_bill_to_flag;
                  l_cust_acct_relate_rec.ship_to_flag :=
                                      cust_acct_relation_rec.hcar_ship_to_flag;
                  l_cust_acct_relate_rec.org_id := parent_cust_acct_rec.org_id;
                  --- Create relationship using API
                  l_return_status := null; -- Added for Version 1.38
                  hz_cust_account_v2pub.create_cust_acct_relate
                                                      ('T',
                                                       l_cust_acct_relate_rec,
                                                       l_return_status,
                                                       l_msg_count,
                                                       l_msg_data
                                                      );

                  IF NVL (l_return_status, '-1') <> 'S'
                  THEN
                     --- updating the error records
                     UPDATE xxar_cust_acct_relation_stg
                        SET process_flag = 'E',
                            run_sequence_id = g_new_run_seq_id,
                            ERROR_TYPE = g_imp_err_type,
                            request_id = g_request_id,
                            last_updated_date = SYSDATE,
                            last_updated_by = g_last_updated_by,
                            last_update_login = g_last_update_login
                      WHERE 1 = 1
                        AND interface_txn_id =
                                       cust_acct_relation_rec.interface_txn_id
                        AND batch_id = g_batch_id;

                     --   AND run_sequence_id = g_new_run_seq_id;

                     --- error msg
                     IF l_msg_count > 1
                     THEN
                        FOR i IN 1 .. (l_msg_count - 1)
                        LOOP
                           l_msg :=
                              apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_next,
                                                    apps.fnd_api.g_false
                                                   );
                           l_msg_data := l_msg_data || '-' || l_msg;
                        END LOOP;
                     ELSE
                        l_msg_data :=
                           apps.fnd_msg_pub.get (apps.fnd_msg_pub.g_first,
                                                 apps.fnd_api.g_false
                                                );
                     END IF;

                     print_log_message_p
                        ('STEP:7.3'||
                         'IMPORT_CUST_RELATIONS_P'||
                            'Inside API Error for Customer Account Relation API: '
                         || cust_acct_relation_rec.interface_txn_id
                         || '- error - '
                         || l_msg_data
                        );
                     g_failed_count := g_failed_count + 1;
                     l_status := g_error;
                     source_rec.interface_staging_id :=
                                       cust_acct_relation_rec.interface_txn_id;
                     source_rec.source_column_name := NULL;
                     source_rec.source_column_value := NULL;
                     source_rec.ERROR_CODE := 'CUST_API_ERROR';
                     source_rec.error_message := l_msg_data;
                     log_errors_p (pov_ret_stats      => l_log_ret_stats,
                                   pov_err_msg        => l_log_err_msg,
                                   pi_err_rec         => source_rec
                                  );

                     IF l_log_ret_stats <> 'S'
                     THEN
                        print_log_message_p
                           (   'Not able to Create Customer Record Using API '
                            || cust_acct_relation_rec.interface_txn_id
                            || 'Error: '
                            || l_log_err_msg
                           );
                     END IF;
                  ELSE
                     --- Write Back details of Party and Account in the Staging Table ---
                     --- updating the error records
                     UPDATE xxar_cust_acct_relation_stg
                        SET process_flag = 'C',
                            ERROR_TYPE = NULL,
                            run_sequence_id = g_new_run_seq_id,
                            request_id = g_request_id,
                            last_updated_date = SYSDATE,
                            last_updated_by = g_last_updated_by,
                            last_update_login = g_last_update_login
                      WHERE 1 = 1
                        AND interface_txn_id =
                                       cust_acct_relation_rec.interface_txn_id
                        AND batch_id = g_batch_id;
                  END IF;
               ELSE
                                 --- Write Back details of Party and Account in the Staging Table ---
                  --- updating the error records
                 print_log_message_p ('STEP:7.3'||
                               'IMPORT_CUST_RELATIONS_P'||
                               'Relation already exists'
                              );

                  UPDATE xxar_cust_acct_relation_stg
                     SET process_flag = 'C',
                         ERROR_TYPE = NULL,
                         run_sequence_id = g_new_run_seq_id,
                         request_id = g_request_id,
                         last_updated_date = SYSDATE,
                         last_updated_by = g_last_updated_by,
                         last_update_login = g_last_update_login
                   WHERE 1 = 1
                     AND interface_txn_id =
                                       cust_acct_relation_rec.interface_txn_id
                     AND batch_id = g_batch_id;
               END IF;

               -- Performing Batch Commit if Limit is reached
               IF l_count >= g_limit
               THEN
                  l_count := 0;
                  print_log_message_p ('STEP:7.4'||
                               'IMPORT_CUST_RELATIONS_P'||
                               'Performing Batch Commit'
                              );
                  COMMIT;
               ELSE
                  l_count := l_count + 1;
               END IF;
            END LOOP;
         END LOOP;

         IF (l_parent_acct_flag = 'N' OR l_child_acct_flag = 'N')
         THEN
            --- if either of this flag is N, this means eithet child or parent account was not created
            UPDATE xxar_cust_acct_relation_stg
               SET process_flag = 'E',
                   ERROR_TYPE = g_imp_err_type,
                   run_sequence_id = g_new_run_seq_id,
                   request_id = g_request_id,
                   last_updated_date = SYSDATE,
                   last_updated_by = g_last_updated_by,
                   last_update_login = g_last_update_login
             WHERE 1 = 1
               AND interface_txn_id = cust_acct_relation_rec.interface_txn_id
               AND batch_id = g_batch_id;

            source_rec.interface_staging_id :=
                                       cust_acct_relation_rec.interface_txn_id;
            source_rec.source_column_name := NULL;
            source_rec.source_column_value := NULL;
            source_rec.ERROR_CODE := 'CUST_API_ERROR';
            source_rec.error_message :=
                                --  'Parent Account or Child Account not Found'; -- Commented for v1.80
                                'Child account sites has a different operating unit than that of the related Parent Account sites'; -- v1.80
            log_errors_p (pov_ret_stats      => l_log_ret_stats,
                          pov_err_msg        => l_log_err_msg,
                          pi_err_rec         => source_rec
                         );

            IF l_log_ret_stats <> 'S'
            THEN
               print_log_message_p
                          (   'Not able to Create Customer Record Using API '
                           || cust_acct_relation_rec.interface_txn_id
                           || 'Error: '
                           || l_log_err_msg
                          );
            END IF;

            print_log_message_p
                          (   'Not able to Create Relationship '
                           || cust_acct_relation_rec.interface_txn_id
                           || 'Error: Parent or Child Customer account not found'
                          );
         END IF;
      END LOOP;

      -- Insert remaining errors into Error Table
      IF g_source_tab.COUNT > 0
      THEN
         debug_msg_p ('STEP:7.5',
                      'IMPORT_CUST_RELATIONS_P',
                      'Error Table Type Count: ' || g_source_tab.COUNT
                     );
         debug_msg_p ('STEP:7.6',
                      'IMPORT_CUST_RELATIONS_P',
                      'Logging Remaining Errors in Error table'
                     );
         g_err_cnt := 1;
         xxetn_common_error_pkg.add_error
                                        (pov_return_status      => l_log_ret_stats,
                                         pov_error_msg          => l_log_err_msg,
                                         pi_source_tab          => g_source_tab
                                        );

         IF l_log_ret_stats <> 'S'
         THEN
            pov_ret_stats := 'E';
            print_log_message_p
               (   'Not able to insert error details in Common Error Table: '
                || 'Error: '
                || l_log_err_msg
               );
         END IF;

         -- Flushing PLSQL Table
         g_source_tab.DELETE;
      END IF;

      print_log_message_p ('STEP:7.7'||
                   'IMPORT_CUST_RELATIONS_P'||
                   'Performing Commit for API after Loop Ends'
                  );
      COMMIT;
      print_log_message_p ('STEP:7.8'||
                   'IMPORT_CUST_RELATIONS_P'||
                   'Processed Records during Import: ' || g_total_count
                  );
      print_log_message_p ('STEP:7.18'||
                   'IMPORT_CUST_RELATIONS_P'||
                   'Failed Records during Import: ' || g_failed_count
                  );

      IF g_failed_count > 0
      THEN
         pov_ret_stats := 'E';
      -- Program must complete in Warning if any of Import fails
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         pov_ret_stats := 'E';
         pov_err_msg :=
               'ERROR : XXAR_CUSTOMERS_PKG.IMPORT_CUST_RELATIONS_P->WHEN_OTHERS->'
            || SQLERRM;
   END import_cust_relations_p;

-- =============================================================================
-- Procedure: main_proc_p
-- =============================================================================
--   This is main procedure invoked by 'Eaton Unify Customer Conversion Program'
--
--   This conversion program is used to convert Customer data deo the 11i systems ()
--   to the future Oracle 12 platform.
--   Attribute which needs to be converted are:
--
--   Customer Party
--   Customer Accounts
--   Customer Party Site
--   Customer Account Site
--   Customer Contact Points
--   Customer Banks
--
--
-- =============================================================================
--
-- -----------------------------------------------------------------------------
--  Called By: Concurrent Program 'Eaton Unify Customer Conversion Program'
-- -----------------------------------------------------------------------------
-- -----------------------------------------------------------------------------
--  Output Parameters :
--    pov_errbuff         : Standard output parameter with Return Message for concurrent program
--    pon_retcode         : Standard output parameter with Return Code for concurrent program
--
--
--  Input Parameters :
--   piv_run_mode         : Controls the program excution. PRE-VALIDATE,VALIDATE,CONVERSION,RECONCILE
--   pin_batch_id         : List all unique batches from staging table , this
--                          will be NULL for first Conversion Run.
--   piv_entity           : This parameter will give the details of the entity thtat will be converted
--                          based on pin_batch_id value
--   piv_leg_source_system: This will give the details of the source system, for which the data
--                          needs to be processed.
--
--  Return                : Not applicable
-- -----------------------------------------------------------------------------
   PROCEDURE main_proc_p (
      pov_errbuff             OUT      VARCHAR2,
      pon_retcode             OUT      NUMBER,
      piv_run_mode            IN       VARCHAR2,           -- Program Run Mode
      piv_dummy1              IN       VARCHAR2,
      piv_entity              IN       VARCHAR2,     -- Entity to be processed
      pin_batch_id            IN       NUMBER,             -- Program Batch Id
      piv_dummy               IN       VARCHAR2,
      piv_process_records     IN       VARCHAR2,    -- Records to be processed
      piv_leg_source_system   IN       VARCHAR2,         -- Records to Process
      piv_leg_ou              IN       VARCHAR2       -- Legacy Operating Unit
   )
   IS
      l_init_err            VARCHAR2 (200)  DEFAULT NULL;
      l_normal_excep        EXCEPTION;
      l_warn_excep          EXCEPTION;
      l_err_excep           EXCEPTION;
      l_new_cnt             NUMBER          DEFAULT 0;
      l_print_ret_stats     VARCHAR2 (1)    DEFAULT 'S';
      l_print_err_msg       VARCHAR2 (2000);
      l_pre_val_ret_stats   VARCHAR2 (1)    DEFAULT 'S';
      l_pre_val_err_msg     VARCHAR2 (2000);
      l_val_ret_stats       VARCHAR2 (1)    DEFAULT 'S';
      l_val_err_msg         VARCHAR2 (2000);
      l_imp_ret_stats       VARCHAR2 (1)    DEFAULT 'S';
      l_imp_err_msg         VARCHAR2 (2000);
      l_assign_ret_stats    VARCHAR2 (1)    DEFAULT 'S';
      l_assign_err_msg      VARCHAR2 (2000);
      l_load_ret_stats      VARCHAR2 (1)    DEFAULT 'S';
      l_load_err_msg        VARCHAR2 (2000);
      l_success_count       NUMBER;
      l_log_ret_stats       VARCHAR2 (10);
      l_log_err_msg         VARCHAR2 (240);
   BEGIN
      -- Print Concurrent Program Parameters
      print_log_message_p ('Program Parameters.....................');
      print_log_message_p ('---------------------------------------');
      print_log_message_p ('Run Mode            : ' || piv_run_mode);
      print_log_message_p ('Batch ID            : ' || pin_batch_id);
      print_log_message_p ('Process             : ' || piv_process_records);
      print_log_message_p ('Entity              : ' || piv_entity);
      print_log_message_p ('Legacy Source Sys   : ' || piv_leg_source_system);
      print_log_message_p ('Legacy OU           : ' || piv_leg_ou);
      print_log_message_p ('---------------------------------------');
      -- Initialize global variables with parameter values
      g_run_mode := piv_run_mode;
      g_batch_id := pin_batch_id;
      g_process_records := piv_process_records;
      g_leg_ou := piv_leg_ou;
      g_leg_src_sys := piv_leg_source_system;
      g_entity := piv_entity;
      /** Initialization of Debug Framework **/
      xxetn_debug_pkg.initialize_debug
                                     (pov_err_msg           => l_init_err,
                                      piv_program_name      => 'XXAR_CUSTOMER_PKG'
                                     );

      -- Error in Debug Initialization
      IF l_init_err IS NOT NULL
      THEN
         pov_errbuff :=
                       'Error in Debug Initialization. Error: ' || l_init_err;
         RAISE l_err_excep;
      END IF;

      debug_msg_p ('STEP:1', ' MAIN_PROC_P', 'In Begin of  MAIN_PROC_P');

      -- Run Mode is Load-Data
      IF g_run_mode = 'LOAD-DATA'
      THEN
         debug_msg_p ('STEP:2', 'MAIN_PROC_P', 'Inside Load-Data mode');
         load_data_p;
         print_stats_p;
      -- Run Mode is Pre-Validation
      ELSIF g_run_mode = 'PRE-VALIDATE'
      THEN
         debug_msg_p ('STEP:3', 'MAIN_PROC_P', 'Inside Pre-Validate Mode');
         -- Calling Pre-Validate Procedure
         pre_validate_p (pov_ret_stats      => l_pre_val_ret_stats,
                         pov_err_msg        => l_pre_val_err_msg
                        );
         fnd_file.put_line (fnd_file.output,
                            'Program Name : Eaton Customer Conversion Program'
                           );
         fnd_file.put_line (fnd_file.output,
                            'Request ID   : ' || TO_CHAR (g_request_id)
                           );
         fnd_file.put_line (fnd_file.output,
                               'Report Date  : '
                            || TO_CHAR (SYSDATE, 'DD-MON-RRRR HH24:MI:SS')
                           );
         fnd_file.put_line
            (fnd_file.output,
             '============================================================================================='
            );
         fnd_file.put_line (fnd_file.output, CHR (10));
         fnd_file.put_line (fnd_file.output, 'Parameters');
         fnd_file.put_line (fnd_file.output,
                            '---------------------------------------------'
                           );
         fnd_file.put_line (fnd_file.output,
                            'Run Mode            : ' || g_run_mode
                           );
         fnd_file.put_line (fnd_file.output,
                            'Batch ID            : ' || g_batch_id
                           );
         fnd_file.put_line (fnd_file.output,
                            'Process records     : ' || g_process_records
                           );
         fnd_file.put_line (fnd_file.output, CHR (10));
         fnd_file.put_line
            (fnd_file.output,
             '============================================================================================='
            );

         -- Pre-validation fails
         IF l_pre_val_ret_stats <> 'S'
         THEN
            fnd_file.put_line
               (fnd_file.output,
                'Pre-Validations for Customer Conversion failed with below errors:'
               );
            fnd_file.put_line (fnd_file.output,
                               'Error Message: ' || l_pre_val_err_msg
                              );
            fnd_file.put_line
               (fnd_file.output,
                '============================================================================================='
               );
            pov_errbuff :=
                        'Some or all of Pre-Validations failed for Customers.';
            RAISE l_warn_excep;
         ELSE
            fnd_file.put_line
               (fnd_file.output,
                'Pre-Validations for Customer Conversion completed successfully'
               );
            fnd_file.put_line
               (fnd_file.output,
                '============================================================================================='
               );
         END IF;
      -- Run Mode is Validation
      ELSIF piv_run_mode = 'VALIDATE'
      THEN
         debug_msg_p ('STEP:4', 'MAIN_PROC_P', 'Inside Validate Mode');

         IF g_batch_id IS NULL
         THEN
            g_new_rec := g_new;
            -- If New records exist for Batch Id Updation
            --            IF l_new_cnt > 0
            --            THEN
               -- Generate New Batch Id and Run Sequence Id
            g_new_batch_id := xxetn_batches_s.NEXTVAL;
            g_new_run_seq_id := xxetn_run_sequences_s.NEXTVAL;
            -- Assign Batch Id and Run Sequence Id to New Records
            assign_batch_id_p (pov_ret_stats      => l_assign_ret_stats,
                               pov_err_msg        => l_assign_err_msg
                              );

            IF l_assign_ret_stats <> 'S'
            THEN                            -- error in assign_batch_id_p proc
               pov_errbuff := l_assign_err_msg;
               RAISE l_err_excep;
            END IF;
           -- If NO New records exist for Batch Id Updation
         /*  ELSE
              debug_msg_p ('STEP:5', 'MAIN_PROC_P', 'Printing Stats Report');
              -- Print Stats in Report Output and Exit
              print_stats_p (pov_ret_stats             => l_print_ret_stats,
                             pov_err_msg               => l_print_err_msg,
                             pin_total_count           => 0,
                             pin_success_count         => 0,
                             pin_failed_count          => 0,
                             pin_failed_count_imp      => NULL
                            );

              IF l_print_ret_stats <> 'S'
              THEN                             -- error in print_stats_p proc
                 pov_errbuff := l_print_err_msg;
                 RAISE l_err_excep;
              END IF;

              -- Program ends normally
              RAISE l_normal_excep;
           END IF;*/
         ELSE                                     -- if g_batch_id is not NULL
            IF g_process_records = 'ALL'
            THEN
               g_new_rec := g_new;
               g_err_rec := g_error;
               g_val_rec := g_validated;
            ELSIF g_process_records = 'ERROR'
            THEN
               g_err_rec := g_error;
            ELSIF g_process_records = 'UNPROCESSED'
            THEN
               g_new_rec := g_new;
            END IF;
         END IF;

         IF piv_entity = g_customer
         THEN
            debug_msg_p ('STEP:6', 'MAIN_PROC_P', 'Validating CUSTOMERS');
            -- Call Validate Customers Procedure
            g_table_name := 'XXAR_CUSTOMER_STG';
            validate_customers_p (pov_ret_stats      => l_val_ret_stats,
                                  pov_err_msg        => l_val_err_msg
                                 );
            debug_msg_p ('STEP:6.1.1',
                         'MAIN_PROC_P',
                         'l_val_ret_stats: ' || l_val_ret_stats
                        );
            debug_msg_p ('STEP:6.1.2',
                         'MAIN_PROC_P',
                         'l_val_err_msg: ' || l_val_err_msg
                        );
            -- Print Stats Report
            print_stats_p;
         END IF;

         IF piv_entity = g_customer_site
         THEN
            -- Call Validate Customers Sites Procedure
            debug_msg_p ('STEP:7', 'MAIN_PROC_P',
                         'Validating CUSTOMERS SITE');
            g_table_name := 'XXAR_CUSTOMER_SITE_STG';
            validate_sites_p (pov_ret_stats      => l_val_ret_stats,
                              pov_err_msg        => l_val_err_msg
                             );
            debug_msg_p ('STEP:7.1.1',
                         'MAIN_PROC_P',
                         'l_val_ret_stats: ' || l_val_ret_stats
                        );
            debug_msg_p ('STEP:7.1.2',
                         'MAIN_PROC_P',
                         'l_val_err_msg: ' || l_val_err_msg
                        );
            -- Print Stats Report
            print_stats_p;
         END IF;

         IF piv_entity = g_customer_site
         THEN
            -- Call Validate Customers Sites Procedure
            debug_msg_p ('STEP:7',
                         'MAIN_PROC_P',
                         'Validating CUSTOMERS SITE PROFILE'
                        );
            g_table_name := 'XXAR_CUSTOMER_PROF_AMNT_STG';
            validate_site_profile_p (pov_ret_stats      => l_val_ret_stats,
                                     pov_err_msg        => l_val_err_msg
                                    );
            debug_msg_p ('STEP:7.1.1',
                         'MAIN_PROC_P',
                         'l_val_ret_stats: ' || l_val_ret_stats
                        );
            debug_msg_p ('STEP:7.1.2',
                         'MAIN_PROC_P',
                         'l_val_err_msg: ' || l_val_err_msg
                        );
            -- Print Stats Report
            print_stats_p;
         END IF;

         IF piv_entity = g_contact_point
         THEN
            -- Call Validate Customers Sites Procedure
            debug_msg_p ('STEP:7', 'MAIN_PROC_P',
                         'Validating Contact Points');
            g_table_name := 'XXAR_CUSTOMER_CONTACT_STG';
            validate_contacts_p (pov_ret_stats      => l_val_ret_stats,
                                 pov_err_msg        => l_val_err_msg
                                );
            debug_msg_p ('STEP:7.1.1',
                         'MAIN_PROC_P',
                         'l_val_ret_stats: ' || l_val_ret_stats
                        );
            debug_msg_p ('STEP:7.1.2',
                         'MAIN_PROC_P',
                         'l_val_err_msg: ' || l_val_err_msg
                        );
            -- Print Stats Report
            print_stats_p;
         END IF;

         IF piv_entity = g_relation
         THEN
            -- Call Validate Customers Sites Procedure
            debug_msg_p ('STEP:7', 'MAIN_PROC_P', 'Validating RELATION');
            -- g_table_name := 'XXAR_ENTITY_RELATION_STG';
            validate_relation_p (pov_ret_stats      => l_val_ret_stats,
                                 pov_err_msg        => l_val_err_msg
                                );
            debug_msg_p ('STEP:7.1.1',
                         'MAIN_PROC_P',
                         'l_val_ret_stats: ' || l_val_ret_stats
                        );
            debug_msg_p ('STEP:7.1.2',
                         'MAIN_PROC_P',
                         'l_val_err_msg: ' || l_val_err_msg
                        );
         END IF;

         debug_msg_p ('1', '1', '1');

         IF piv_entity = g_bank
         THEN
            debug_msg_p ('1', '1', '2');
            g_table_name := 'XXAR_CUSTOMER_BANKS_STG';
            validate_banks_p ();
            -- Print Stats Report
            print_stats_p;
         END IF;

         IF piv_entity = g_branch
         THEN
            g_table_name := 'XXAR_CUSTOMER_BRANCHES_STG';
            validate_branches_p ();
            -- Print Stats Report
            print_stats_p;
         END IF;

         IF piv_entity = g_account
         THEN
            g_table_name := 'XXAR_CUSTOMER_BANKACCNTS_STG';
            validate_bank_accounts_p ();
            -- Print Stats Report
            print_stats_p;
         END IF;

         IF piv_entity = g_pay_method
         THEN
            -- Call Validate Customers Sites Procedure
            debug_msg_p ('STEP:7', 'MAIN_PROC_P', 'Validating Pay Methods');
            g_table_name := 'XXAR_CUST_PAY_METHOD_STG';
            validate_pay_method_p (pov_ret_stats      => l_imp_ret_stats,
                                   pov_err_msg        => l_imp_err_msg
                                  );
            debug_msg_p ('STEP:7.1.1',
                         'MAIN_PROC_P',
                         'l_val_ret_stats: ' || l_val_ret_stats
                        );
            debug_msg_p ('STEP:7.1.2',
                         'MAIN_PROC_P',
                         'l_val_err_msg: ' || l_val_err_msg
                        );
         END IF;

         -- Print Stats Report
         print_stats_p;

         -- Insert remaining errors into Error Table
         IF g_source_tab.COUNT > 0
         THEN
            debug_msg_p ('STEP:7.5',
                         'MAIN_PROC_P',
                         'Error Table Type Count: ' || g_source_tab.COUNT
                        );
            debug_msg_p ('STEP:7.6',
                         'MAIN_PROC_P',
                         'Logging Remaining Errors in Error table'
                        );
            g_err_cnt := 1;
            xxetn_common_error_pkg.add_error
                                        (pov_return_status      => l_log_ret_stats,
                                         pov_error_msg          => l_log_err_msg,
                                         pi_source_tab          => g_source_tab
                                        );

            IF l_log_ret_stats <> 'S'
            THEN
               -- pov_ret_stats := 'E';
               print_log_message_p
                  (   'Not able to insert error details in Common Error Table: '
                   || 'Error: '
                   || l_log_err_msg
                  );
            END IF;

            -- Flushing PLSQL Table
            g_source_tab.DELETE;
         END IF;

         IF l_val_ret_stats <> 'S'
         THEN                                -- error in validate_notes_p proc
            pov_errbuff := l_val_err_msg;
            RAISE l_warn_excep;
         END IF;
      -- Run Mode is Conversion
      ELSIF g_run_mode = 'CONVERSION'
      THEN
         debug_msg_p ('STEP:7', 'MAIN_PROC_P', 'Inside Conversion Mode');

         IF g_batch_id IS NULL
         THEN
            pov_errbuff :=
               'ERROR: Please select a value for Batch Id Parameter when Run Mode is Conversion';
            RAISE l_err_excep;
         END IF;

         IF piv_entity = g_customer
         THEN
            debug_msg_p ('STEP:7.1',
                         'MAIN_PROC_P',
                         'Calling Import Customers Procedure'
                        );
            g_table_name := 'XXAR_CUSTOMER_STG';
            import_customers_p (pov_ret_stats      => l_imp_ret_stats,
                                pov_err_msg        => l_imp_err_msg
                               );
            -- Print Stats Report
            print_stats_p;
         END IF;

         IF piv_entity = g_customer_site
         THEN
            debug_msg_p ('STEP:7.3',
                         'MAIN_PROC_P',
                         'Calling Import Customer Sites Procedure'
                        );
            g_table_name := 'XXAR_CUSTOMER_SITE_STG';
            import_sites_p (pov_ret_stats      => l_imp_ret_stats,
                            pov_err_msg        => l_imp_err_msg
                           );
            -- Print Stats Report
            print_stats_p;
         END IF;

         IF piv_entity = g_contact_point
         THEN
            debug_msg_p ('STEP:7.4',
                         'MAIN_PROC_P',
                         'Calling Import Contact Points Procedure'
                        );
            g_table_name := 'XXAR_CUSTOMER_CONTACT_STG';
            import_contact_points_p (pov_ret_stats      => l_imp_ret_stats,
                                     pov_err_msg        => l_imp_err_msg
                                    );
            -- Print Stats Report
            print_stats_p;
         END IF;

         IF piv_entity = g_relation
         THEN
            debug_msg_p ('STEP:7.5',
                         'MAIN_PROC_P',
                         'Calling Import Relation Ships Procedure'
                        );
            g_table_name := 'XXAR_ENTITY_RELATION_STG';
            /* import_org_contacts_p (pov_ret_stats      => l_imp_ret_stats,
                                    pov_err_msg        => l_imp_err_msg
                                   );
             -- Print Stats Report
             print_stats_p; */
            g_table_name := 'XXAR_CUST_ACCT_RELATION_STG';
            import_cust_relations_p (pov_ret_stats      => l_imp_ret_stats,
                                     pov_err_msg        => l_imp_err_msg
                                    );
            -- Print Stats Report
            print_stats_p;
         /* import_cust_relations_p ( pov_ret_stats  => l_imp_ret_stats,
                                       pov_err_msg    => l_imp_err_msg
                                  );
         */
         END IF;

         IF piv_entity = g_pay_method
         THEN
            debug_msg_p ('STEP:7.5',
                         'MAIN_PROC_P',
                         'Calling Import Payment Methods of the customers'
                        );
            g_table_name := 'XXAR_CUST_PAY_METHOD_STG';
            import_pay_method_p (pov_ret_stats      => l_imp_ret_stats,
                                 pov_err_msg        => l_imp_err_msg
                                );
            -- Print Stats Report
            print_stats_p;
         END IF;

         -- Call import procedure for BANK
         IF piv_entity = g_bank
         THEN
            xxetn_debug_pkg.add_debug
                             ('---------------------------------------------');
            xxetn_debug_pkg.add_debug ('PROCEDURE: create_bank' || CHR (10));
            g_table_name := 'XXAR_CUSTOMER_BANKS_STG';
            create_banks_p;
            -- Print Stats Report
            print_stats_p;
         END IF;

         -- Call import procedure for BRANCH
         IF piv_entity = g_branch
         THEN
            xxetn_debug_pkg.add_debug
                             ('---------------------------------------------');
            xxetn_debug_pkg.add_debug ('PROCEDURE: create_branch' || CHR (10));
            g_table_name := 'XXAR_CUSTOMER_BRANCHES_STG';
            create_branches;
            -- Print Stats Report
            print_stats_p;
         END IF;

         -- Call import procedure for BANK ACCOUNTS
         IF piv_entity = g_account
         THEN
            xxetn_debug_pkg.add_debug
                             ('---------------------------------------------');
            xxetn_debug_pkg.add_debug (   'PROCEDURE: create_bank_accounts'
                                       || CHR (10)
                                      );
            g_table_name := 'XXAR_CUSTOMER_BANKACCNTS_STG';
            create_bank_accounts;
            -- Print Stats Report
            print_stats_p;
         END IF;

         -- Insert remaining errors into Error Table
         IF g_source_tab.COUNT > 0
         THEN
            debug_msg_p ('STEP:7.5',
                         'MAIN_PROC_P',
                         'Error Table Type Count: ' || g_source_tab.COUNT
                        );
            debug_msg_p ('STEP:7.6',
                         'MAIN_PROC_P',
                         'Logging Remaining Errors in Error table'
                        );
            g_err_cnt := 1;
            xxetn_common_error_pkg.add_error
                                        (pov_return_status      => l_log_ret_stats,
                                         pov_error_msg          => l_log_err_msg,
                                         pi_source_tab          => g_source_tab
                                        );

            IF l_log_ret_stats <> 'S'
            THEN
               --pov_ret_stats := 'E';
               print_log_message_p
                  (   'Not able to insert error details in Common Error Table: '
                   || 'Error: '
                   || l_log_err_msg
                  );
            END IF;

            -- Flushing PLSQL Table
            g_source_tab.DELETE;
         END IF;

         IF l_imp_ret_stats <> 'S'
         THEN                                -- error in import_budgets_p proc
            pov_errbuff := l_imp_err_msg;
            RAISE l_warn_excep;
         END IF;
      -- Run Mode is Reconcile
      ELSIF g_run_mode = 'RECONCILE'
      THEN
         debug_msg_p ('STEP:8', 'MAIN_PROC_P', 'Inside Reconcile Mode');
         print_stats_p;
      END IF;

      debug_msg_p ('STEP:11', 'MAIN_PROC_P', 'End of Program');
   EXCEPTION
      WHEN l_normal_excep
      THEN
         debug_msg_p ('STEP:12',
                      'MAIN_PROC_P',
                      'Normal Exception.Program Completed'
                     );
      WHEN l_warn_excep
      THEN
         pon_retcode := 1;
         debug_msg_p ('STEP:13', 'MAIN_PROC_P', pov_errbuff);
      WHEN l_err_excep
      THEN
         pon_retcode := 2;
         fnd_file.put_line (fnd_file.LOG, pov_errbuff);
         debug_msg_p ('STEP:14', 'MAIN_PROC_P', pov_errbuff);
      WHEN OTHERS
      THEN
         pon_retcode := 2;
         pov_errbuff :=
               'Error: Main Procedure: MAIN_PROC_P. Reason: '
            || SUBSTR (SQLERRM, 1, 250);
         fnd_file.put_line (fnd_file.LOG, pov_errbuff);
         debug_msg_p ('STEP:15', 'MAIN_PROC_P', pov_errbuff);
   END MAIN_PROC_P;
END xxar_customer_pkg;
/
EXIT;